import {
  _defineProperty,
  init_defineProperty
} from "./chunk-WTMLPC5P.js";
import {
  tiny_warning_esm_default
} from "./chunk-OWMJGVW2.js";
import {
  _assertThisInitialized,
  _setPrototypeOf
} from "./chunk-KPCKTKIM.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  init_extends,
  init_objectWithoutPropertiesLoose
} from "./chunk-DJVAONIT.js";
import {
  require_prop_types
} from "./chunk-2WYFTQK3.js";
import "./chunk-3M2UZNYF.js";
import {
  require_react
} from "./chunk-YP55OVAM.js";
import {
  __commonJS,
  __require,
  __toESM
} from "./chunk-S5KM4IGW.js";

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code.`);
        }
      }
    }));
  }
});

// browser-external:canvas
var require_canvas = __commonJS({
  "browser-external:canvas"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "canvas" has been externalized for browser compatibility. Cannot access "canvas.${key}" in client code.`);
        }
      }
    }));
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports2) {
    exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports2) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports2.Buffer = Buffer2;
    exports2.SlowBuffer = SlowBuffer;
    exports2.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports2.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b)
        return 0;
      let x = a.length;
      let y = b.length;
      for (let i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      let i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      const buffer = Buffer2.allocUnsafe(length);
      let pos = 0;
      for (i = 0; i < list.length; ++i) {
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer2.isBuffer(buf))
              buf = Buffer2.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer2.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      let str = "";
      const max = exports2.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      let x = thisEnd - thisStart;
      let y = end - start;
      const len = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      let i;
      if (dir) {
        let foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i;
      for (i = 0; i < length; ++i) {
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i = start;
      while (i < end) {
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      let out = "";
      for (let i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul = 1;
      let i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let i = byteLength2;
      let mul = 1;
      let val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let mul = 1;
      let i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      let i = byteLength2 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      let i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var errors = {};
    function E(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name) {
        if (name) {
          return `${name} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name, actual) {
        return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i >= start + 4; i -= 3) {
        res = `_${val.slice(i - 3, i)}${res}`;
      }
      return `${val.slice(0, i)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength2) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value, name) {
      if (typeof value !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(
        type || "offset",
        `>= ${type ? 1 : 0} and <= ${length}`,
        value
      );
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i;
      for (i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i = 0; i < 16; ++i) {
        const i16 = i * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/vite-compatible-readable-stream/lib/_registry.js
var require_registry = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/_registry.js"(exports2, module2) {
    module2.exports = {};
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports2, module2) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module2.exports = EventEmitter;
    module2.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++)
        args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/stream-browser.js"(exports2, module2) {
    module2.exports = require_events().EventEmitter;
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code.`);
        }
      }
    }));
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    function ownKeys4(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys4(Object(source), true).forEach(function(key) {
            _defineProperty2(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties3(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass3(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties3(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties3(Constructor, staticProps);
      return Constructor;
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = function() {
      function BufferList() {
        _classCallCheck3(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass3(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread4({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/vite-compatible-readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/vite-compatible-readable-stream/errors-browser.js"(exports2, module2) {
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require_buffer();
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports2.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/async_iterator.js"(exports2, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty2(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty2(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty2(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty2(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty2(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty2(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty2(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty2(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/from-browser.js"(exports2, module2) {
    module2.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/vite-compatible-readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/_stream_readable.js"() {
    "use strict";
    var Registry = require_registry();
    Registry.Readable = Readable;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Registry.Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Registry.Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get2() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get2() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get2() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get2() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get2() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/util-deprecate/browser.js
var require_browser = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports2, module2) {
    module2.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!global.localStorage)
          return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/vite-compatible-readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/_stream_writable.js"() {
    "use strict";
    var Registry = require_registry();
    Registry.Writable = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Registry.Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      var isDuplex = this instanceof Registry.Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      enumerable: false,
      get: function get2() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get2() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      enumerable: false,
      get: function get2() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      enumerable: false,
      get: function get2() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/vite-compatible-readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/_stream_duplex.js"() {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    var Registry = require_registry();
    Registry.Duplex = Duplex;
    require_inherits_browser()(Duplex, Registry.Readable);
    {
      keys = objectKeys(Registry.Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Registry.Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Registry.Readable.call(this, options);
      Registry.Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get2() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get2() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get2() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get2() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/vite-compatible-readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/_stream_transform.js"() {
    "use strict";
    var Registry = require_registry();
    Registry.Transform = Transform2;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    require_inherits_browser()(Transform2, Registry.Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform2(options) {
      if (!(this instanceof Transform2))
        return new Transform2(options);
      Registry.Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform2.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Registry.Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform2.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform2.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform2.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform2.prototype._destroy = function(err, cb) {
      Registry.Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/vite-compatible-readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/_stream_passthrough.js"() {
    "use strict";
    var Registry = require_registry();
    Registry.PassThrough = PassThrough;
    require_inherits_browser()(PassThrough, Registry.Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/vite-compatible-readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/vite-compatible-readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/vite-compatible-readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/vite-compatible-readable-stream/readable-browser.js"(exports2, module2) {
    var Registry = require_registry();
    require_stream_readable();
    require_stream_writable();
    require_stream_duplex();
    require_stream_transform();
    require_stream_passthrough();
    require_stream_passthrough();
    exports2 = module2.exports = Registry.Readable;
    exports2.Stream = Registry.Readable;
    exports2.Readable = Registry.Readable;
    exports2.Writable = Registry.Writable;
    exports2.Duplex = Registry.Duplex;
    exports2.Transform = Registry.Transform;
    exports2.PassThrough = Registry.PassThrough;
    exports2.finished = require_end_of_stream();
    exports2.pipeline = require_pipeline();
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/has-tostringtag/shams.js"(exports2, module2) {
    "use strict";
    var hasSymbols = require_shams();
    module2.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    module2.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x) {
      return x.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module2.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "node_modules/is-arguments/index.js"(exports2, module2) {
    "use strict";
    var hasToStringTag = require_shams2()();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module2.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// node_modules/is-generator-function/index.js
var require_is_generator_function = __commonJS({
  "node_modules/is-generator-function/index.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    var fnToStr = Function.prototype.toString;
    var isFnRegex = /^\s*(?:function)?\*/;
    var hasToStringTag = require_shams2()();
    var getProto = Object.getPrototypeOf;
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    module2.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex.test(fnToStr.call(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };
  }
});

// node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "node_modules/is-callable/index.js"(exports2, module2) {
    "use strict";
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr.call(all) === toStr.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module2.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// node_modules/for-each/index.js
var require_for_each = __commonJS({
  "node_modules/for-each/index.js"(exports2, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          if (receiver == null) {
            iterator(array[i], i, array);
          } else {
            iterator.call(receiver, array[i], i, array);
          }
        }
      }
    };
    var forEachString = function forEachString2(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
        if (receiver == null) {
          iterator(string.charAt(i), i, string);
        } else {
          iterator.call(receiver, string.charAt(i), i, string);
        }
      }
    };
    var forEachObject = function forEachObject2(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };
    var forEach = function forEach2(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (toStr.call(list) === "[object Array]") {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
    module2.exports = forEach;
  }
});

// node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "node_modules/available-typed-arrays/index.js"(exports2, module2) {
    "use strict";
    var possibleNames = [
      "BigInt64Array",
      "BigUint64Array",
      "Float32Array",
      "Float64Array",
      "Int16Array",
      "Int32Array",
      "Int8Array",
      "Uint16Array",
      "Uint32Array",
      "Uint8Array",
      "Uint8ClampedArray"
    ];
    var g = typeof globalThis === "undefined" ? global : globalThis;
    module2.exports = function availableTypedArrays() {
      var out = [];
      for (var i = 0; i < possibleNames.length; i++) {
        if (typeof g[possibleNames[i]] === "function") {
          out[out.length] = possibleNames[i];
        }
      }
      return out;
    };
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/is-typed-array/index.js
var require_is_typed_array = __commonJS({
  "node_modules/is-typed-array/index.js"(exports2, module2) {
    "use strict";
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var gOPD = require_gopd();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    var typedArrays = availableTypedArrays();
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
      for (var i = 0; i < array.length; i += 1) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    };
    var $slice = callBound("String.prototype.slice");
    var toStrTags = {};
    var getPrototypeOf = Object.getPrototypeOf;
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          toStrTags[typedArray] = descriptor.get;
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var anyTrue = false;
      forEach(toStrTags, function(getter, typedArray) {
        if (!anyTrue) {
          try {
            anyTrue = getter.call(value) === typedArray;
          } catch (e) {
          }
        }
      });
      return anyTrue;
    };
    module2.exports = function isTypedArray(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $slice($toString(value), 8, -1);
        return $indexOf(typedArrays, tag) > -1;
      }
      if (!gOPD) {
        return false;
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "node_modules/which-typed-array/index.js"(exports2, module2) {
    "use strict";
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBound = require_callBound();
    var gOPD = require_gopd();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var toStrTags = {};
    var getPrototypeOf = Object.getPrototypeOf;
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        if (typeof g[typedArray] === "function") {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var foundName = false;
      forEach(toStrTags, function(getter, typedArray) {
        if (!foundName) {
          try {
            var name = getter.call(value);
            if (name === typedArray) {
              foundName = name;
            }
          } catch (e) {
          }
        }
      });
      return foundName;
    };
    var isTypedArray = require_is_typed_array();
    module2.exports = function whichTypedArray(value) {
      if (!isTypedArray(value)) {
        return false;
      }
      if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        return $slice($toString(value), 8, -1);
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/util/support/types.js
var require_types = __commonJS({
  "node_modules/util/support/types.js"(exports2) {
    "use strict";
    var isArgumentsObject = require_is_arguments();
    var isGeneratorFunction = require_is_generator_function();
    var whichTypedArray = require_which_typed_array();
    var isTypedArray = require_is_typed_array();
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    var bigIntValue;
    if (SymbolSupported) {
      symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    var symbolValue;
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports2.isArgumentsObject = isArgumentsObject;
    exports2.isGeneratorFunction = isGeneratorFunction;
    exports2.isTypedArray = isTypedArray;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports2.isPromise = isPromise;
    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray(value) || isDataView(value);
    }
    exports2.isArrayBufferView = isArrayBufferView;
    function isUint8Array(value) {
      return whichTypedArray(value) === "Uint8Array";
    }
    exports2.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === "Uint8ClampedArray";
    }
    exports2.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray(value) === "Uint16Array";
    }
    exports2.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray(value) === "Uint32Array";
    }
    exports2.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray(value) === "Int8Array";
    }
    exports2.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray(value) === "Int16Array";
    }
    exports2.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray(value) === "Int32Array";
    }
    exports2.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray(value) === "Float32Array";
    }
    exports2.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray(value) === "Float64Array";
    }
    exports2.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray(value) === "BigInt64Array";
    }
    exports2.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray(value) === "BigUint64Array";
    }
    exports2.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports2.isMap = isMap;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports2.isSet = isSet;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports2.isWeakMap = isWeakMap;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports2.isWeakSet = isWeakSet;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer2(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports2.isArrayBuffer = isArrayBuffer2;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports2.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports2.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports2.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports2.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports2.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports2.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports2.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports2.isNumberObject = isNumberObject;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports2.isStringObject = isStringObject;
    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports2.isBooleanObject = isBooleanObject;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports2.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports2.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports2.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer2(value) || isSharedArrayBuffer(value));
    }
    exports2.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports2, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  }
});

// node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/util/support/isBufferBrowser.js"(exports2, module2) {
    module2.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/util/util.js
var require_util2 = __commonJS({
  "node_modules/util/util.js"(exports2) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports2.format = function(f) {
      if (!isString2(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x2) {
        if (x2 === "%%")
          return "%";
        if (i >= len)
          return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports2.deprecate = function(fn, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports2.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (process.env.NODE_DEBUG) {
      debugEnv = process.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    var debugEnv;
    exports2.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports2.format.apply(exports2, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports2._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined(ctx.depth))
        ctx.depth = 2;
      if (isUndefined(ctx.colors))
        ctx.colors = false;
      if (isUndefined(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports2.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports2.inspect && !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString2(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString2(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0)
          numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    exports2.types = require_types();
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports2.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber;
    function isString2(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString2;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    exports2.types.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports2.isDate = isDate;
    exports2.types.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports2.isError = isError;
    exports2.types.isNativeError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports2.log = function() {
      console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
    };
    exports2.inherits = require_inherits_browser();
    exports2._extend = function(origin, add) {
      if (!add || !isObject(add))
        return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports2.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol)
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports2.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports2.callbackify = callbackify;
  }
});

// node_modules/assert/build/internal/errors.js
var require_errors = __commonJS({
  "node_modules/assert/build/internal/errors.js"(exports2, module2) {
    "use strict";
    function _typeof3(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf2(subClass, superClass);
    }
    function _setPrototypeOf2(o, p) {
      _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf2(o, p);
    }
    var codes = {};
    var assert;
    var util;
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inherits2(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck3(this, NodeError2);
          _this = _possibleConstructorReturn2(this, _getPrototypeOf2(NodeError2).call(this, getMessage(arg1, arg2, arg3)));
          _this.code = code;
          return _this;
        }
        return NodeError2;
      }(Base);
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      if (assert === void 0)
        assert = require_assert();
      assert(typeof name === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof3(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util === void 0)
        util = require_util2();
      var inspected = util.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError, RangeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
      var type;
      if (value && value.constructor && value.constructor.name) {
        type = "instance of ".concat(value.constructor.name);
      } else {
        type = "type ".concat(_typeof3(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert === void 0)
        assert = require_assert();
      assert(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len - 1).join(", ");
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    module2.exports.codes = codes;
  }
});

// node_modules/assert/build/internal/assert/assertion_error.js
var require_assertion_error = __commonJS({
  "node_modules/assert/build/internal/assert/assertion_error.js"(exports2, module2) {
    "use strict";
    function _objectSpread4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys4 = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys4 = ownKeys4.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys4.forEach(function(key) {
          _defineProperty2(target, key, source[key]);
        });
      }
      return target;
    }
    function _defineProperty2(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties3(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass3(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties3(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties3(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn2(self2, call) {
      if (call && (_typeof3(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized2(self2);
    }
    function _assertThisInitialized2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf2(subClass, superClass);
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2))
          return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2))
            return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf2(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf2(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _construct(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            _setPrototypeOf2(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf2(o, p) {
      _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf2(o, p);
    }
    function _getPrototypeOf2(o) {
      _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf2(o);
    }
    function _typeof3(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    var _require = require_util2();
    var inspect = _require.inspect;
    var _require2 = require_errors();
    var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0)
        return "";
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));
      while (count) {
        str += str;
        count--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function(key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        showHidden: false,
        breakLength: Infinity,
        showProxy: false,
        sorted: true,
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof3(actual) === "object" && _typeof3(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof3(actual) !== "object" || actual === null) && (_typeof3(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            }
            if (i > 2) {
              indicator = "\n  ".concat(repeat(" ", i), "^");
              i = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b = expectedLines[expectedLines.length - 1];
      while (a === b) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0)
          break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i = 0; i < maxLines; i++) {
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++;
        } else if (expectedLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i];
          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError = function(_Error) {
      _inherits2(AssertionError2, _Error);
      function AssertionError2(options) {
        var _this;
        _classCallCheck3(this, AssertionError2);
        if (_typeof3(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _possibleConstructorReturn2(this, _getPrototypeOf2(AssertionError2).call(this, String(message)));
        } else {
          if (process.stderr && process.stderr.isTTY) {
            if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof3(actual) === "object" && actual !== null && _typeof3(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _possibleConstructorReturn2(this, _getPrototypeOf2(AssertionError2).call(this, createErrDiff(actual, expected, operator)));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof3(actual) === "object" && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _possibleConstructorReturn2(this, _getPrototypeOf2(AssertionError2).call(this, "".concat(base, " ").concat(res[0])));
            } else {
              _this = _possibleConstructorReturn2(this, _getPrototypeOf2(AssertionError2).call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n")));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _possibleConstructorReturn2(this, _getPrototypeOf2(AssertionError2).call(this, "".concat(_res).concat(other)));
          }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized2(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized2(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn2(_this);
      }
      _createClass3(AssertionError2, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: inspect.custom,
        value: function value(recurseTimes, ctx) {
          return inspect(this, _objectSpread4({}, ctx, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError2;
    }(_wrapNativeSuper(Error));
    module2.exports = AssertionError;
  }
});

// node_modules/es6-object-assign/index.js
var require_es6_object_assign = __commonJS({
  "node_modules/es6-object-assign/index.js"(exports2, module2) {
    "use strict";
    function assign(target, firstSource) {
      if (target === void 0 || target === null) {
        throw new TypeError("Cannot convert first argument to object");
      }
      var to = Object(target);
      for (var i = 1; i < arguments.length; i++) {
        var nextSource = arguments[i];
        if (nextSource === void 0 || nextSource === null) {
          continue;
        }
        var keysArray = Object.keys(Object(nextSource));
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== void 0 && desc.enumerable) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
      return to;
    }
    function polyfill() {
      if (!Object.assign) {
        Object.defineProperty(Object, "assign", {
          enumerable: false,
          configurable: true,
          writable: true,
          value: assign
        });
      }
    }
    module2.exports = {
      assign,
      polyfill
    };
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString2 = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString2 && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation2();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module2.exports = keysShim;
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
          return true;
        } catch (e) {
          return false;
        }
      }
      return false;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!hasPropertyDescriptors()) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports2, module2) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var hasPropertyDescriptors = require_has_property_descriptors()();
    var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
    var defineProperty = function(object, name, value, predicate) {
      if (name in object && (!isFunction(predicate) || !predicate())) {
        return;
      }
      if (supportsDescriptors) {
        origDefineProperty(object, name, {
          configurable: true,
          enumerable: false,
          value,
          writable: true
        });
      } else {
        object[name] = value;
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// node_modules/object-is/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object-is/implementation.js"(exports2, module2) {
    "use strict";
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module2.exports = function is(a, b) {
      if (a === 0 && b === 0) {
        return 1 / a === 1 / b;
      }
      if (a === b) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object-is/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation3();
    module2.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/object-is/shim.js
var require_shim = __commonJS({
  "node_modules/object-is/shim.js"(exports2, module2) {
    "use strict";
    var getPolyfill = require_polyfill();
    var define2 = require_define_properties();
    module2.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports2, module2) {
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/is-nan/implementation.js
var require_implementation4 = __commonJS({
  "node_modules/is-nan/implementation.js"(exports2, module2) {
    "use strict";
    module2.exports = function isNaN2(value) {
      return value !== value;
    };
  }
});

// node_modules/is-nan/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/is-nan/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation4();
    module2.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// node_modules/is-nan/shim.js
var require_shim2 = __commonJS({
  "node_modules/is-nan/shim.js"(exports2, module2) {
    "use strict";
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill2();
    module2.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define2(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "node_modules/is-nan/index.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind();
    var define2 = require_define_properties();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill2();
    var shim = require_shim2();
    var polyfill = callBind(getPolyfill(), Number);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/assert/build/internal/util/comparisons.js
var require_comparisons = __commonJS({
  "node_modules/assert/build/internal/util/comparisons.js"(exports2, module2) {
    "use strict";
    function _slicedToArray3(arr, i) {
      return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _nonIterableRest3();
    }
    function _nonIterableRest3() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    function _iterableToArrayLimit3(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles3(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _typeof3(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set) {
      var array = [];
      set.forEach(function(value) {
        return array.push(value);
      });
      return array;
    };
    var arrayFromMap = function arrayFromMap2(map) {
      var array = [];
      map.forEach(function(value, key) {
        return array.push([key, value]);
      });
      return array;
    };
    var objectIs = Object.is ? Object.is : require_object_is();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
    function uncurryThis(f) {
      return f.call.bind(f);
    }
    var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString = uncurryThis(Object.prototype.toString);
    var _require$types = require_util2().types;
    var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
    var isArrayBufferView = _require$types.isArrayBufferView;
    var isDate = _require$types.isDate;
    var isMap = _require$types.isMap;
    var isRegExp = _require$types.isRegExp;
    var isSet = _require$types.isSet;
    var isNativeError = _require$types.isNativeError;
    var isBoxedPrimitive = _require$types.isBoxedPrimitive;
    var isNumberObject = _require$types.isNumberObject;
    var isStringObject = _require$types.isStringObject;
    var isBooleanObject = _require$types.isBooleanObject;
    var isBigIntObject = _require$types.isBigIntObject;
    var isSymbolObject = _require$types.isSymbolObject;
    var isFloat32Array = _require$types.isFloat32Array;
    var isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10)
        return true;
      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57)
          return true;
      }
      return key.length === 10 && key >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    function compare(a, b) {
      if (a === b) {
        return 0;
      }
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var ONLY_ENUMERABLE = void 0;
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b) {
      return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
    }
    function areSimilarFloatArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b[offset]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b) {
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0)
          return true;
        return strict ? objectIs(val1, val2) : true;
      }
      if (strict) {
        if (_typeof3(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof3(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof3(val1) !== "object") {
          if (val2 === null || _typeof3(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof3(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString(val1);
      var val2Tag = objectToString(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }
      if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys) {
      return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i = 0;
      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty(val2, aKeys[i])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count = 0;
          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];
            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }
              aKeys.push(key);
              count++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set, val1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
          set.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof3(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null)
        return altValue;
      return b.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b.get(altValue);
      if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }
    function setEquiv(a, b, strict, memo) {
      var set = null;
      var aValues = arrayFromSet(a);
      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i];
        if (_typeof3(val) === "object" && val !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        } else if (!b.has(val)) {
          if (strict)
            return false;
          if (!setMightHaveLoosePrim(a, b, val)) {
            return false;
          }
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        }
      }
      if (set !== null) {
        var bValues = arrayFromSet(b);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof3(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo))
              return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b, strict, memo) {
      var set = null;
      var aEntries = arrayFromMap(a);
      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray3(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof3(key) === "object" && key !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(key);
        } else {
          var item2 = b.get(key);
          if (item2 === void 0 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict)
              return false;
            if (!mapMightHaveLoosePrim(a, b, key, item1, memo))
              return false;
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          }
        }
      }
      if (set !== null) {
        var bEntries = arrayFromMap(b);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray3(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof3(key) === "object" && key !== null) {
            if (!mapHasEqualEntry(set, a, key, item, strict, memo))
              return false;
          } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function objEquiv(a, b, strict, keys, memos, iterationType) {
      var i = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty(b, i)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i < keysA.length; i++) {
              var key = keysA[i];
              if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i = 0; i < keys.length; i++) {
        var _key = keys[i];
        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    module2.exports = {
      isDeepEqual,
      isDeepStrictEqual
    };
  }
});

// node_modules/assert/build/assert.js
var require_assert = __commonJS({
  "node_modules/assert/build/assert.js"(exports2, module2) {
    "use strict";
    function _typeof3(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof3 = function _typeof4(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof3 = function _typeof4(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof3(obj);
    }
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = require_errors();
    var _require$codes = _require.codes;
    var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
    var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError = require_assertion_error();
    var _require2 = require_util2();
    var inspect = _require2.inspect;
    var _require$types = require_util2().types;
    var isPromise = _require$types.isPromise;
    var isRegExp = _require$types.isRegExp;
    var objectAssign = Object.assign ? Object.assign : require_es6_object_assign().assign;
    var objectIs = Object.is ? Object.is : require_object_is();
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = require_comparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert = module2.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error)
        throw obj.message;
      throw new AssertionError(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
          warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2)
          operator = "!=";
      }
      if (message instanceof Error)
        throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert.fail = fail;
    assert.AssertionError = AssertionError;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert.ok = ok;
    assert.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0)
        lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = function Comparison2(obj, keys, actual) {
      var _this = this;
      _classCallCheck3(this, Comparison2);
      keys.forEach(function(key) {
        if (key in obj) {
          if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && obj[key].test(actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    };
    function compareExceptionKey(actual, expected, key, message, keys, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          var a = new Comparison(actual, keys);
          var b = new Comparison(expected, keys, actual);
          var err = new AssertionError({
            actual: a,
            expected: b,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp(expected))
          return expected.test(actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof3(actual) !== "object" || actual === null) {
          var err = new AssertionError({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys = Object.keys(expected);
        if (expected instanceof Error) {
          keys.push("name", "message");
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        keys.forEach(function(key) {
          if (typeof actual[key] === "string" && isRegExp(expected[key]) && expected[key].test(actual[key])) {
            return;
          }
          compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise(obj) || obj !== null && _typeof3(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (_typeof3(actual) === "object" && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error;
        error = void 0;
      } else if (error != null && _typeof3(error) !== "object" && typeof error !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL)
        return;
      if (typeof error === "string") {
        message = error;
        error = void 0;
      }
      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof3(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }
        var newErr = new AssertionError({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i = 0; i < tmp2.length; i++) {
            var pos = tmp1.indexOf(tmp2[i]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert.strict = objectAssign(strict, assert, {
      equal: assert.strictEqual,
      deepEqual: assert.deepStrictEqual,
      notEqual: assert.notStrictEqual,
      notDeepEqual: assert.notDeepStrictEqual
    });
    assert.strict.strict = assert.strict;
  }
});

// node_modules/pako/lib/zlib/zstream.js
var require_zstream = __commonJS({
  "node_modules/pako/lib/zlib/zstream.js"(exports2, module2) {
    "use strict";
    function ZStream() {
      this.input = null;
      this.next_in = 0;
      this.avail_in = 0;
      this.total_in = 0;
      this.output = null;
      this.next_out = 0;
      this.avail_out = 0;
      this.total_out = 0;
      this.msg = "";
      this.state = null;
      this.data_type = 2;
      this.adler = 0;
    }
    module2.exports = ZStream;
  }
});

// node_modules/pako/lib/utils/common.js
var require_common = __commonJS({
  "node_modules/pako/lib/utils/common.js"(exports2) {
    "use strict";
    var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";
    function _has(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    exports2.assign = function(obj) {
      var sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        var source = sources.shift();
        if (!source) {
          continue;
        }
        if (typeof source !== "object") {
          throw new TypeError(source + "must be non-object");
        }
        for (var p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }
      return obj;
    };
    exports2.shrinkBuf = function(buf, size) {
      if (buf.length === size) {
        return buf;
      }
      if (buf.subarray) {
        return buf.subarray(0, size);
      }
      buf.length = size;
      return buf;
    };
    var fnTyped = {
      arraySet: function(dest, src, src_offs, len, dest_offs) {
        if (src.subarray && dest.subarray) {
          dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
          return;
        }
        for (var i = 0; i < len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      },
      flattenChunks: function(chunks) {
        var i, l, len, pos, chunk, result;
        len = 0;
        for (i = 0, l = chunks.length; i < l; i++) {
          len += chunks[i].length;
        }
        result = new Uint8Array(len);
        pos = 0;
        for (i = 0, l = chunks.length; i < l; i++) {
          chunk = chunks[i];
          result.set(chunk, pos);
          pos += chunk.length;
        }
        return result;
      }
    };
    var fnUntyped = {
      arraySet: function(dest, src, src_offs, len, dest_offs) {
        for (var i = 0; i < len; i++) {
          dest[dest_offs + i] = src[src_offs + i];
        }
      },
      flattenChunks: function(chunks) {
        return [].concat.apply([], chunks);
      }
    };
    exports2.setTyped = function(on) {
      if (on) {
        exports2.Buf8 = Uint8Array;
        exports2.Buf16 = Uint16Array;
        exports2.Buf32 = Int32Array;
        exports2.assign(exports2, fnTyped);
      } else {
        exports2.Buf8 = Array;
        exports2.Buf16 = Array;
        exports2.Buf32 = Array;
        exports2.assign(exports2, fnUntyped);
      }
    };
    exports2.setTyped(TYPED_OK);
  }
});

// node_modules/pako/lib/zlib/trees.js
var require_trees = __commonJS({
  "node_modules/pako/lib/zlib/trees.js"(exports2) {
    "use strict";
    var utils = require_common();
    var Z_FIXED = 4;
    var Z_BINARY = 0;
    var Z_TEXT = 1;
    var Z_UNKNOWN = 2;
    function zero(buf) {
      var len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    }
    var STORED_BLOCK = 0;
    var STATIC_TREES = 1;
    var DYN_TREES = 2;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var Buf_size = 16;
    var MAX_BL_BITS = 7;
    var END_BLOCK = 256;
    var REP_3_6 = 16;
    var REPZ_3_10 = 17;
    var REPZ_11_138 = 18;
    var extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
    var extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
    var extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
    var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    var DIST_CODE_LEN = 512;
    var static_ltree = new Array((L_CODES + 2) * 2);
    zero(static_ltree);
    var static_dtree = new Array(D_CODES * 2);
    zero(static_dtree);
    var _dist_code = new Array(DIST_CODE_LEN);
    zero(_dist_code);
    var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
    zero(_length_code);
    var base_length = new Array(LENGTH_CODES);
    zero(base_length);
    var base_dist = new Array(D_CODES);
    zero(base_dist);
    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
      this.static_tree = static_tree;
      this.extra_bits = extra_bits;
      this.extra_base = extra_base;
      this.elems = elems;
      this.max_length = max_length;
      this.has_stree = static_tree && static_tree.length;
    }
    var static_l_desc;
    var static_d_desc;
    var static_bl_desc;
    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;
      this.max_code = 0;
      this.stat_desc = stat_desc;
    }
    function d_code(dist) {
      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    }
    function put_short(s, w) {
      s.pending_buf[s.pending++] = w & 255;
      s.pending_buf[s.pending++] = w >>> 8 & 255;
    }
    function send_bits(s, value, length) {
      if (s.bi_valid > Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 65535;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> Buf_size - s.bi_valid;
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= value << s.bi_valid & 65535;
        s.bi_valid += length;
      }
    }
    function send_code(s, c, tree) {
      send_bits(s, tree[c * 2], tree[c * 2 + 1]);
    }
    function bi_reverse(code, len) {
      var res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    }
    function bi_flush(s) {
      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 255;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    }
    function gen_bitlen(s, desc) {
      var tree = desc.dyn_tree;
      var max_code = desc.max_code;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var extra = desc.stat_desc.extra_bits;
      var base = desc.stat_desc.extra_base;
      var max_length = desc.stat_desc.max_length;
      var h;
      var n, m;
      var bits;
      var xbits;
      var f;
      var overflow = 0;
      for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      }
      tree[s.heap[s.heap_max] * 2 + 1] = 0;
      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1] = bits;
        if (n > max_code) {
          continue;
        }
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2];
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1] + xbits);
        }
      }
      if (overflow === 0) {
        return;
      }
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) {
          bits--;
        }
        s.bl_count[bits]--;
        s.bl_count[bits + 1] += 2;
        s.bl_count[max_length]--;
        overflow -= 2;
      } while (overflow > 0);
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) {
            continue;
          }
          if (tree[m * 2 + 1] !== bits) {
            s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
            tree[m * 2 + 1] = bits;
          }
          n--;
        }
      }
    }
    function gen_codes(tree, max_code, bl_count) {
      var next_code = new Array(MAX_BITS + 1);
      var code = 0;
      var bits;
      var n;
      for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = code + bl_count[bits - 1] << 1;
      }
      for (n = 0; n <= max_code; n++) {
        var len = tree[n * 2 + 1];
        if (len === 0) {
          continue;
        }
        tree[n * 2] = bi_reverse(next_code[len]++, len);
      }
    }
    function tr_static_init() {
      var n;
      var bits;
      var length;
      var code;
      var dist;
      var bl_count = new Array(MAX_BITS + 1);
      length = 0;
      for (code = 0; code < LENGTH_CODES - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < 1 << extra_lbits[code]; n++) {
          _length_code[length++] = code;
        }
      }
      _length_code[length - 1] = code;
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < 1 << extra_dbits[code]; n++) {
          _dist_code[dist++] = code;
        }
      }
      dist >>= 7;
      for (; code < D_CODES; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }
      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
      }
      gen_codes(static_ltree, L_CODES + 1, bl_count);
      for (n = 0; n < D_CODES; n++) {
        static_dtree[n * 2 + 1] = 5;
        static_dtree[n * 2] = bi_reverse(n, 5);
      }
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
    }
    function init_block(s) {
      var n;
      for (n = 0; n < L_CODES; n++) {
        s.dyn_ltree[n * 2] = 0;
      }
      for (n = 0; n < D_CODES; n++) {
        s.dyn_dtree[n * 2] = 0;
      }
      for (n = 0; n < BL_CODES; n++) {
        s.bl_tree[n * 2] = 0;
      }
      s.dyn_ltree[END_BLOCK * 2] = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    }
    function bi_windup(s) {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    }
    function copy_block(s, buf, len, header) {
      bi_windup(s);
      if (header) {
        put_short(s, len);
        put_short(s, ~len);
      }
      utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
      s.pending += len;
    }
    function smaller(tree, n, m, depth) {
      var _n2 = n * 2;
      var _m2 = m * 2;
      return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
    }
    function pqdownheap(s, tree, k) {
      var v = s.heap[k];
      var j = k << 1;
      while (j <= s.heap_len) {
        if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        if (smaller(tree, v, s.heap[j], s.depth)) {
          break;
        }
        s.heap[k] = s.heap[j];
        k = j;
        j <<= 1;
      }
      s.heap[k] = v;
    }
    function compress_block(s, ltree, dtree) {
      var dist;
      var lc;
      var lx = 0;
      var code;
      var extra;
      if (s.last_lit !== 0) {
        do {
          dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
          lc = s.pending_buf[s.l_buf + lx];
          lx++;
          if (dist === 0) {
            send_code(s, lc, ltree);
          } else {
            code = _length_code[lc];
            send_code(s, code + LITERALS + 1, ltree);
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);
            }
            dist--;
            code = d_code(dist);
            send_code(s, code, dtree);
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);
            }
          }
        } while (lx < s.last_lit);
      }
      send_code(s, END_BLOCK, ltree);
    }
    function build_tree(s, desc) {
      var tree = desc.dyn_tree;
      var stree = desc.stat_desc.static_tree;
      var has_stree = desc.stat_desc.has_stree;
      var elems = desc.stat_desc.elems;
      var n, m;
      var max_code = -1;
      var node;
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;
      for (n = 0; n < elems; n++) {
        if (tree[n * 2] !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;
        } else {
          tree[n * 2 + 1] = 0;
        }
      }
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (has_stree) {
          s.static_len -= stree[node * 2 + 1];
        }
      }
      desc.max_code = max_code;
      for (n = s.heap_len >> 1; n >= 1; n--) {
        pqdownheap(s, tree, n);
      }
      node = elems;
      do {
        n = s.heap[1];
        s.heap[1] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1);
        m = s.heap[1];
        s.heap[--s.heap_max] = n;
        s.heap[--s.heap_max] = m;
        tree[node * 2] = tree[n * 2] + tree[m * 2];
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node;
        s.heap[1] = node++;
        pqdownheap(s, tree, 1);
      } while (s.heap_len >= 2);
      s.heap[--s.heap_max] = s.heap[1];
      gen_bitlen(s, desc);
      gen_codes(tree, max_code, s.bl_count);
    }
    function scan_tree(s, tree, max_code) {
      var n;
      var prevlen = -1;
      var curlen;
      var nextlen = tree[0 * 2 + 1];
      var count = 0;
      var max_count = 7;
      var min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1] = 65535;
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          s.bl_tree[curlen * 2] += count;
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            s.bl_tree[curlen * 2]++;
          }
          s.bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]++;
        } else {
          s.bl_tree[REPZ_11_138 * 2]++;
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    function send_tree(s, tree, max_code) {
      var n;
      var prevlen = -1;
      var curlen;
      var nextlen = tree[0 * 2 + 1];
      var count = 0;
      var max_count = 7;
      var min_count = 4;
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];
        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          do {
            send_code(s, curlen, s.bl_tree);
          } while (--count !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);
        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);
        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
    function build_bl_tree(s) {
      var max_blindex;
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
      build_tree(s, s.bl_desc);
      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
          break;
        }
      }
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      return max_blindex;
    }
    function send_all_trees(s, lcodes, dcodes, blcodes) {
      var rank;
      send_bits(s, lcodes - 257, 5);
      send_bits(s, dcodes - 1, 5);
      send_bits(s, blcodes - 4, 4);
      for (rank = 0; rank < blcodes; rank++) {
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
      }
      send_tree(s, s.dyn_ltree, lcodes - 1);
      send_tree(s, s.dyn_dtree, dcodes - 1);
    }
    function detect_data_type(s) {
      var black_mask = 4093624447;
      var n;
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
          return Z_BINARY;
        }
      }
      if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS; n++) {
        if (s.dyn_ltree[n * 2] !== 0) {
          return Z_TEXT;
        }
      }
      return Z_BINARY;
    }
    var static_init_done = false;
    function _tr_init(s) {
      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }
      s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
      s.bi_buf = 0;
      s.bi_valid = 0;
      init_block(s);
    }
    function _tr_stored_block(s, buf, stored_len, last) {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
      copy_block(s, buf, stored_len, true);
    }
    function _tr_align(s) {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    }
    function _tr_flush_block(s, buf, stored_len, last) {
      var opt_lenb, static_lenb;
      var max_blindex = 0;
      if (s.level > 0) {
        if (s.strm.data_type === Z_UNKNOWN) {
          s.strm.data_type = detect_data_type(s);
        }
        build_tree(s, s.l_desc);
        build_tree(s, s.d_desc);
        max_blindex = build_bl_tree(s);
        opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        if (static_lenb <= opt_lenb) {
          opt_lenb = static_lenb;
        }
      } else {
        opt_lenb = static_lenb = stored_len + 5;
      }
      if (stored_len + 4 <= opt_lenb && buf !== -1) {
        _tr_stored_block(s, buf, stored_len, last);
      } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);
      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      init_block(s);
      if (last) {
        bi_windup(s);
      }
    }
    function _tr_tally(s, dist, lc) {
      s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;
      s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
      s.last_lit++;
      if (dist === 0) {
        s.dyn_ltree[lc * 2]++;
      } else {
        s.matches++;
        dist--;
        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;
        s.dyn_dtree[d_code(dist) * 2]++;
      }
      return s.last_lit === s.lit_bufsize - 1;
    }
    exports2._tr_init = _tr_init;
    exports2._tr_stored_block = _tr_stored_block;
    exports2._tr_flush_block = _tr_flush_block;
    exports2._tr_tally = _tr_tally;
    exports2._tr_align = _tr_align;
  }
});

// node_modules/pako/lib/zlib/adler32.js
var require_adler32 = __commonJS({
  "node_modules/pako/lib/zlib/adler32.js"(exports2, module2) {
    "use strict";
    function adler32(adler, buf, len, pos) {
      var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
      while (len !== 0) {
        n = len > 2e3 ? 2e3 : len;
        len -= n;
        do {
          s1 = s1 + buf[pos++] | 0;
          s2 = s2 + s1 | 0;
        } while (--n);
        s1 %= 65521;
        s2 %= 65521;
      }
      return s1 | s2 << 16 | 0;
    }
    module2.exports = adler32;
  }
});

// node_modules/pako/lib/zlib/crc32.js
var require_crc32 = __commonJS({
  "node_modules/pako/lib/zlib/crc32.js"(exports2, module2) {
    "use strict";
    function makeTable() {
      var c, table = [];
      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
        }
        table[n] = c;
      }
      return table;
    }
    var crcTable = makeTable();
    function crc32(crc, buf, len, pos) {
      var t = crcTable, end = pos + len;
      crc ^= -1;
      for (var i = pos; i < end; i++) {
        crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
      }
      return crc ^ -1;
    }
    module2.exports = crc32;
  }
});

// node_modules/pako/lib/zlib/messages.js
var require_messages = __commonJS({
  "node_modules/pako/lib/zlib/messages.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      2: "need dictionary",
      1: "stream end",
      0: "",
      "-1": "file error",
      "-2": "stream error",
      "-3": "data error",
      "-4": "insufficient memory",
      "-5": "buffer error",
      "-6": "incompatible version"
    };
  }
});

// node_modules/pako/lib/zlib/deflate.js
var require_deflate = __commonJS({
  "node_modules/pako/lib/zlib/deflate.js"(exports2) {
    "use strict";
    var utils = require_common();
    var trees = require_trees();
    var adler32 = require_adler32();
    var crc32 = require_crc32();
    var msg = require_messages();
    var Z_NO_FLUSH = 0;
    var Z_PARTIAL_FLUSH = 1;
    var Z_FULL_FLUSH = 3;
    var Z_FINISH = 4;
    var Z_BLOCK = 5;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_STREAM_ERROR = -2;
    var Z_DATA_ERROR = -3;
    var Z_BUF_ERROR = -5;
    var Z_DEFAULT_COMPRESSION = -1;
    var Z_FILTERED = 1;
    var Z_HUFFMAN_ONLY = 2;
    var Z_RLE = 3;
    var Z_FIXED = 4;
    var Z_DEFAULT_STRATEGY = 0;
    var Z_UNKNOWN = 2;
    var Z_DEFLATED = 8;
    var MAX_MEM_LEVEL = 9;
    var MAX_WBITS = 15;
    var DEF_MEM_LEVEL = 8;
    var LENGTH_CODES = 29;
    var LITERALS = 256;
    var L_CODES = LITERALS + 1 + LENGTH_CODES;
    var D_CODES = 30;
    var BL_CODES = 19;
    var HEAP_SIZE = 2 * L_CODES + 1;
    var MAX_BITS = 15;
    var MIN_MATCH = 3;
    var MAX_MATCH = 258;
    var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
    var PRESET_DICT = 32;
    var INIT_STATE = 42;
    var EXTRA_STATE = 69;
    var NAME_STATE = 73;
    var COMMENT_STATE = 91;
    var HCRC_STATE = 103;
    var BUSY_STATE = 113;
    var FINISH_STATE = 666;
    var BS_NEED_MORE = 1;
    var BS_BLOCK_DONE = 2;
    var BS_FINISH_STARTED = 3;
    var BS_FINISH_DONE = 4;
    var OS_CODE = 3;
    function err(strm, errorCode) {
      strm.msg = msg[errorCode];
      return errorCode;
    }
    function rank(f) {
      return (f << 1) - (f > 4 ? 9 : 0);
    }
    function zero(buf) {
      var len = buf.length;
      while (--len >= 0) {
        buf[len] = 0;
      }
    }
    function flush_pending(strm) {
      var s = strm.state;
      var len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) {
        return;
      }
      utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    }
    function flush_block_only(s, last) {
      trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    }
    function put_byte(s, b) {
      s.pending_buf[s.pending++] = b;
    }
    function putShortMSB(s, b) {
      s.pending_buf[s.pending++] = b >>> 8 & 255;
      s.pending_buf[s.pending++] = b & 255;
    }
    function read_buf(strm, buf, start, size) {
      var len = strm.avail_in;
      if (len > size) {
        len = size;
      }
      if (len === 0) {
        return 0;
      }
      strm.avail_in -= len;
      utils.arraySet(buf, strm.input, strm.next_in, len, start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      } else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }
      strm.next_in += len;
      strm.total_in += len;
      return len;
    }
    function longest_match(s, cur_match) {
      var chain_length = s.max_chain_length;
      var scan = s.strstart;
      var match;
      var len;
      var best_len = s.prev_length;
      var nice_match = s.nice_match;
      var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
      var _win = s.window;
      var wmask = s.w_mask;
      var prev = s.prev;
      var strend = s.strstart + MAX_MATCH;
      var scan_end1 = _win[scan + best_len - 1];
      var scan_end = _win[scan + best_len];
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      if (nice_match > s.lookahead) {
        nice_match = s.lookahead;
      }
      do {
        match = cur_match;
        if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
          continue;
        }
        scan += 2;
        match++;
        do {
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    }
    function fill_window(s) {
      var _w_size = s.w_size;
      var p, n, m, more, str;
      do {
        more = s.window_size - s.lookahead - s.strstart;
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
          utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          s.block_start -= _w_size;
          n = s.hash_size;
          p = n;
          do {
            m = s.head[--p];
            s.head[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);
          n = _w_size;
          p = n;
          do {
            m = s.prev[--p];
            s.prev[p] = m >= _w_size ? m - _w_size : 0;
          } while (--n);
          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
          while (s.insert) {
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
    }
    function deflate_stored(s, flush) {
      var max_block_size = 65535;
      if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      }
      for (; ; ) {
        if (s.lookahead <= 1) {
          fill_window(s);
          if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        s.strstart += s.lookahead;
        s.lookahead = 0;
        var max_start = s.block_start + max_block_size;
        if (s.strstart === 0 || s.strstart >= max_start) {
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
        if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.strstart > s.block_start) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_NEED_MORE;
    }
    function deflate_fast(s, flush) {
      var hash_head;
      var bflush;
      for (; ; ) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
            s.match_length--;
            do {
              s.strstart++;
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            } while (--s.match_length !== 0);
            s.strstart++;
          } else {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
          }
        } else {
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function deflate_slow(s, flush) {
      var hash_head;
      var bflush;
      var max_insert;
      for (; ; ) {
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        hash_head = 0;
        if (s.lookahead >= MIN_MATCH) {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;
        if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
          s.match_length = longest_match(s, hash_head);
          if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
            s.match_length = MIN_MATCH - 1;
          }
        }
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;
          if (bflush) {
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
          }
        } else if (s.match_available) {
          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
          if (bflush) {
            flush_block_only(s, false);
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      if (s.match_available) {
        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function deflate_rle(s, flush) {
      var bflush;
      var prev;
      var scan, strend;
      var _win = s.window;
      for (; ; ) {
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break;
          }
        }
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
            } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
        }
        if (s.match_length >= MIN_MATCH) {
          bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function deflate_huff(s, flush) {
      var bflush;
      for (; ; ) {
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }
            break;
          }
        }
        s.match_length = 0;
        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
      return BS_BLOCK_DONE;
    }
    function Config(good_length, max_lazy, nice_length, max_chain, func) {
      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }
    var configuration_table;
    configuration_table = [
      new Config(0, 0, 0, 0, deflate_stored),
      new Config(4, 4, 8, 4, deflate_fast),
      new Config(4, 5, 16, 8, deflate_fast),
      new Config(4, 6, 32, 32, deflate_fast),
      new Config(4, 4, 16, 16, deflate_slow),
      new Config(8, 16, 32, 32, deflate_slow),
      new Config(8, 16, 128, 128, deflate_slow),
      new Config(8, 32, 128, 256, deflate_slow),
      new Config(32, 128, 258, 1024, deflate_slow),
      new Config(32, 258, 258, 4096, deflate_slow)
    ];
    function lm_init(s) {
      s.window_size = 2 * s.w_size;
      zero(s.head);
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;
      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    }
    function DeflateState() {
      this.strm = null;
      this.status = 0;
      this.pending_buf = null;
      this.pending_buf_size = 0;
      this.pending_out = 0;
      this.pending = 0;
      this.wrap = 0;
      this.gzhead = null;
      this.gzindex = 0;
      this.method = Z_DEFLATED;
      this.last_flush = -1;
      this.w_size = 0;
      this.w_bits = 0;
      this.w_mask = 0;
      this.window = null;
      this.window_size = 0;
      this.prev = null;
      this.head = null;
      this.ins_h = 0;
      this.hash_size = 0;
      this.hash_bits = 0;
      this.hash_mask = 0;
      this.hash_shift = 0;
      this.block_start = 0;
      this.match_length = 0;
      this.prev_match = 0;
      this.match_available = 0;
      this.strstart = 0;
      this.match_start = 0;
      this.lookahead = 0;
      this.prev_length = 0;
      this.max_chain_length = 0;
      this.max_lazy_match = 0;
      this.level = 0;
      this.strategy = 0;
      this.good_match = 0;
      this.nice_match = 0;
      this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
      this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
      this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);
      this.l_desc = null;
      this.d_desc = null;
      this.bl_desc = null;
      this.bl_count = new utils.Buf16(MAX_BITS + 1);
      this.heap = new utils.Buf16(2 * L_CODES + 1);
      zero(this.heap);
      this.heap_len = 0;
      this.heap_max = 0;
      this.depth = new utils.Buf16(2 * L_CODES + 1);
      zero(this.depth);
      this.l_buf = 0;
      this.lit_bufsize = 0;
      this.last_lit = 0;
      this.d_buf = 0;
      this.opt_len = 0;
      this.static_len = 0;
      this.matches = 0;
      this.insert = 0;
      this.bi_buf = 0;
      this.bi_valid = 0;
    }
    function deflateResetKeep(strm) {
      var s;
      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR);
      }
      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;
      s = strm.state;
      s.pending = 0;
      s.pending_out = 0;
      if (s.wrap < 0) {
        s.wrap = -s.wrap;
      }
      s.status = s.wrap ? INIT_STATE : BUSY_STATE;
      strm.adler = s.wrap === 2 ? 0 : 1;
      s.last_flush = Z_NO_FLUSH;
      trees._tr_init(s);
      return Z_OK;
    }
    function deflateReset(strm) {
      var ret = deflateResetKeep(strm);
      if (ret === Z_OK) {
        lm_init(strm.state);
      }
      return ret;
    }
    function deflateSetHeader(strm, head) {
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      if (strm.state.wrap !== 2) {
        return Z_STREAM_ERROR;
      }
      strm.state.gzhead = head;
      return Z_OK;
    }
    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      var wrap = 1;
      if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else if (windowBits > 15) {
        wrap = 2;
        windowBits -= 16;
      }
      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR);
      }
      if (windowBits === 8) {
        windowBits = 9;
      }
      var s = new DeflateState();
      strm.state = s;
      s.strm = strm;
      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;
      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      s.window = new utils.Buf8(s.w_size * 2);
      s.head = new utils.Buf16(s.hash_size);
      s.prev = new utils.Buf16(s.w_size);
      s.lit_bufsize = 1 << memLevel + 6;
      s.pending_buf_size = s.lit_bufsize * 4;
      s.pending_buf = new utils.Buf8(s.pending_buf_size);
      s.d_buf = 1 * s.lit_bufsize;
      s.l_buf = (1 + 2) * s.lit_bufsize;
      s.level = level;
      s.strategy = strategy;
      s.method = method;
      return deflateReset(strm);
    }
    function deflateInit(strm, level) {
      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    }
    function deflate(strm, flush) {
      var old_flush, s;
      var beg, val;
      if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }
      s = strm.state;
      if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
        return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }
      s.strm = strm;
      old_flush = s.last_flush;
      s.last_flush = flush;
      if (s.status === INIT_STATE) {
        if (s.wrap === 2) {
          strm.adler = 0;
          put_byte(s, 31);
          put_byte(s, 139);
          put_byte(s, 8);
          if (!s.gzhead) {
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
          } else {
            put_byte(
              s,
              (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)
            );
            put_byte(s, s.gzhead.time & 255);
            put_byte(s, s.gzhead.time >> 8 & 255);
            put_byte(s, s.gzhead.time >> 16 & 255);
            put_byte(s, s.gzhead.time >> 24 & 255);
            put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            put_byte(s, s.gzhead.os & 255);
            if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 255);
              put_byte(s, s.gzhead.extra.length >> 8 & 255);
            }
            if (s.gzhead.hcrc) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
            }
            s.gzindex = 0;
            s.status = EXTRA_STATE;
          }
        } else {
          var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
          var level_flags = -1;
          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= level_flags << 6;
          if (s.strstart !== 0) {
            header |= PRESET_DICT;
          }
          header += 31 - header % 31;
          s.status = BUSY_STATE;
          putShortMSB(s, header);
          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 65535);
          }
          strm.adler = 1;
        }
      }
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra) {
          beg = s.pending;
          while (s.gzindex < (s.gzhead.extra.length & 65535)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                break;
              }
            }
            put_byte(s, s.gzhead.extra[s.gzindex] & 255);
            s.gzindex++;
          }
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        } else {
          s.status = NAME_STATE;
        }
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name) {
          beg = s.pending;
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        } else {
          s.status = COMMENT_STATE;
        }
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment) {
          beg = s.pending;
          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.status = HCRC_STATE;
          }
        } else {
          s.status = HCRC_STATE;
        }
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }
          if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 255);
            put_byte(s, strm.adler >> 8 & 255);
            strm.adler = 0;
            s.status = BUSY_STATE;
          }
        } else {
          s.status = BUSY_STATE;
        }
      }
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          s.last_flush = -1;
          return Z_OK;
        }
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      }
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      }
      if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
        var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
          }
          return Z_OK;
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            trees._tr_align(s);
          } else if (flush !== Z_BLOCK) {
            trees._tr_stored_block(s, 0, 0, false);
            if (flush === Z_FULL_FLUSH) {
              zero(s.head);
              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            return Z_OK;
          }
        }
      }
      if (flush !== Z_FINISH) {
        return Z_OK;
      }
      if (s.wrap <= 0) {
        return Z_STREAM_END;
      }
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 255);
        put_byte(s, strm.adler >> 8 & 255);
        put_byte(s, strm.adler >> 16 & 255);
        put_byte(s, strm.adler >> 24 & 255);
        put_byte(s, strm.total_in & 255);
        put_byte(s, strm.total_in >> 8 & 255);
        put_byte(s, strm.total_in >> 16 & 255);
        put_byte(s, strm.total_in >> 24 & 255);
      } else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 65535);
      }
      flush_pending(strm);
      if (s.wrap > 0) {
        s.wrap = -s.wrap;
      }
      return s.pending !== 0 ? Z_OK : Z_STREAM_END;
    }
    function deflateEnd(strm) {
      var status;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      status = strm.state.status;
      if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
        return err(strm, Z_STREAM_ERROR);
      }
      strm.state = null;
      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    }
    function deflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;
      var s;
      var str, n;
      var wrap;
      var avail;
      var next;
      var input;
      var tmpDict;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      s = strm.state;
      wrap = s.wrap;
      if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
        return Z_STREAM_ERROR;
      }
      if (wrap === 1) {
        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
      }
      s.wrap = 0;
      if (dictLength >= s.w_size) {
        if (wrap === 0) {
          zero(s.head);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        tmpDict = new utils.Buf8(s.w_size);
        utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      avail = strm.avail_in;
      next = strm.next_in;
      input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        str = s.strstart;
        n = s.lookahead - (MIN_MATCH - 1);
        do {
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
          s.prev[str & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK;
    }
    exports2.deflateInit = deflateInit;
    exports2.deflateInit2 = deflateInit2;
    exports2.deflateReset = deflateReset;
    exports2.deflateResetKeep = deflateResetKeep;
    exports2.deflateSetHeader = deflateSetHeader;
    exports2.deflate = deflate;
    exports2.deflateEnd = deflateEnd;
    exports2.deflateSetDictionary = deflateSetDictionary;
    exports2.deflateInfo = "pako deflate (from Nodeca project)";
  }
});

// node_modules/pako/lib/zlib/inffast.js
var require_inffast = __commonJS({
  "node_modules/pako/lib/zlib/inffast.js"(exports2, module2) {
    "use strict";
    var BAD = 30;
    var TYPE = 12;
    module2.exports = function inflate_fast(strm, start) {
      var state;
      var _in;
      var last;
      var _out;
      var beg;
      var end;
      var dmax;
      var wsize;
      var whave;
      var wnext;
      var s_window;
      var hold;
      var bits;
      var lcode;
      var dcode;
      var lmask;
      var dmask;
      var here;
      var op;
      var len;
      var dist;
      var from;
      var from_source;
      var input, output;
      state = strm.state;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
      dmax = state.dmax;
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;
      top:
        do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }
          here = lcode[hold & lmask];
          dolen:
            for (; ; ) {
              op = here >>> 24;
              hold >>>= op;
              bits -= op;
              op = here >>> 16 & 255;
              if (op === 0) {
                output[_out++] = here & 65535;
              } else if (op & 16) {
                len = here & 65535;
                op &= 15;
                if (op) {
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                  len += hold & (1 << op) - 1;
                  hold >>>= op;
                  bits -= op;
                }
                if (bits < 15) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  hold += input[_in++] << bits;
                  bits += 8;
                }
                here = dcode[hold & dmask];
                dodist:
                  for (; ; ) {
                    op = here >>> 24;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 255;
                    if (op & 16) {
                      dist = here & 65535;
                      op &= 15;
                      if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }
                      }
                      dist += hold & (1 << op) - 1;
                      if (dist > dmax) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD;
                        break top;
                      }
                      hold >>>= op;
                      bits -= op;
                      op = _out - beg;
                      if (dist > op) {
                        op = dist - op;
                        if (op > whave) {
                          if (state.sane) {
                            strm.msg = "invalid distance too far back";
                            state.mode = BAD;
                            break top;
                          }
                        }
                        from = 0;
                        from_source = s_window;
                        if (wnext === 0) {
                          from += wsize - op;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        } else if (wnext < op) {
                          from += wsize + wnext - op;
                          op -= wnext;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = 0;
                            if (wnext < len) {
                              op = wnext;
                              len -= op;
                              do {
                                output[_out++] = s_window[from++];
                              } while (--op);
                              from = _out - dist;
                              from_source = output;
                            }
                          }
                        } else {
                          from += wnext - op;
                          if (op < len) {
                            len -= op;
                            do {
                              output[_out++] = s_window[from++];
                            } while (--op);
                            from = _out - dist;
                            from_source = output;
                          }
                        }
                        while (len > 2) {
                          output[_out++] = from_source[from++];
                          output[_out++] = from_source[from++];
                          output[_out++] = from_source[from++];
                          len -= 3;
                        }
                        if (len) {
                          output[_out++] = from_source[from++];
                          if (len > 1) {
                            output[_out++] = from_source[from++];
                          }
                        }
                      } else {
                        from = _out - dist;
                        do {
                          output[_out++] = output[from++];
                          output[_out++] = output[from++];
                          output[_out++] = output[from++];
                          len -= 3;
                        } while (len > 2);
                        if (len) {
                          output[_out++] = output[from++];
                          if (len > 1) {
                            output[_out++] = output[from++];
                          }
                        }
                      }
                    } else if ((op & 64) === 0) {
                      here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                      continue dodist;
                    } else {
                      strm.msg = "invalid distance code";
                      state.mode = BAD;
                      break top;
                    }
                    break;
                  }
              } else if ((op & 64) === 0) {
                here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
                continue dolen;
              } else if (op & 32) {
                state.mode = TYPE;
                break top;
              } else {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break top;
              }
              break;
            }
        } while (_in < last && _out < end);
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
      strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
      state.hold = hold;
      state.bits = bits;
      return;
    };
  }
});

// node_modules/pako/lib/zlib/inftrees.js
var require_inftrees = __commonJS({
  "node_modules/pako/lib/zlib/inftrees.js"(exports2, module2) {
    "use strict";
    var utils = require_common();
    var MAXBITS = 15;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var lbase = [
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      13,
      15,
      17,
      19,
      23,
      27,
      31,
      35,
      43,
      51,
      59,
      67,
      83,
      99,
      115,
      131,
      163,
      195,
      227,
      258,
      0,
      0
    ];
    var lext = [
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      16,
      17,
      17,
      17,
      17,
      18,
      18,
      18,
      18,
      19,
      19,
      19,
      19,
      20,
      20,
      20,
      20,
      21,
      21,
      21,
      21,
      16,
      72,
      78
    ];
    var dbase = [
      1,
      2,
      3,
      4,
      5,
      7,
      9,
      13,
      17,
      25,
      33,
      49,
      65,
      97,
      129,
      193,
      257,
      385,
      513,
      769,
      1025,
      1537,
      2049,
      3073,
      4097,
      6145,
      8193,
      12289,
      16385,
      24577,
      0,
      0
    ];
    var dext = [
      16,
      16,
      16,
      16,
      17,
      17,
      18,
      18,
      19,
      19,
      20,
      20,
      21,
      21,
      22,
      22,
      23,
      23,
      24,
      24,
      25,
      25,
      26,
      26,
      27,
      27,
      28,
      28,
      29,
      29,
      64,
      64
    ];
    module2.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
      var bits = opts.bits;
      var len = 0;
      var sym = 0;
      var min = 0, max = 0;
      var root = 0;
      var curr = 0;
      var drop = 0;
      var left = 0;
      var used = 0;
      var huff = 0;
      var incr;
      var fill;
      var low;
      var mask;
      var next;
      var base = null;
      var base_index = 0;
      var end;
      var count = new utils.Buf16(MAXBITS + 1);
      var offs = new utils.Buf16(MAXBITS + 1);
      var extra = null;
      var extra_index = 0;
      var here_bits, here_op, here_val;
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) {
          break;
        }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        table[table_index++] = 1 << 24 | 64 << 16 | 0;
        opts.bits = 1;
        return 0;
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) {
          break;
        }
      }
      if (root < min) {
        root = min;
      }
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }
      }
      if (left > 0 && (type === CODES || max !== 1)) {
        return -1;
      }
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }
      if (type === CODES) {
        base = extra = work;
        end = 19;
      } else if (type === LENS) {
        base = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;
      } else {
        base = dbase;
        extra = dext;
        end = -1;
      }
      huff = 0;
      sym = 0;
      len = min;
      next = table_index;
      curr = root;
      drop = 0;
      low = -1;
      used = 1 << root;
      mask = used - 1;
      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
        return 1;
      }
      for (; ; ) {
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        } else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        } else {
          here_op = 32 + 64;
          here_val = 0;
        }
        incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill;
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        } while (fill !== 0);
        incr = 1 << len - 1;
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }
        sym++;
        if (--count[len] === 0) {
          if (len === max) {
            break;
          }
          len = lens[lens_index + work[sym]];
        }
        if (len > root && (huff & mask) !== low) {
          if (drop === 0) {
            drop = root;
          }
          next += min;
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) {
              break;
            }
            curr++;
            left <<= 1;
          }
          used += 1 << curr;
          if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
            return 1;
          }
          low = huff & mask;
          table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
      }
      if (huff !== 0) {
        table[next + huff] = len - drop << 24 | 64 << 16 | 0;
      }
      opts.bits = root;
      return 0;
    };
  }
});

// node_modules/pako/lib/zlib/inflate.js
var require_inflate = __commonJS({
  "node_modules/pako/lib/zlib/inflate.js"(exports2) {
    "use strict";
    var utils = require_common();
    var adler32 = require_adler32();
    var crc32 = require_crc32();
    var inflate_fast = require_inffast();
    var inflate_table = require_inftrees();
    var CODES = 0;
    var LENS = 1;
    var DISTS = 2;
    var Z_FINISH = 4;
    var Z_BLOCK = 5;
    var Z_TREES = 6;
    var Z_OK = 0;
    var Z_STREAM_END = 1;
    var Z_NEED_DICT = 2;
    var Z_STREAM_ERROR = -2;
    var Z_DATA_ERROR = -3;
    var Z_MEM_ERROR = -4;
    var Z_BUF_ERROR = -5;
    var Z_DEFLATED = 8;
    var HEAD = 1;
    var FLAGS = 2;
    var TIME = 3;
    var OS = 4;
    var EXLEN = 5;
    var EXTRA = 6;
    var NAME = 7;
    var COMMENT = 8;
    var HCRC = 9;
    var DICTID = 10;
    var DICT = 11;
    var TYPE = 12;
    var TYPEDO = 13;
    var STORED = 14;
    var COPY_ = 15;
    var COPY = 16;
    var TABLE = 17;
    var LENLENS = 18;
    var CODELENS = 19;
    var LEN_ = 20;
    var LEN = 21;
    var LENEXT = 22;
    var DIST = 23;
    var DISTEXT = 24;
    var MATCH = 25;
    var LIT = 26;
    var CHECK = 27;
    var LENGTH = 28;
    var DONE = 29;
    var BAD = 30;
    var MEM = 31;
    var SYNC = 32;
    var ENOUGH_LENS = 852;
    var ENOUGH_DISTS = 592;
    var MAX_WBITS = 15;
    var DEF_WBITS = MAX_WBITS;
    function zswap32(q) {
      return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
    }
    function InflateState() {
      this.mode = 0;
      this.last = false;
      this.wrap = 0;
      this.havedict = false;
      this.flags = 0;
      this.dmax = 0;
      this.check = 0;
      this.total = 0;
      this.head = null;
      this.wbits = 0;
      this.wsize = 0;
      this.whave = 0;
      this.wnext = 0;
      this.window = null;
      this.hold = 0;
      this.bits = 0;
      this.length = 0;
      this.offset = 0;
      this.extra = 0;
      this.lencode = null;
      this.distcode = null;
      this.lenbits = 0;
      this.distbits = 0;
      this.ncode = 0;
      this.nlen = 0;
      this.ndist = 0;
      this.have = 0;
      this.next = null;
      this.lens = new utils.Buf16(320);
      this.work = new utils.Buf16(288);
      this.lendyn = null;
      this.distdyn = null;
      this.sane = 0;
      this.back = 0;
      this.was = 0;
    }
    function inflateResetKeep(strm) {
      var state;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = "";
      if (state.wrap) {
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null;
      state.hold = 0;
      state.bits = 0;
      state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
      state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
      state.sane = 1;
      state.back = -1;
      return Z_OK;
    }
    function inflateReset(strm) {
      var state;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);
    }
    function inflateReset2(strm, windowBits) {
      var wrap;
      var state;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      } else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    }
    function inflateInit2(strm, windowBits) {
      var ret;
      var state;
      if (!strm) {
        return Z_STREAM_ERROR;
      }
      state = new InflateState();
      strm.state = state;
      state.window = null;
      ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null;
      }
      return ret;
    }
    function inflateInit(strm) {
      return inflateInit2(strm, DEF_WBITS);
    }
    var virgin = true;
    var lenfix;
    var distfix;
    function fixedtables(state) {
      if (virgin) {
        var sym;
        lenfix = new utils.Buf32(512);
        distfix = new utils.Buf32(32);
        sym = 0;
        while (sym < 144) {
          state.lens[sym++] = 8;
        }
        while (sym < 256) {
          state.lens[sym++] = 9;
        }
        while (sym < 280) {
          state.lens[sym++] = 7;
        }
        while (sym < 288) {
          state.lens[sym++] = 8;
        }
        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
        sym = 0;
        while (sym < 32) {
          state.lens[sym++] = 5;
        }
        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
        virgin = false;
      }
      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    }
    function updatewindow(strm, src, end, copy) {
      var dist;
      var state = strm.state;
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new utils.Buf8(state.wsize);
      }
      if (copy >= state.wsize) {
        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
        state.wnext = 0;
        state.whave = state.wsize;
      } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        utils.arraySet(state.window, src, end - copy, dist, state.wnext);
        copy -= dist;
        if (copy) {
          utils.arraySet(state.window, src, end - copy, copy, 0);
          state.wnext = copy;
          state.whave = state.wsize;
        } else {
          state.wnext += dist;
          if (state.wnext === state.wsize) {
            state.wnext = 0;
          }
          if (state.whave < state.wsize) {
            state.whave += dist;
          }
        }
      }
      return 0;
    }
    function inflate(strm, flush) {
      var state;
      var input, output;
      var next;
      var put;
      var have, left;
      var hold;
      var bits;
      var _in, _out;
      var copy;
      var from;
      var from_source;
      var here = 0;
      var here_bits, here_op, here_val;
      var last_bits, last_op, last_val;
      var len;
      var ret;
      var hbuf = new utils.Buf8(4);
      var opts;
      var n;
      var order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (state.mode === TYPE) {
        state.mode = TYPEDO;
      }
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      _in = have;
      _out = left;
      ret = Z_OK;
      inf_leave:
        for (; ; ) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              }
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.wrap & 2 && hold === 35615) {
                state.check = 0;
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
                hold = 0;
                bits = 0;
                state.mode = FLAGS;
                break;
              }
              state.flags = 0;
              if (state.head) {
                state.head.done = false;
              }
              if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state.mode = BAD;
                break;
              }
              if ((hold & 15) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              hold >>>= 4;
              bits -= 4;
              len = (hold & 15) + 8;
              if (state.wbits === 0) {
                state.wbits = len;
              } else if (len > state.wbits) {
                strm.msg = "invalid window size";
                state.mode = BAD;
                break;
              }
              state.dmax = 1 << len;
              strm.adler = state.check = 1;
              state.mode = hold & 512 ? DICTID : TYPE;
              hold = 0;
              bits = 0;
              break;
            case FLAGS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.flags = hold;
              if ((state.flags & 255) !== Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              if (state.flags & 57344) {
                strm.msg = "unknown header flags set";
                state.mode = BAD;
                break;
              }
              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }
              if (state.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = TIME;
            case TIME:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.head) {
                state.head.time = hold;
              }
              if (state.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                hbuf[2] = hold >>> 16 & 255;
                hbuf[3] = hold >>> 24 & 255;
                state.check = crc32(state.check, hbuf, 4, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = OS;
            case OS:
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (state.head) {
                state.head.xflags = hold & 255;
                state.head.os = hold >> 8;
              }
              if (state.flags & 512) {
                hbuf[0] = hold & 255;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = EXLEN;
            case EXLEN:
              if (state.flags & 1024) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.length = hold;
                if (state.head) {
                  state.head.extra_len = hold;
                }
                if (state.flags & 512) {
                  hbuf[0] = hold & 255;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
              } else if (state.head) {
                state.head.extra = null;
              }
              state.mode = EXTRA;
            case EXTRA:
              if (state.flags & 1024) {
                copy = state.length;
                if (copy > have) {
                  copy = have;
                }
                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;
                    if (!state.head.extra) {
                      state.head.extra = new Array(state.head.extra_len);
                    }
                    utils.arraySet(
                      state.head.extra,
                      input,
                      next,
                      copy,
                      len
                    );
                  }
                  if (state.flags & 512) {
                    state.check = crc32(state.check, input, copy, next);
                  }
                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }
                if (state.length) {
                  break inf_leave;
                }
              }
              state.length = 0;
              state.mode = NAME;
            case NAME:
              if (state.flags & 2048) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (state.flags & 512) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }
              state.length = 0;
              state.mode = COMMENT;
            case COMMENT:
              if (state.flags & 4096) {
                if (have === 0) {
                  break inf_leave;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (state.flags & 512) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }
              state.mode = HCRC;
            case HCRC:
              if (state.flags & 512) {
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (hold !== (state.check & 65535)) {
                  strm.msg = "header crc mismatch";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }
              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;
            case DICTID:
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              strm.adler = state.check = zswap32(hold);
              hold = 0;
              bits = 0;
              state.mode = DICT;
            case DICT:
              if (state.havedict === 0) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                return Z_NEED_DICT;
              }
              strm.adler = state.check = 1;
              state.mode = TYPE;
            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }
            case TYPEDO:
              if (state.last) {
                hold >>>= bits & 7;
                bits -= bits & 7;
                state.mode = CHECK;
                break;
              }
              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.last = hold & 1;
              hold >>>= 1;
              bits -= 1;
              switch (hold & 3) {
                case 0:
                  state.mode = STORED;
                  break;
                case 1:
                  fixedtables(state);
                  state.mode = LEN_;
                  if (flush === Z_TREES) {
                    hold >>>= 2;
                    bits -= 2;
                    break inf_leave;
                  }
                  break;
                case 2:
                  state.mode = TABLE;
                  break;
                case 3:
                  strm.msg = "invalid block type";
                  state.mode = BAD;
              }
              hold >>>= 2;
              bits -= 2;
              break;
            case STORED:
              hold >>>= bits & 7;
              bits -= bits & 7;
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
                strm.msg = "invalid stored block lengths";
                state.mode = BAD;
                break;
              }
              state.length = hold & 65535;
              hold = 0;
              bits = 0;
              state.mode = COPY_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case COPY_:
              state.mode = COPY;
            case COPY:
              copy = state.length;
              if (copy) {
                if (copy > have) {
                  copy = have;
                }
                if (copy > left) {
                  copy = left;
                }
                if (copy === 0) {
                  break inf_leave;
                }
                utils.arraySet(output, input, next, copy, put);
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              }
              state.mode = TYPE;
              break;
            case TABLE:
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              state.nlen = (hold & 31) + 257;
              hold >>>= 5;
              bits -= 5;
              state.ndist = (hold & 31) + 1;
              hold >>>= 5;
              bits -= 5;
              state.ncode = (hold & 15) + 4;
              hold >>>= 4;
              bits -= 4;
              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = LENLENS;
            case LENLENS:
              while (state.have < state.ncode) {
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.lens[order[state.have++]] = hold & 7;
                hold >>>= 3;
                bits -= 3;
              }
              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              }
              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = { bits: state.lenbits };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid code lengths set";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = CODELENS;
            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (; ; ) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (here_val < 16) {
                  hold >>>= here_bits;
                  bits -= here_bits;
                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    n = here_bits + 2;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    if (state.have === 0) {
                      strm.msg = "invalid bit length repeat";
                      state.mode = BAD;
                      break;
                    }
                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 3);
                    hold >>>= 2;
                    bits -= 2;
                  } else if (here_val === 17) {
                    n = here_bits + 3;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len = 0;
                    copy = 3 + (hold & 7);
                    hold >>>= 3;
                    bits -= 3;
                  } else {
                    n = here_bits + 7;
                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }
                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    }
                    hold >>>= here_bits;
                    bits -= here_bits;
                    len = 0;
                    copy = 11 + (hold & 127);
                    hold >>>= 7;
                    bits -= 7;
                  }
                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = "invalid bit length repeat";
                    state.mode = BAD;
                    break;
                  }
                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              if (state.mode === BAD) {
                break;
              }
              if (state.lens[256] === 0) {
                strm.msg = "invalid code -- missing end-of-block";
                state.mode = BAD;
                break;
              }
              state.lenbits = 9;
              opts = { bits: state.lenbits };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;
              if (ret) {
                strm.msg = "invalid literal/lengths set";
                state.mode = BAD;
                break;
              }
              state.distbits = 6;
              state.distcode = state.distdyn;
              opts = { bits: state.distbits };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
              state.distbits = opts.bits;
              if (ret) {
                strm.msg = "invalid distances set";
                state.mode = BAD;
                break;
              }
              state.mode = LEN_;
              if (flush === Z_TREES) {
                break inf_leave;
              }
            case LEN_:
              state.mode = LEN;
            case LEN:
              if (have >= 6 && left >= 258) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                inflate_fast(strm, _out);
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                if (state.mode === TYPE) {
                  state.back = -1;
                }
                break;
              }
              state.back = 0;
              for (; ; ) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if (here_op && (here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state.back += here_bits;
              state.length = here_val;
              if (here_op === 0) {
                state.mode = LIT;
                break;
              }
              if (here_op & 32) {
                state.back = -1;
                state.mode = TYPE;
                break;
              }
              if (here_op & 64) {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break;
              }
              state.extra = here_op & 15;
              state.mode = LENEXT;
            case LENEXT:
              if (state.extra) {
                n = state.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.length += hold & (1 << state.extra) - 1;
                hold >>>= state.extra;
                bits -= state.extra;
                state.back += state.extra;
              }
              state.was = state.length;
              state.mode = DIST;
            case DIST:
              for (; ; ) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                here_bits = here >>> 24;
                here_op = here >>> 16 & 255;
                here_val = here & 65535;
                if (here_bits <= bits) {
                  break;
                }
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              if ((here_op & 240) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for (; ; ) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 255;
                  here_val = here & 65535;
                  if (last_bits + here_bits <= bits) {
                    break;
                  }
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= last_bits;
                bits -= last_bits;
                state.back += last_bits;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              state.back += here_bits;
              if (here_op & 64) {
                strm.msg = "invalid distance code";
                state.mode = BAD;
                break;
              }
              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;
            case DISTEXT:
              if (state.extra) {
                n = state.extra;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                state.offset += hold & (1 << state.extra) - 1;
                hold >>>= state.extra;
                bits -= state.extra;
                state.back += state.extra;
              }
              if (state.offset > state.dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
              state.mode = MATCH;
            case MATCH:
              if (left === 0) {
                break inf_leave;
              }
              copy = _out - left;
              if (state.offset > copy) {
                copy = state.offset - copy;
                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD;
                    break;
                  }
                }
                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }
                if (copy > state.length) {
                  copy = state.length;
                }
                from_source = state.window;
              } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }
              if (copy > left) {
                copy = left;
              }
              left -= copy;
              state.length -= copy;
              do {
                output[put++] = from_source[from++];
              } while (--copy);
              if (state.length === 0) {
                state.mode = LEN;
              }
              break;
            case LIT:
              if (left === 0) {
                break inf_leave;
              }
              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;
            case CHECK:
              if (state.wrap) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold |= input[next++] << bits;
                  bits += 8;
                }
                _out -= left;
                strm.total_out += _out;
                state.total += _out;
                if (_out) {
                  strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }
                _out = left;
                if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                  strm.msg = "incorrect data check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = LENGTH;
            case LENGTH:
              if (state.wrap && state.flags) {
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                if (hold !== (state.total & 4294967295)) {
                  strm.msg = "incorrect length check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = DONE;
            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;
            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;
            case MEM:
              return Z_MEM_ERROR;
            case SYNC:
            default:
              return Z_STREAM_ERROR;
          }
        }
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap && _out) {
        strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    }
    function inflateEnd(strm) {
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      var state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK;
    }
    function inflateGetHeader(strm, head) {
      var state;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if ((state.wrap & 2) === 0) {
        return Z_STREAM_ERROR;
      }
      state.head = head;
      head.done = false;
      return Z_OK;
    }
    function inflateSetDictionary(strm, dictionary) {
      var dictLength = dictionary.length;
      var state;
      var dictid;
      var ret;
      if (!strm || !strm.state) {
        return Z_STREAM_ERROR;
      }
      state = strm.state;
      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR;
      }
      if (state.mode === DICT) {
        dictid = 1;
        dictid = adler32(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR;
        }
      }
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      state.havedict = 1;
      return Z_OK;
    }
    exports2.inflateReset = inflateReset;
    exports2.inflateReset2 = inflateReset2;
    exports2.inflateResetKeep = inflateResetKeep;
    exports2.inflateInit = inflateInit;
    exports2.inflateInit2 = inflateInit2;
    exports2.inflate = inflate;
    exports2.inflateEnd = inflateEnd;
    exports2.inflateGetHeader = inflateGetHeader;
    exports2.inflateSetDictionary = inflateSetDictionary;
    exports2.inflateInfo = "pako inflate (from Nodeca project)";
  }
});

// node_modules/pako/lib/zlib/constants.js
var require_constants = __commonJS({
  "node_modules/pako/lib/zlib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_BUF_ERROR: -5,
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      Z_BINARY: 0,
      Z_TEXT: 1,
      Z_UNKNOWN: 2,
      Z_DEFLATED: 8
    };
  }
});

// node_modules/browserify-zlib/lib/binding.js
var require_binding = __commonJS({
  "node_modules/browserify-zlib/lib/binding.js"(exports2) {
    "use strict";
    var assert = require_assert();
    var Zstream = require_zstream();
    var zlib_deflate = require_deflate();
    var zlib_inflate = require_inflate();
    var constants = require_constants();
    for (key in constants) {
      exports2[key] = constants[key];
    }
    var key;
    exports2.NONE = 0;
    exports2.DEFLATE = 1;
    exports2.INFLATE = 2;
    exports2.GZIP = 3;
    exports2.GUNZIP = 4;
    exports2.DEFLATERAW = 5;
    exports2.INFLATERAW = 6;
    exports2.UNZIP = 7;
    var GZIP_HEADER_ID1 = 31;
    var GZIP_HEADER_ID2 = 139;
    function Zlib(mode) {
      if (typeof mode !== "number" || mode < exports2.DEFLATE || mode > exports2.UNZIP) {
        throw new TypeError("Bad argument");
      }
      this.dictionary = null;
      this.err = 0;
      this.flush = 0;
      this.init_done = false;
      this.level = 0;
      this.memLevel = 0;
      this.mode = mode;
      this.strategy = 0;
      this.windowBits = 0;
      this.write_in_progress = false;
      this.pending_close = false;
      this.gzip_id_bytes_read = 0;
    }
    Zlib.prototype.close = function() {
      if (this.write_in_progress) {
        this.pending_close = true;
        return;
      }
      this.pending_close = false;
      assert(this.init_done, "close before init");
      assert(this.mode <= exports2.UNZIP);
      if (this.mode === exports2.DEFLATE || this.mode === exports2.GZIP || this.mode === exports2.DEFLATERAW) {
        zlib_deflate.deflateEnd(this.strm);
      } else if (this.mode === exports2.INFLATE || this.mode === exports2.GUNZIP || this.mode === exports2.INFLATERAW || this.mode === exports2.UNZIP) {
        zlib_inflate.inflateEnd(this.strm);
      }
      this.mode = exports2.NONE;
      this.dictionary = null;
    };
    Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
      return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
    };
    Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
      return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
    };
    Zlib.prototype._write = function(async, flush, input, in_off, in_len, out, out_off, out_len) {
      assert.equal(arguments.length, 8);
      assert(this.init_done, "write before init");
      assert(this.mode !== exports2.NONE, "already finalized");
      assert.equal(false, this.write_in_progress, "write already in progress");
      assert.equal(false, this.pending_close, "close is pending");
      this.write_in_progress = true;
      assert.equal(false, flush === void 0, "must provide flush value");
      this.write_in_progress = true;
      if (flush !== exports2.Z_NO_FLUSH && flush !== exports2.Z_PARTIAL_FLUSH && flush !== exports2.Z_SYNC_FLUSH && flush !== exports2.Z_FULL_FLUSH && flush !== exports2.Z_FINISH && flush !== exports2.Z_BLOCK) {
        throw new Error("Invalid flush value");
      }
      if (input == null) {
        input = Buffer.alloc(0);
        in_len = 0;
        in_off = 0;
      }
      this.strm.avail_in = in_len;
      this.strm.input = input;
      this.strm.next_in = in_off;
      this.strm.avail_out = out_len;
      this.strm.output = out;
      this.strm.next_out = out_off;
      this.flush = flush;
      if (!async) {
        this._process();
        if (this._checkError()) {
          return this._afterSync();
        }
        return;
      }
      var self2 = this;
      process.nextTick(function() {
        self2._process();
        self2._after();
      });
      return this;
    };
    Zlib.prototype._afterSync = function() {
      var avail_out = this.strm.avail_out;
      var avail_in = this.strm.avail_in;
      this.write_in_progress = false;
      return [avail_in, avail_out];
    };
    Zlib.prototype._process = function() {
      var next_expected_header_byte = null;
      switch (this.mode) {
        case exports2.DEFLATE:
        case exports2.GZIP:
        case exports2.DEFLATERAW:
          this.err = zlib_deflate.deflate(this.strm, this.flush);
          break;
        case exports2.UNZIP:
          if (this.strm.avail_in > 0) {
            next_expected_header_byte = this.strm.next_in;
          }
          switch (this.gzip_id_bytes_read) {
            case 0:
              if (next_expected_header_byte === null) {
                break;
              }
              if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
                this.gzip_id_bytes_read = 1;
                next_expected_header_byte++;
                if (this.strm.avail_in === 1) {
                  break;
                }
              } else {
                this.mode = exports2.INFLATE;
                break;
              }
            case 1:
              if (next_expected_header_byte === null) {
                break;
              }
              if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
                this.gzip_id_bytes_read = 2;
                this.mode = exports2.GUNZIP;
              } else {
                this.mode = exports2.INFLATE;
              }
              break;
            default:
              throw new Error("invalid number of gzip magic number bytes read");
          }
        case exports2.INFLATE:
        case exports2.GUNZIP:
        case exports2.INFLATERAW:
          this.err = zlib_inflate.inflate(
            this.strm,
            this.flush
          );
          if (this.err === exports2.Z_NEED_DICT && this.dictionary) {
            this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
            if (this.err === exports2.Z_OK) {
              this.err = zlib_inflate.inflate(this.strm, this.flush);
            } else if (this.err === exports2.Z_DATA_ERROR) {
              this.err = exports2.Z_NEED_DICT;
            }
          }
          while (this.strm.avail_in > 0 && this.mode === exports2.GUNZIP && this.err === exports2.Z_STREAM_END && this.strm.next_in[0] !== 0) {
            this.reset();
            this.err = zlib_inflate.inflate(this.strm, this.flush);
          }
          break;
        default:
          throw new Error("Unknown mode " + this.mode);
      }
    };
    Zlib.prototype._checkError = function() {
      switch (this.err) {
        case exports2.Z_OK:
        case exports2.Z_BUF_ERROR:
          if (this.strm.avail_out !== 0 && this.flush === exports2.Z_FINISH) {
            this._error("unexpected end of file");
            return false;
          }
          break;
        case exports2.Z_STREAM_END:
          break;
        case exports2.Z_NEED_DICT:
          if (this.dictionary == null) {
            this._error("Missing dictionary");
          } else {
            this._error("Bad dictionary");
          }
          return false;
        default:
          this._error("Zlib error");
          return false;
      }
      return true;
    };
    Zlib.prototype._after = function() {
      if (!this._checkError()) {
        return;
      }
      var avail_out = this.strm.avail_out;
      var avail_in = this.strm.avail_in;
      this.write_in_progress = false;
      this.callback(avail_in, avail_out);
      if (this.pending_close) {
        this.close();
      }
    };
    Zlib.prototype._error = function(message) {
      if (this.strm.msg) {
        message = this.strm.msg;
      }
      this.onerror(
        message,
        this.err
      );
      this.write_in_progress = false;
      if (this.pending_close) {
        this.close();
      }
    };
    Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
      assert(arguments.length === 4 || arguments.length === 5, "init(windowBits, level, memLevel, strategy, [dictionary])");
      assert(windowBits >= 8 && windowBits <= 15, "invalid windowBits");
      assert(level >= -1 && level <= 9, "invalid compression level");
      assert(memLevel >= 1 && memLevel <= 9, "invalid memlevel");
      assert(strategy === exports2.Z_FILTERED || strategy === exports2.Z_HUFFMAN_ONLY || strategy === exports2.Z_RLE || strategy === exports2.Z_FIXED || strategy === exports2.Z_DEFAULT_STRATEGY, "invalid strategy");
      this._init(level, windowBits, memLevel, strategy, dictionary);
      this._setDictionary();
    };
    Zlib.prototype.params = function() {
      throw new Error("deflateParams Not supported");
    };
    Zlib.prototype.reset = function() {
      this._reset();
      this._setDictionary();
    };
    Zlib.prototype._init = function(level, windowBits, memLevel, strategy, dictionary) {
      this.level = level;
      this.windowBits = windowBits;
      this.memLevel = memLevel;
      this.strategy = strategy;
      this.flush = exports2.Z_NO_FLUSH;
      this.err = exports2.Z_OK;
      if (this.mode === exports2.GZIP || this.mode === exports2.GUNZIP) {
        this.windowBits += 16;
      }
      if (this.mode === exports2.UNZIP) {
        this.windowBits += 32;
      }
      if (this.mode === exports2.DEFLATERAW || this.mode === exports2.INFLATERAW) {
        this.windowBits = -1 * this.windowBits;
      }
      this.strm = new Zstream();
      switch (this.mode) {
        case exports2.DEFLATE:
        case exports2.GZIP:
        case exports2.DEFLATERAW:
          this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports2.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
          break;
        case exports2.INFLATE:
        case exports2.GUNZIP:
        case exports2.INFLATERAW:
        case exports2.UNZIP:
          this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
          break;
        default:
          throw new Error("Unknown mode " + this.mode);
      }
      if (this.err !== exports2.Z_OK) {
        this._error("Init error");
      }
      this.dictionary = dictionary;
      this.write_in_progress = false;
      this.init_done = true;
    };
    Zlib.prototype._setDictionary = function() {
      if (this.dictionary == null) {
        return;
      }
      this.err = exports2.Z_OK;
      switch (this.mode) {
        case exports2.DEFLATE:
        case exports2.DEFLATERAW:
          this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
          break;
        default:
          break;
      }
      if (this.err !== exports2.Z_OK) {
        this._error("Failed to set dictionary");
      }
    };
    Zlib.prototype._reset = function() {
      this.err = exports2.Z_OK;
      switch (this.mode) {
        case exports2.DEFLATE:
        case exports2.DEFLATERAW:
        case exports2.GZIP:
          this.err = zlib_deflate.deflateReset(this.strm);
          break;
        case exports2.INFLATE:
        case exports2.INFLATERAW:
        case exports2.GUNZIP:
          this.err = zlib_inflate.inflateReset(this.strm);
          break;
        default:
          break;
      }
      if (this.err !== exports2.Z_OK) {
        this._error("Failed to reset stream");
      }
    };
    exports2.Zlib = Zlib;
  }
});

// node_modules/browserify-zlib/lib/index.js
var require_lib = __commonJS({
  "node_modules/browserify-zlib/lib/index.js"(exports2) {
    "use strict";
    var Buffer2 = require_buffer().Buffer;
    var Transform2 = require_readable_browser().Transform;
    var binding = require_binding();
    var util = require_util2();
    var assert = require_assert().ok;
    var kMaxLength = require_buffer().kMaxLength;
    var kRangeErrorMessage = "Cannot create final Buffer. It would be larger than 0x" + kMaxLength.toString(16) + " bytes";
    binding.Z_MIN_WINDOWBITS = 8;
    binding.Z_MAX_WINDOWBITS = 15;
    binding.Z_DEFAULT_WINDOWBITS = 15;
    binding.Z_MIN_CHUNK = 64;
    binding.Z_MAX_CHUNK = Infinity;
    binding.Z_DEFAULT_CHUNK = 16 * 1024;
    binding.Z_MIN_MEMLEVEL = 1;
    binding.Z_MAX_MEMLEVEL = 9;
    binding.Z_DEFAULT_MEMLEVEL = 8;
    binding.Z_MIN_LEVEL = -1;
    binding.Z_MAX_LEVEL = 9;
    binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;
    var bkeys = Object.keys(binding);
    for (bk = 0; bk < bkeys.length; bk++) {
      bkey = bkeys[bk];
      if (bkey.match(/^Z/)) {
        Object.defineProperty(exports2, bkey, {
          enumerable: true,
          value: binding[bkey],
          writable: false
        });
      }
    }
    var bkey;
    var bk;
    var codes = {
      Z_OK: binding.Z_OK,
      Z_STREAM_END: binding.Z_STREAM_END,
      Z_NEED_DICT: binding.Z_NEED_DICT,
      Z_ERRNO: binding.Z_ERRNO,
      Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
      Z_DATA_ERROR: binding.Z_DATA_ERROR,
      Z_MEM_ERROR: binding.Z_MEM_ERROR,
      Z_BUF_ERROR: binding.Z_BUF_ERROR,
      Z_VERSION_ERROR: binding.Z_VERSION_ERROR
    };
    var ckeys = Object.keys(codes);
    for (ck = 0; ck < ckeys.length; ck++) {
      ckey = ckeys[ck];
      codes[codes[ckey]] = ckey;
    }
    var ckey;
    var ck;
    Object.defineProperty(exports2, "codes", {
      enumerable: true,
      value: Object.freeze(codes),
      writable: false
    });
    exports2.Deflate = Deflate;
    exports2.Inflate = Inflate;
    exports2.Gzip = Gzip;
    exports2.Gunzip = Gunzip;
    exports2.DeflateRaw = DeflateRaw;
    exports2.InflateRaw = InflateRaw;
    exports2.Unzip = Unzip;
    exports2.createDeflate = function(o) {
      return new Deflate(o);
    };
    exports2.createInflate = function(o) {
      return new Inflate(o);
    };
    exports2.createDeflateRaw = function(o) {
      return new DeflateRaw(o);
    };
    exports2.createInflateRaw = function(o) {
      return new InflateRaw(o);
    };
    exports2.createGzip = function(o) {
      return new Gzip(o);
    };
    exports2.createGunzip = function(o) {
      return new Gunzip(o);
    };
    exports2.createUnzip = function(o) {
      return new Unzip(o);
    };
    exports2.deflate = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Deflate(opts), buffer, callback);
    };
    exports2.deflateSync = function(buffer, opts) {
      return zlibBufferSync(new Deflate(opts), buffer);
    };
    exports2.gzip = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Gzip(opts), buffer, callback);
    };
    exports2.gzipSync = function(buffer, opts) {
      return zlibBufferSync(new Gzip(opts), buffer);
    };
    exports2.deflateRaw = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new DeflateRaw(opts), buffer, callback);
    };
    exports2.deflateRawSync = function(buffer, opts) {
      return zlibBufferSync(new DeflateRaw(opts), buffer);
    };
    exports2.unzip = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Unzip(opts), buffer, callback);
    };
    exports2.unzipSync = function(buffer, opts) {
      return zlibBufferSync(new Unzip(opts), buffer);
    };
    exports2.inflate = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Inflate(opts), buffer, callback);
    };
    exports2.inflateSync = function(buffer, opts) {
      return zlibBufferSync(new Inflate(opts), buffer);
    };
    exports2.gunzip = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new Gunzip(opts), buffer, callback);
    };
    exports2.gunzipSync = function(buffer, opts) {
      return zlibBufferSync(new Gunzip(opts), buffer);
    };
    exports2.inflateRaw = function(buffer, opts, callback) {
      if (typeof opts === "function") {
        callback = opts;
        opts = {};
      }
      return zlibBuffer(new InflateRaw(opts), buffer, callback);
    };
    exports2.inflateRawSync = function(buffer, opts) {
      return zlibBufferSync(new InflateRaw(opts), buffer);
    };
    function zlibBuffer(engine, buffer, callback) {
      var buffers = [];
      var nread = 0;
      engine.on("error", onError);
      engine.on("end", onEnd);
      engine.end(buffer);
      flow();
      function flow() {
        var chunk;
        while (null !== (chunk = engine.read())) {
          buffers.push(chunk);
          nread += chunk.length;
        }
        engine.once("readable", flow);
      }
      function onError(err) {
        engine.removeListener("end", onEnd);
        engine.removeListener("readable", flow);
        callback(err);
      }
      function onEnd() {
        var buf;
        var err = null;
        if (nread >= kMaxLength) {
          err = new RangeError(kRangeErrorMessage);
        } else {
          buf = Buffer2.concat(buffers, nread);
        }
        buffers = [];
        engine.close();
        callback(err, buf);
      }
    }
    function zlibBufferSync(engine, buffer) {
      if (typeof buffer === "string")
        buffer = Buffer2.from(buffer);
      if (!Buffer2.isBuffer(buffer))
        throw new TypeError("Not a string or buffer");
      var flushFlag = engine._finishFlushFlag;
      return engine._processChunk(buffer, flushFlag);
    }
    function Deflate(opts) {
      if (!(this instanceof Deflate))
        return new Deflate(opts);
      Zlib.call(this, opts, binding.DEFLATE);
    }
    function Inflate(opts) {
      if (!(this instanceof Inflate))
        return new Inflate(opts);
      Zlib.call(this, opts, binding.INFLATE);
    }
    function Gzip(opts) {
      if (!(this instanceof Gzip))
        return new Gzip(opts);
      Zlib.call(this, opts, binding.GZIP);
    }
    function Gunzip(opts) {
      if (!(this instanceof Gunzip))
        return new Gunzip(opts);
      Zlib.call(this, opts, binding.GUNZIP);
    }
    function DeflateRaw(opts) {
      if (!(this instanceof DeflateRaw))
        return new DeflateRaw(opts);
      Zlib.call(this, opts, binding.DEFLATERAW);
    }
    function InflateRaw(opts) {
      if (!(this instanceof InflateRaw))
        return new InflateRaw(opts);
      Zlib.call(this, opts, binding.INFLATERAW);
    }
    function Unzip(opts) {
      if (!(this instanceof Unzip))
        return new Unzip(opts);
      Zlib.call(this, opts, binding.UNZIP);
    }
    function isValidFlushFlag(flag) {
      return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
    }
    function Zlib(opts, mode) {
      var _this = this;
      this._opts = opts = opts || {};
      this._chunkSize = opts.chunkSize || exports2.Z_DEFAULT_CHUNK;
      Transform2.call(this, opts);
      if (opts.flush && !isValidFlushFlag(opts.flush)) {
        throw new Error("Invalid flush flag: " + opts.flush);
      }
      if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
        throw new Error("Invalid flush flag: " + opts.finishFlush);
      }
      this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
      this._finishFlushFlag = typeof opts.finishFlush !== "undefined" ? opts.finishFlush : binding.Z_FINISH;
      if (opts.chunkSize) {
        if (opts.chunkSize < exports2.Z_MIN_CHUNK || opts.chunkSize > exports2.Z_MAX_CHUNK) {
          throw new Error("Invalid chunk size: " + opts.chunkSize);
        }
      }
      if (opts.windowBits) {
        if (opts.windowBits < exports2.Z_MIN_WINDOWBITS || opts.windowBits > exports2.Z_MAX_WINDOWBITS) {
          throw new Error("Invalid windowBits: " + opts.windowBits);
        }
      }
      if (opts.level) {
        if (opts.level < exports2.Z_MIN_LEVEL || opts.level > exports2.Z_MAX_LEVEL) {
          throw new Error("Invalid compression level: " + opts.level);
        }
      }
      if (opts.memLevel) {
        if (opts.memLevel < exports2.Z_MIN_MEMLEVEL || opts.memLevel > exports2.Z_MAX_MEMLEVEL) {
          throw new Error("Invalid memLevel: " + opts.memLevel);
        }
      }
      if (opts.strategy) {
        if (opts.strategy != exports2.Z_FILTERED && opts.strategy != exports2.Z_HUFFMAN_ONLY && opts.strategy != exports2.Z_RLE && opts.strategy != exports2.Z_FIXED && opts.strategy != exports2.Z_DEFAULT_STRATEGY) {
          throw new Error("Invalid strategy: " + opts.strategy);
        }
      }
      if (opts.dictionary) {
        if (!Buffer2.isBuffer(opts.dictionary)) {
          throw new Error("Invalid dictionary: it should be a Buffer instance");
        }
      }
      this._handle = new binding.Zlib(mode);
      var self2 = this;
      this._hadError = false;
      this._handle.onerror = function(message, errno) {
        _close(self2);
        self2._hadError = true;
        var error = new Error(message);
        error.errno = errno;
        error.code = exports2.codes[errno];
        self2.emit("error", error);
      };
      var level = exports2.Z_DEFAULT_COMPRESSION;
      if (typeof opts.level === "number")
        level = opts.level;
      var strategy = exports2.Z_DEFAULT_STRATEGY;
      if (typeof opts.strategy === "number")
        strategy = opts.strategy;
      this._handle.init(opts.windowBits || exports2.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports2.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
      this._buffer = Buffer2.allocUnsafe(this._chunkSize);
      this._offset = 0;
      this._level = level;
      this._strategy = strategy;
      this.once("end", this.close);
      Object.defineProperty(this, "_closed", {
        get: function() {
          return !_this._handle;
        },
        configurable: true,
        enumerable: true
      });
    }
    util.inherits(Zlib, Transform2);
    Zlib.prototype.params = function(level, strategy, callback) {
      if (level < exports2.Z_MIN_LEVEL || level > exports2.Z_MAX_LEVEL) {
        throw new RangeError("Invalid compression level: " + level);
      }
      if (strategy != exports2.Z_FILTERED && strategy != exports2.Z_HUFFMAN_ONLY && strategy != exports2.Z_RLE && strategy != exports2.Z_FIXED && strategy != exports2.Z_DEFAULT_STRATEGY) {
        throw new TypeError("Invalid strategy: " + strategy);
      }
      if (this._level !== level || this._strategy !== strategy) {
        var self2 = this;
        this.flush(binding.Z_SYNC_FLUSH, function() {
          assert(self2._handle, "zlib binding closed");
          self2._handle.params(level, strategy);
          if (!self2._hadError) {
            self2._level = level;
            self2._strategy = strategy;
            if (callback)
              callback();
          }
        });
      } else {
        process.nextTick(callback);
      }
    };
    Zlib.prototype.reset = function() {
      assert(this._handle, "zlib binding closed");
      return this._handle.reset();
    };
    Zlib.prototype._flush = function(callback) {
      this._transform(Buffer2.alloc(0), "", callback);
    };
    Zlib.prototype.flush = function(kind, callback) {
      var _this2 = this;
      var ws = this._writableState;
      if (typeof kind === "function" || kind === void 0 && !callback) {
        callback = kind;
        kind = binding.Z_FULL_FLUSH;
      }
      if (ws.ended) {
        if (callback)
          process.nextTick(callback);
      } else if (ws.ending) {
        if (callback)
          this.once("end", callback);
      } else if (ws.needDrain) {
        if (callback) {
          this.once("drain", function() {
            return _this2.flush(kind, callback);
          });
        }
      } else {
        this._flushFlag = kind;
        this.write(Buffer2.alloc(0), "", callback);
      }
    };
    Zlib.prototype.close = function(callback) {
      _close(this, callback);
      process.nextTick(emitCloseNT, this);
    };
    function _close(engine, callback) {
      if (callback)
        process.nextTick(callback);
      if (!engine._handle)
        return;
      engine._handle.close();
      engine._handle = null;
    }
    function emitCloseNT(self2) {
      self2.emit("close");
    }
    Zlib.prototype._transform = function(chunk, encoding, cb) {
      var flushFlag;
      var ws = this._writableState;
      var ending = ws.ending || ws.ended;
      var last = ending && (!chunk || ws.length === chunk.length);
      if (chunk !== null && !Buffer2.isBuffer(chunk))
        return cb(new Error("invalid input"));
      if (!this._handle)
        return cb(new Error("zlib binding closed"));
      if (last)
        flushFlag = this._finishFlushFlag;
      else {
        flushFlag = this._flushFlag;
        if (chunk.length >= ws.length) {
          this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
        }
      }
      this._processChunk(chunk, flushFlag, cb);
    };
    Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
      var availInBefore = chunk && chunk.length;
      var availOutBefore = this._chunkSize - this._offset;
      var inOff = 0;
      var self2 = this;
      var async = typeof cb === "function";
      if (!async) {
        var buffers = [];
        var nread = 0;
        var error;
        this.on("error", function(er) {
          error = er;
        });
        assert(this._handle, "zlib binding closed");
        do {
          var res = this._handle.writeSync(
            flushFlag,
            chunk,
            inOff,
            availInBefore,
            this._buffer,
            this._offset,
            availOutBefore
          );
        } while (!this._hadError && callback(res[0], res[1]));
        if (this._hadError) {
          throw error;
        }
        if (nread >= kMaxLength) {
          _close(this);
          throw new RangeError(kRangeErrorMessage);
        }
        var buf = Buffer2.concat(buffers, nread);
        _close(this);
        return buf;
      }
      assert(this._handle, "zlib binding closed");
      var req = this._handle.write(
        flushFlag,
        chunk,
        inOff,
        availInBefore,
        this._buffer,
        this._offset,
        availOutBefore
      );
      req.buffer = chunk;
      req.callback = callback;
      function callback(availInAfter, availOutAfter) {
        if (this) {
          this.buffer = null;
          this.callback = null;
        }
        if (self2._hadError)
          return;
        var have = availOutBefore - availOutAfter;
        assert(have >= 0, "have should not go down");
        if (have > 0) {
          var out = self2._buffer.slice(self2._offset, self2._offset + have);
          self2._offset += have;
          if (async) {
            self2.push(out);
          } else {
            buffers.push(out);
            nread += out.length;
          }
        }
        if (availOutAfter === 0 || self2._offset >= self2._chunkSize) {
          availOutBefore = self2._chunkSize;
          self2._offset = 0;
          self2._buffer = Buffer2.allocUnsafe(self2._chunkSize);
        }
        if (availOutAfter === 0) {
          inOff += availInBefore - availInAfter;
          availInBefore = availInAfter;
          if (!async)
            return true;
          var newReq = self2._handle.write(flushFlag, chunk, inOff, availInBefore, self2._buffer, self2._offset, self2._chunkSize);
          newReq.callback = callback;
          newReq.buffer = chunk;
          return;
        }
        if (!async)
          return false;
        cb();
      }
    };
    util.inherits(Deflate, Zlib);
    util.inherits(Inflate, Zlib);
    util.inherits(Gzip, Zlib);
    util.inherits(Gunzip, Zlib);
    util.inherits(DeflateRaw, Zlib);
    util.inherits(InflateRaw, Zlib);
    util.inherits(Unzip, Zlib);
  }
});

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code.`);
        }
      }
    }));
  }
});

// node_modules/pdfjs-dist/legacy/build/pdf.js
var require_pdf = __commonJS({
  "node_modules/pdfjs-dist/legacy/build/pdf.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define("pdfjs-dist/build/pdf", [], factory);
      else if (typeof exports === "object")
        exports["pdfjs-dist/build/pdf"] = factory();
      else
        root["pdfjs-dist/build/pdf"] = root.pdfjsLib = factory();
    })(exports, function() {
      return (() => {
        var __webpack_modules__ = [
          ,
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.StatTimer = exports2.RenderingCancelledException = exports2.PixelsPerInch = exports2.PageViewport = exports2.PDFDateString = exports2.LinkTarget = exports2.DOMStandardFontDataFactory = exports2.DOMSVGFactory = exports2.DOMCanvasFactory = exports2.DOMCMapReaderFactory = void 0;
            exports2.addLinkAttributes = addLinkAttributes;
            exports2.deprecated = deprecated;
            exports2.getFilenameFromUrl = getFilenameFromUrl;
            exports2.getPdfFilenameFromUrl = getPdfFilenameFromUrl;
            exports2.getXfaPageViewport = getXfaPageViewport;
            exports2.isDataScheme = isDataScheme;
            exports2.isPdfFile = isPdfFile;
            exports2.isValidFetchUrl = isValidFetchUrl;
            exports2.loadScript = loadScript;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            var _base_factory = __w_pdfjs_require__2(135);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            var DEFAULT_LINK_REL2 = "noopener noreferrer nofollow";
            var SVG_NS = "http://www.w3.org/2000/svg";
            var PixelsPerInch = {
              CSS: 96,
              PDF: 72,
              get PDF_TO_CSS_UNITS() {
                return (0, _util2.shadow)(this, "PDF_TO_CSS_UNITS", this.CSS / this.PDF);
              }
            };
            exports2.PixelsPerInch = PixelsPerInch;
            var DOMCanvasFactory = function(_BaseCanvasFactory) {
              _inherits2(DOMCanvasFactory2, _BaseCanvasFactory);
              var _super = _createSuper10(DOMCanvasFactory2);
              function DOMCanvasFactory2() {
                var _this;
                var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$ownerDocument = _ref.ownerDocument, ownerDocument = _ref$ownerDocument === void 0 ? globalThis.document : _ref$ownerDocument;
                _classCallCheck3(this, DOMCanvasFactory2);
                _this = _super.call(this);
                _this._document = ownerDocument;
                return _this;
              }
              _createClass3(DOMCanvasFactory2, [{
                key: "_createCanvas",
                value: function _createCanvas(width, height) {
                  var canvas = this._document.createElement("canvas");
                  canvas.width = width;
                  canvas.height = height;
                  return canvas;
                }
              }]);
              return DOMCanvasFactory2;
            }(_base_factory.BaseCanvasFactory);
            exports2.DOMCanvasFactory = DOMCanvasFactory;
            function fetchData(_x) {
              return _fetchData.apply(this, arguments);
            }
            function _fetchData() {
              _fetchData = _asyncToGenerator2(_regenerator2["default"].mark(function _callee(url) {
                var asTypedArray, response, _args = arguments;
                return _regenerator2["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        asTypedArray = _args.length > 1 && _args[1] !== void 0 ? _args[1] : false;
                        if (!isValidFetchUrl(url, document.baseURI)) {
                          _context.next = 21;
                          break;
                        }
                        _context.next = 4;
                        return fetch(url);
                      case 4:
                        response = _context.sent;
                        if (response.ok) {
                          _context.next = 7;
                          break;
                        }
                        throw new Error(response.statusText);
                      case 7:
                        if (!asTypedArray) {
                          _context.next = 15;
                          break;
                        }
                        _context.t1 = Uint8Array;
                        _context.next = 11;
                        return response.arrayBuffer();
                      case 11:
                        _context.t2 = _context.sent;
                        _context.t0 = new _context.t1(_context.t2);
                        _context.next = 20;
                        break;
                      case 15:
                        _context.t3 = _util2.stringToBytes;
                        _context.next = 18;
                        return response.text();
                      case 18:
                        _context.t4 = _context.sent;
                        _context.t0 = (0, _context.t3)(_context.t4);
                      case 20:
                        return _context.abrupt("return", _context.t0);
                      case 21:
                        return _context.abrupt("return", new Promise(function(resolve, reject) {
                          var request = new XMLHttpRequest();
                          request.open("GET", url, true);
                          if (asTypedArray) {
                            request.responseType = "arraybuffer";
                          }
                          request.onreadystatechange = function() {
                            if (request.readyState !== XMLHttpRequest.DONE) {
                              return;
                            }
                            if (request.status === 200 || request.status === 0) {
                              var data;
                              if (asTypedArray && request.response) {
                                data = new Uint8Array(request.response);
                              } else if (!asTypedArray && request.responseText) {
                                data = (0, _util2.stringToBytes)(request.responseText);
                              }
                              if (data) {
                                resolve(data);
                                return;
                              }
                            }
                            reject(new Error(request.statusText));
                          };
                          request.send(null);
                        }));
                      case 22:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return _fetchData.apply(this, arguments);
            }
            var DOMCMapReaderFactory = function(_BaseCMapReaderFactor) {
              _inherits2(DOMCMapReaderFactory2, _BaseCMapReaderFactor);
              var _super2 = _createSuper10(DOMCMapReaderFactory2);
              function DOMCMapReaderFactory2() {
                _classCallCheck3(this, DOMCMapReaderFactory2);
                return _super2.apply(this, arguments);
              }
              _createClass3(DOMCMapReaderFactory2, [{
                key: "_fetchData",
                value: function _fetchData2(url, compressionType) {
                  return fetchData(url, this.isCompressed).then(function(data) {
                    return {
                      cMapData: data,
                      compressionType
                    };
                  });
                }
              }]);
              return DOMCMapReaderFactory2;
            }(_base_factory.BaseCMapReaderFactory);
            exports2.DOMCMapReaderFactory = DOMCMapReaderFactory;
            var DOMStandardFontDataFactory = function(_BaseStandardFontData) {
              _inherits2(DOMStandardFontDataFactory2, _BaseStandardFontData);
              var _super3 = _createSuper10(DOMStandardFontDataFactory2);
              function DOMStandardFontDataFactory2() {
                _classCallCheck3(this, DOMStandardFontDataFactory2);
                return _super3.apply(this, arguments);
              }
              _createClass3(DOMStandardFontDataFactory2, [{
                key: "_fetchData",
                value: function _fetchData2(url) {
                  return fetchData(url, true);
                }
              }]);
              return DOMStandardFontDataFactory2;
            }(_base_factory.BaseStandardFontDataFactory);
            exports2.DOMStandardFontDataFactory = DOMStandardFontDataFactory;
            var DOMSVGFactory = function(_BaseSVGFactory) {
              _inherits2(DOMSVGFactory2, _BaseSVGFactory);
              var _super4 = _createSuper10(DOMSVGFactory2);
              function DOMSVGFactory2() {
                _classCallCheck3(this, DOMSVGFactory2);
                return _super4.apply(this, arguments);
              }
              _createClass3(DOMSVGFactory2, [{
                key: "_createSVG",
                value: function _createSVG(type) {
                  return document.createElementNS(SVG_NS, type);
                }
              }]);
              return DOMSVGFactory2;
            }(_base_factory.BaseSVGFactory);
            exports2.DOMSVGFactory = DOMSVGFactory;
            var PageViewport = function() {
              function PageViewport2(_ref2) {
                var viewBox = _ref2.viewBox, scale = _ref2.scale, rotation = _ref2.rotation, _ref2$offsetX = _ref2.offsetX, offsetX = _ref2$offsetX === void 0 ? 0 : _ref2$offsetX, _ref2$offsetY = _ref2.offsetY, offsetY = _ref2$offsetY === void 0 ? 0 : _ref2$offsetY, _ref2$dontFlip = _ref2.dontFlip, dontFlip = _ref2$dontFlip === void 0 ? false : _ref2$dontFlip;
                _classCallCheck3(this, PageViewport2);
                this.viewBox = viewBox;
                this.scale = scale;
                this.rotation = rotation;
                this.offsetX = offsetX;
                this.offsetY = offsetY;
                var centerX = (viewBox[2] + viewBox[0]) / 2;
                var centerY = (viewBox[3] + viewBox[1]) / 2;
                var rotateA, rotateB, rotateC, rotateD;
                rotation %= 360;
                if (rotation < 0) {
                  rotation += 360;
                }
                switch (rotation) {
                  case 180:
                    rotateA = -1;
                    rotateB = 0;
                    rotateC = 0;
                    rotateD = 1;
                    break;
                  case 90:
                    rotateA = 0;
                    rotateB = 1;
                    rotateC = 1;
                    rotateD = 0;
                    break;
                  case 270:
                    rotateA = 0;
                    rotateB = -1;
                    rotateC = -1;
                    rotateD = 0;
                    break;
                  case 0:
                    rotateA = 1;
                    rotateB = 0;
                    rotateC = 0;
                    rotateD = -1;
                    break;
                  default:
                    throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
                }
                if (dontFlip) {
                  rotateC = -rotateC;
                  rotateD = -rotateD;
                }
                var offsetCanvasX, offsetCanvasY;
                var width, height;
                if (rotateA === 0) {
                  offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
                  offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
                  width = Math.abs(viewBox[3] - viewBox[1]) * scale;
                  height = Math.abs(viewBox[2] - viewBox[0]) * scale;
                } else {
                  offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
                  offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
                  width = Math.abs(viewBox[2] - viewBox[0]) * scale;
                  height = Math.abs(viewBox[3] - viewBox[1]) * scale;
                }
                this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
                this.width = width;
                this.height = height;
              }
              _createClass3(PageViewport2, [{
                key: "clone",
                value: function clone() {
                  var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$scale = _ref3.scale, scale = _ref3$scale === void 0 ? this.scale : _ref3$scale, _ref3$rotation = _ref3.rotation, rotation = _ref3$rotation === void 0 ? this.rotation : _ref3$rotation, _ref3$offsetX = _ref3.offsetX, offsetX = _ref3$offsetX === void 0 ? this.offsetX : _ref3$offsetX, _ref3$offsetY = _ref3.offsetY, offsetY = _ref3$offsetY === void 0 ? this.offsetY : _ref3$offsetY, _ref3$dontFlip = _ref3.dontFlip, dontFlip = _ref3$dontFlip === void 0 ? false : _ref3$dontFlip;
                  return new PageViewport2({
                    viewBox: this.viewBox.slice(),
                    scale,
                    rotation,
                    offsetX,
                    offsetY,
                    dontFlip
                  });
                }
              }, {
                key: "convertToViewportPoint",
                value: function convertToViewportPoint(x, y) {
                  return _util2.Util.applyTransform([x, y], this.transform);
                }
              }, {
                key: "convertToViewportRectangle",
                value: function convertToViewportRectangle(rect) {
                  var topLeft = _util2.Util.applyTransform([rect[0], rect[1]], this.transform);
                  var bottomRight = _util2.Util.applyTransform([rect[2], rect[3]], this.transform);
                  return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
                }
              }, {
                key: "convertToPdfPoint",
                value: function convertToPdfPoint(x, y) {
                  return _util2.Util.applyInverseTransform([x, y], this.transform);
                }
              }]);
              return PageViewport2;
            }();
            exports2.PageViewport = PageViewport;
            var RenderingCancelledException = function(_BaseException) {
              _inherits2(RenderingCancelledException2, _BaseException);
              var _super5 = _createSuper10(RenderingCancelledException2);
              function RenderingCancelledException2(msg, type) {
                var _this2;
                _classCallCheck3(this, RenderingCancelledException2);
                _this2 = _super5.call(this, msg, "RenderingCancelledException");
                _this2.type = type;
                return _this2;
              }
              return RenderingCancelledException2;
            }(_util2.BaseException);
            exports2.RenderingCancelledException = RenderingCancelledException;
            var LinkTarget = {
              NONE: 0,
              SELF: 1,
              BLANK: 2,
              PARENT: 3,
              TOP: 4
            };
            exports2.LinkTarget = LinkTarget;
            function addLinkAttributes(link) {
              var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, url = _ref4.url, target = _ref4.target, rel = _ref4.rel, _ref4$enabled = _ref4.enabled, enabled = _ref4$enabled === void 0 ? true : _ref4$enabled;
              (0, _util2.assert)(url && typeof url === "string", 'addLinkAttributes: A valid "url" parameter must provided.');
              var urlNullRemoved = (0, _util2.removeNullCharacters)(url);
              if (enabled) {
                link.href = link.title = urlNullRemoved;
              } else {
                link.href = "";
                link.title = "Disabled: ".concat(urlNullRemoved);
                link.onclick = function() {
                  return false;
                };
              }
              var targetStr = "";
              switch (target) {
                case LinkTarget.NONE:
                  break;
                case LinkTarget.SELF:
                  targetStr = "_self";
                  break;
                case LinkTarget.BLANK:
                  targetStr = "_blank";
                  break;
                case LinkTarget.PARENT:
                  targetStr = "_parent";
                  break;
                case LinkTarget.TOP:
                  targetStr = "_top";
                  break;
              }
              link.target = targetStr;
              link.rel = typeof rel === "string" ? rel : DEFAULT_LINK_REL2;
            }
            function isDataScheme(url) {
              var ii = url.length;
              var i = 0;
              while (i < ii && url[i].trim() === "") {
                i++;
              }
              return url.substring(i, i + 5).toLowerCase() === "data:";
            }
            function isPdfFile(filename) {
              return typeof filename === "string" && /\.pdf$/i.test(filename);
            }
            function getFilenameFromUrl(url) {
              var anchor = url.indexOf("#");
              var query = url.indexOf("?");
              var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
              return url.substring(url.lastIndexOf("/", end) + 1, end);
            }
            function getPdfFilenameFromUrl(url) {
              var defaultFilename = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "document.pdf";
              if (typeof url !== "string") {
                return defaultFilename;
              }
              if (isDataScheme(url)) {
                (0, _util2.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
                return defaultFilename;
              }
              var reURI = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
              var reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
              var splitURI = reURI.exec(url);
              var suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);
              if (suggestedFilename) {
                suggestedFilename = suggestedFilename[0];
                if (suggestedFilename.includes("%")) {
                  try {
                    suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
                  } catch (ex) {
                  }
                }
              }
              return suggestedFilename || defaultFilename;
            }
            var StatTimer = function() {
              function StatTimer2() {
                _classCallCheck3(this, StatTimer2);
                this.started = /* @__PURE__ */ Object.create(null);
                this.times = [];
              }
              _createClass3(StatTimer2, [{
                key: "time",
                value: function time(name) {
                  if (name in this.started) {
                    (0, _util2.warn)("Timer is already running for ".concat(name));
                  }
                  this.started[name] = Date.now();
                }
              }, {
                key: "timeEnd",
                value: function timeEnd(name) {
                  if (!(name in this.started)) {
                    (0, _util2.warn)("Timer has not been started for ".concat(name));
                  }
                  this.times.push({
                    name,
                    start: this.started[name],
                    end: Date.now()
                  });
                  delete this.started[name];
                }
              }, {
                key: "toString",
                value: function toString() {
                  var outBuf = [];
                  var longest = 0;
                  var _iterator = _createForOfIteratorHelper2(this.times), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var time = _step.value;
                      var name = time.name;
                      if (name.length > longest) {
                        longest = name.length;
                      }
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  var _iterator2 = _createForOfIteratorHelper2(this.times), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var _time = _step2.value;
                      var duration = _time.end - _time.start;
                      outBuf.push("".concat(_time.name.padEnd(longest), " ").concat(duration, "ms\n"));
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  return outBuf.join("");
                }
              }]);
              return StatTimer2;
            }();
            exports2.StatTimer = StatTimer;
            function isValidFetchUrl(url, baseUrl) {
              try {
                var _ref5 = baseUrl ? new URL(url, baseUrl) : new URL(url), protocol = _ref5.protocol;
                return protocol === "http:" || protocol === "https:";
              } catch (ex) {
                return false;
              }
            }
            function loadScript(src) {
              var removeScriptElement = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              return new Promise(function(resolve, reject) {
                var script = document.createElement("script");
                script.src = src;
                script.onload = function(evt) {
                  if (removeScriptElement) {
                    script.remove();
                  }
                  resolve(evt);
                };
                script.onerror = function() {
                  reject(new Error("Cannot load script at: ".concat(script.src)));
                };
                (document.head || document.documentElement).appendChild(script);
              });
            }
            function deprecated(details) {
              console.log("Deprecated API usage: " + details);
            }
            var pdfDateStringRegex;
            var PDFDateString = function() {
              function PDFDateString2() {
                _classCallCheck3(this, PDFDateString2);
              }
              _createClass3(PDFDateString2, null, [{
                key: "toDateObject",
                value: function toDateObject(input) {
                  if (!input || !(0, _util2.isString)(input)) {
                    return null;
                  }
                  if (!pdfDateStringRegex) {
                    pdfDateStringRegex = new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
                  }
                  var matches = pdfDateStringRegex.exec(input);
                  if (!matches) {
                    return null;
                  }
                  var year = parseInt(matches[1], 10);
                  var month = parseInt(matches[2], 10);
                  month = month >= 1 && month <= 12 ? month - 1 : 0;
                  var day = parseInt(matches[3], 10);
                  day = day >= 1 && day <= 31 ? day : 1;
                  var hour = parseInt(matches[4], 10);
                  hour = hour >= 0 && hour <= 23 ? hour : 0;
                  var minute = parseInt(matches[5], 10);
                  minute = minute >= 0 && minute <= 59 ? minute : 0;
                  var second = parseInt(matches[6], 10);
                  second = second >= 0 && second <= 59 ? second : 0;
                  var universalTimeRelation = matches[7] || "Z";
                  var offsetHour = parseInt(matches[8], 10);
                  offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
                  var offsetMinute = parseInt(matches[9], 10) || 0;
                  offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;
                  if (universalTimeRelation === "-") {
                    hour += offsetHour;
                    minute += offsetMinute;
                  } else if (universalTimeRelation === "+") {
                    hour -= offsetHour;
                    minute -= offsetMinute;
                  }
                  return new Date(Date.UTC(year, month, day, hour, minute, second));
                }
              }]);
              return PDFDateString2;
            }();
            exports2.PDFDateString = PDFDateString;
            function getXfaPageViewport(xfaPage, _ref6) {
              var _ref6$scale = _ref6.scale, scale = _ref6$scale === void 0 ? 1 : _ref6$scale, _ref6$rotation = _ref6.rotation, rotation = _ref6$rotation === void 0 ? 0 : _ref6$rotation;
              var _xfaPage$attributes$s = xfaPage.attributes.style, width = _xfaPage$attributes$s.width, height = _xfaPage$attributes$s.height;
              var viewBox = [0, 0, parseInt(width), parseInt(height)];
              return new PageViewport({
                viewBox,
                scale,
                rotation
              });
            }
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            module2.exports = __w_pdfjs_require__2(3);
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            module2 = __w_pdfjs_require__2.nmd(module2);
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            var runtime = function(exports2) {
              "use strict";
              var Op = Object.prototype;
              var hasOwn = Op.hasOwnProperty;
              var undefined2;
              var $Symbol = typeof Symbol === "function" ? Symbol : {};
              var iteratorSymbol = $Symbol.iterator || "@@iterator";
              var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
              var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
              function define2(obj, key, value) {
                Object.defineProperty(obj, key, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
                return obj[key];
              }
              try {
                define2({}, "");
              } catch (err) {
                define2 = function define3(obj, key, value) {
                  return obj[key] = value;
                };
              }
              function wrap(innerFn, outerFn, self2, tryLocsList) {
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self2, context);
                return generator;
              }
              exports2.wrap = wrap;
              function tryCatch(fn, obj, arg) {
                try {
                  return {
                    type: "normal",
                    arg: fn.call(obj, arg)
                  };
                } catch (err) {
                  return {
                    type: "throw",
                    arg: err
                  };
                }
              }
              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";
              var ContinueSentinel = {};
              function Generator() {
              }
              function GeneratorFunction() {
              }
              function GeneratorFunctionPrototype() {
              }
              var IteratorPrototype = {};
              define2(IteratorPrototype, iteratorSymbol, function() {
                return this;
              });
              var getProto = Object.getPrototypeOf;
              var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
              if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                IteratorPrototype = NativeIteratorPrototype;
              }
              var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
              GeneratorFunction.prototype = GeneratorFunctionPrototype;
              define2(Gp, "constructor", GeneratorFunctionPrototype);
              define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
              GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
              function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                  define2(prototype, method, function(arg) {
                    return this._invoke(method, arg);
                  });
                });
              }
              exports2.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
              };
              exports2.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                  define2(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };
              exports2.awrap = function(arg) {
                return {
                  __await: arg
                };
              };
              function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                  var record = tryCatch(generator[method], generator, arg);
                  if (record.type === "throw") {
                    reject(record.arg);
                  } else {
                    var result = record.arg;
                    var value = result.value;
                    if (value && _typeof3(value) === "object" && hasOwn.call(value, "__await")) {
                      return PromiseImpl.resolve(value.__await).then(function(value2) {
                        invoke("next", value2, resolve, reject);
                      }, function(err) {
                        invoke("throw", err, resolve, reject);
                      });
                    }
                    return PromiseImpl.resolve(value).then(function(unwrapped) {
                      result.value = unwrapped;
                      resolve(result);
                    }, function(error) {
                      return invoke("throw", error, resolve, reject);
                    });
                  }
                }
                var previousPromise;
                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return new PromiseImpl(function(resolve, reject) {
                      invoke(method, arg, resolve, reject);
                    });
                  }
                  return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                }
                this._invoke = enqueue;
              }
              defineIteratorMethods(AsyncIterator.prototype);
              define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
                return this;
              });
              exports2.AsyncIterator = AsyncIterator;
              exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0)
                  PromiseImpl = Promise;
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
                return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                  return result.done ? result.value : iter.next();
                });
              };
              function makeInvokeMethod(innerFn, self2, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }
                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }
                    return doneResult();
                  }
                  context.method = method;
                  context.arg = arg;
                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel)
                          continue;
                        return delegateResult;
                      }
                    }
                    if (context.method === "next") {
                      context.sent = context._sent = context.arg;
                    } else if (context.method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                      }
                      context.dispatchException(context.arg);
                    } else if (context.method === "return") {
                      context.abrupt("return", context.arg);
                    }
                    state = GenStateExecuting;
                    var record = tryCatch(innerFn, self2, context);
                    if (record.type === "normal") {
                      state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                      if (record.arg === ContinueSentinel) {
                        continue;
                      }
                      return {
                        value: record.arg,
                        done: context.done
                      };
                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      context.method = "throw";
                      context.arg = record.arg;
                    }
                  }
                };
              }
              function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined2) {
                  context.delegate = null;
                  if (context.method === "throw") {
                    if (delegate.iterator["return"]) {
                      context.method = "return";
                      context.arg = undefined2;
                      maybeInvokeDelegate(delegate, context);
                      if (context.method === "throw") {
                        return ContinueSentinel;
                      }
                    }
                    context.method = "throw";
                    context.arg = new TypeError("The iterator does not provide a 'throw' method");
                  }
                  return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                  context.method = "throw";
                  context.arg = record.arg;
                  context.delegate = null;
                  return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                  context.method = "throw";
                  context.arg = new TypeError("iterator result is not an object");
                  context.delegate = null;
                  return ContinueSentinel;
                }
                if (info.done) {
                  context[delegate.resultName] = info.value;
                  context.next = delegate.nextLoc;
                  if (context.method !== "return") {
                    context.method = "next";
                    context.arg = undefined2;
                  }
                } else {
                  return info;
                }
                context.delegate = null;
                return ContinueSentinel;
              }
              defineIteratorMethods(Gp);
              define2(Gp, toStringTagSymbol, "Generator");
              define2(Gp, iteratorSymbol, function() {
                return this;
              });
              define2(Gp, "toString", function() {
                return "[object Generator]";
              });
              function pushTryEntry(locs) {
                var entry = {
                  tryLoc: locs[0]
                };
                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
              }
              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }
              function Context(tryLocsList) {
                this.tryEntries = [{
                  tryLoc: "root"
                }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }
              exports2.keys = function(object) {
                var keys = [];
                for (var key in object) {
                  keys.push(key);
                }
                keys.reverse();
                return function next() {
                  while (keys.length) {
                    var key2 = keys.pop();
                    if (key2 in object) {
                      next.value = key2;
                      next.done = false;
                      return next;
                    }
                  }
                  next.done = true;
                  return next;
                };
              };
              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }
                  if (typeof iterable.next === "function") {
                    return iterable;
                  }
                  if (!isNaN(iterable.length)) {
                    var i = -1, next = function next2() {
                      while (++i < iterable.length) {
                        if (hasOwn.call(iterable, i)) {
                          next2.value = iterable[i];
                          next2.done = false;
                          return next2;
                        }
                      }
                      next2.value = undefined2;
                      next2.done = true;
                      return next2;
                    };
                    return next.next = next;
                  }
                }
                return {
                  next: doneResult
                };
              }
              exports2.values = values;
              function doneResult() {
                return {
                  value: undefined2,
                  done: true
                };
              }
              Context.prototype = {
                constructor: Context,
                reset: function reset(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  this.sent = this._sent = undefined2;
                  this.done = false;
                  this.delegate = null;
                  this.method = "next";
                  this.arg = undefined2;
                  this.tryEntries.forEach(resetTryEntry);
                  if (!skipTempReset) {
                    for (var name in this) {
                      if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined2;
                      }
                    }
                  }
                },
                stop: function stop() {
                  this.done = true;
                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }
                  return this.rval;
                },
                dispatchException: function dispatchException(exception) {
                  if (this.done) {
                    throw exception;
                  }
                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;
                    if (caught) {
                      context.method = "next";
                      context.arg = undefined2;
                    }
                    return !!caught;
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    var record = entry.completion;
                    if (entry.tryLoc === "root") {
                      return handle("end");
                    }
                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn.call(entry, "catchLoc");
                      var hasFinally = hasOwn.call(entry, "finallyLoc");
                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }
                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },
                abrupt: function abrupt(type, arg) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }
                  if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                    finallyEntry = null;
                  }
                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;
                  if (finallyEntry) {
                    this.method = "next";
                    this.next = finallyEntry.finallyLoc;
                    return ContinueSentinel;
                  }
                  return this.complete(record);
                },
                complete: function complete(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }
                  if (record.type === "break" || record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = this.arg = record.arg;
                    this.method = "return";
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }
                  return ContinueSentinel;
                },
                finish: function finish(finallyLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },
                "catch": function _catch(tryLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName,
                    nextLoc
                  };
                  if (this.method === "next") {
                    this.arg = undefined2;
                  }
                  return ContinueSentinel;
                }
              };
              return exports2;
            }((false ? 0 : _typeof3(module2)) === "object" ? module2.exports : {});
            try {
              regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
              if ((typeof globalThis === "undefined" ? "undefined" : _typeof3(globalThis)) === "object") {
                globalThis.regeneratorRuntime = runtime;
              } else {
                Function("r", "regeneratorRuntime = r")(runtime);
              }
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.VerbosityLevel = exports2.Util = exports2.UnknownErrorException = exports2.UnexpectedResponseException = exports2.UNSUPPORTED_FEATURES = exports2.TextRenderingMode = exports2.StreamType = exports2.RenderingIntentFlag = exports2.PermissionFlag = exports2.PasswordResponses = exports2.PasswordException = exports2.PageActionEventType = exports2.OPS = exports2.MissingPDFException = exports2.IsLittleEndianCached = exports2.IsEvalSupportedCached = exports2.InvalidPDFException = exports2.ImageKind = exports2.IDENTITY_MATRIX = exports2.FormatError = exports2.FontType = exports2.FONT_IDENTITY_MATRIX = exports2.DocumentActionEventType = exports2.CMapCompressionType = exports2.BaseException = exports2.AnnotationType = exports2.AnnotationStateModelType = exports2.AnnotationReviewState = exports2.AnnotationReplyType = exports2.AnnotationMode = exports2.AnnotationMarkedState = exports2.AnnotationFlag = exports2.AnnotationFieldFlag = exports2.AnnotationBorderStyleType = exports2.AnnotationActionEventType = exports2.AbortException = void 0;
            exports2.arrayByteLength = arrayByteLength;
            exports2.arraysToBytes = arraysToBytes;
            exports2.assert = assert;
            exports2.bytesToString = bytesToString;
            exports2.createObjectURL = createObjectURL;
            exports2.createPromiseCapability = createPromiseCapability;
            exports2.createValidAbsoluteUrl = createValidAbsoluteUrl;
            exports2.escapeString = escapeString;
            exports2.getModificationDate = getModificationDate;
            exports2.getVerbosityLevel = getVerbosityLevel;
            exports2.info = info;
            exports2.isArrayBuffer = isArrayBuffer2;
            exports2.isArrayEqual = isArrayEqual;
            exports2.isAscii = isAscii;
            exports2.isBool = isBool;
            exports2.isNum = isNum;
            exports2.isSameOrigin = isSameOrigin;
            exports2.isString = isString2;
            exports2.objectFromMap = objectFromMap;
            exports2.objectSize = objectSize;
            exports2.removeNullCharacters = removeNullCharacters;
            exports2.setVerbosityLevel = setVerbosityLevel;
            exports2.shadow = shadow;
            exports2.string32 = string32;
            exports2.stringToBytes = stringToBytes;
            exports2.stringToPDFString = stringToPDFString;
            exports2.stringToUTF16BEString = stringToUTF16BEString;
            exports2.stringToUTF8String = stringToUTF8String;
            exports2.unreachable = unreachable;
            exports2.utf8StringToString = utf8StringToString;
            exports2.warn = warn;
            __w_pdfjs_require__2(5);
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _toConsumableArray3(arr) {
              return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread3();
            }
            function _nonIterableSpread3() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArray3(iter) {
              if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                return Array.from(iter);
            }
            function _arrayWithoutHoles3(arr) {
              if (Array.isArray(arr))
                return _arrayLikeToArray3(arr);
            }
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e2) {
                    throw _e2;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e3) {
                didErr = true;
                err = _e3;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
            exports2.IDENTITY_MATRIX = IDENTITY_MATRIX;
            var FONT_IDENTITY_MATRIX = [1e-3, 0, 0, 1e-3, 0, 0];
            exports2.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
            var RenderingIntentFlag = {
              ANY: 1,
              DISPLAY: 2,
              PRINT: 4,
              ANNOTATIONS_FORMS: 16,
              ANNOTATIONS_STORAGE: 32,
              ANNOTATIONS_DISABLE: 64,
              OPLIST: 256
            };
            exports2.RenderingIntentFlag = RenderingIntentFlag;
            var AnnotationMode2 = {
              DISABLE: 0,
              ENABLE: 1,
              ENABLE_FORMS: 2,
              ENABLE_STORAGE: 3
            };
            exports2.AnnotationMode = AnnotationMode2;
            var PermissionFlag = {
              PRINT: 4,
              MODIFY_CONTENTS: 8,
              COPY: 16,
              MODIFY_ANNOTATIONS: 32,
              FILL_INTERACTIVE_FORMS: 256,
              COPY_FOR_ACCESSIBILITY: 512,
              ASSEMBLE: 1024,
              PRINT_HIGH_QUALITY: 2048
            };
            exports2.PermissionFlag = PermissionFlag;
            var TextRenderingMode = {
              FILL: 0,
              STROKE: 1,
              FILL_STROKE: 2,
              INVISIBLE: 3,
              FILL_ADD_TO_PATH: 4,
              STROKE_ADD_TO_PATH: 5,
              FILL_STROKE_ADD_TO_PATH: 6,
              ADD_TO_PATH: 7,
              FILL_STROKE_MASK: 3,
              ADD_TO_PATH_FLAG: 4
            };
            exports2.TextRenderingMode = TextRenderingMode;
            var ImageKind = {
              GRAYSCALE_1BPP: 1,
              RGB_24BPP: 2,
              RGBA_32BPP: 3
            };
            exports2.ImageKind = ImageKind;
            var AnnotationType = {
              TEXT: 1,
              LINK: 2,
              FREETEXT: 3,
              LINE: 4,
              SQUARE: 5,
              CIRCLE: 6,
              POLYGON: 7,
              POLYLINE: 8,
              HIGHLIGHT: 9,
              UNDERLINE: 10,
              SQUIGGLY: 11,
              STRIKEOUT: 12,
              STAMP: 13,
              CARET: 14,
              INK: 15,
              POPUP: 16,
              FILEATTACHMENT: 17,
              SOUND: 18,
              MOVIE: 19,
              WIDGET: 20,
              SCREEN: 21,
              PRINTERMARK: 22,
              TRAPNET: 23,
              WATERMARK: 24,
              THREED: 25,
              REDACT: 26
            };
            exports2.AnnotationType = AnnotationType;
            var AnnotationStateModelType = {
              MARKED: "Marked",
              REVIEW: "Review"
            };
            exports2.AnnotationStateModelType = AnnotationStateModelType;
            var AnnotationMarkedState = {
              MARKED: "Marked",
              UNMARKED: "Unmarked"
            };
            exports2.AnnotationMarkedState = AnnotationMarkedState;
            var AnnotationReviewState = {
              ACCEPTED: "Accepted",
              REJECTED: "Rejected",
              CANCELLED: "Cancelled",
              COMPLETED: "Completed",
              NONE: "None"
            };
            exports2.AnnotationReviewState = AnnotationReviewState;
            var AnnotationReplyType = {
              GROUP: "Group",
              REPLY: "R"
            };
            exports2.AnnotationReplyType = AnnotationReplyType;
            var AnnotationFlag = {
              INVISIBLE: 1,
              HIDDEN: 2,
              PRINT: 4,
              NOZOOM: 8,
              NOROTATE: 16,
              NOVIEW: 32,
              READONLY: 64,
              LOCKED: 128,
              TOGGLENOVIEW: 256,
              LOCKEDCONTENTS: 512
            };
            exports2.AnnotationFlag = AnnotationFlag;
            var AnnotationFieldFlag = {
              READONLY: 1,
              REQUIRED: 2,
              NOEXPORT: 4,
              MULTILINE: 4096,
              PASSWORD: 8192,
              NOTOGGLETOOFF: 16384,
              RADIO: 32768,
              PUSHBUTTON: 65536,
              COMBO: 131072,
              EDIT: 262144,
              SORT: 524288,
              FILESELECT: 1048576,
              MULTISELECT: 2097152,
              DONOTSPELLCHECK: 4194304,
              DONOTSCROLL: 8388608,
              COMB: 16777216,
              RICHTEXT: 33554432,
              RADIOSINUNISON: 33554432,
              COMMITONSELCHANGE: 67108864
            };
            exports2.AnnotationFieldFlag = AnnotationFieldFlag;
            var AnnotationBorderStyleType = {
              SOLID: 1,
              DASHED: 2,
              BEVELED: 3,
              INSET: 4,
              UNDERLINE: 5
            };
            exports2.AnnotationBorderStyleType = AnnotationBorderStyleType;
            var AnnotationActionEventType = {
              E: "Mouse Enter",
              X: "Mouse Exit",
              D: "Mouse Down",
              U: "Mouse Up",
              Fo: "Focus",
              Bl: "Blur",
              PO: "PageOpen",
              PC: "PageClose",
              PV: "PageVisible",
              PI: "PageInvisible",
              K: "Keystroke",
              F: "Format",
              V: "Validate",
              C: "Calculate"
            };
            exports2.AnnotationActionEventType = AnnotationActionEventType;
            var DocumentActionEventType = {
              WC: "WillClose",
              WS: "WillSave",
              DS: "DidSave",
              WP: "WillPrint",
              DP: "DidPrint"
            };
            exports2.DocumentActionEventType = DocumentActionEventType;
            var PageActionEventType = {
              O: "PageOpen",
              C: "PageClose"
            };
            exports2.PageActionEventType = PageActionEventType;
            var StreamType = {
              UNKNOWN: "UNKNOWN",
              FLATE: "FLATE",
              LZW: "LZW",
              DCT: "DCT",
              JPX: "JPX",
              JBIG: "JBIG",
              A85: "A85",
              AHX: "AHX",
              CCF: "CCF",
              RLX: "RLX"
            };
            exports2.StreamType = StreamType;
            var FontType = {
              UNKNOWN: "UNKNOWN",
              TYPE1: "TYPE1",
              TYPE1STANDARD: "TYPE1STANDARD",
              TYPE1C: "TYPE1C",
              CIDFONTTYPE0: "CIDFONTTYPE0",
              CIDFONTTYPE0C: "CIDFONTTYPE0C",
              TRUETYPE: "TRUETYPE",
              CIDFONTTYPE2: "CIDFONTTYPE2",
              TYPE3: "TYPE3",
              OPENTYPE: "OPENTYPE",
              TYPE0: "TYPE0",
              MMTYPE1: "MMTYPE1"
            };
            exports2.FontType = FontType;
            var VerbosityLevel = {
              ERRORS: 0,
              WARNINGS: 1,
              INFOS: 5
            };
            exports2.VerbosityLevel = VerbosityLevel;
            var CMapCompressionType = {
              NONE: 0,
              BINARY: 1,
              STREAM: 2
            };
            exports2.CMapCompressionType = CMapCompressionType;
            var OPS = {
              dependency: 1,
              setLineWidth: 2,
              setLineCap: 3,
              setLineJoin: 4,
              setMiterLimit: 5,
              setDash: 6,
              setRenderingIntent: 7,
              setFlatness: 8,
              setGState: 9,
              save: 10,
              restore: 11,
              transform: 12,
              moveTo: 13,
              lineTo: 14,
              curveTo: 15,
              curveTo2: 16,
              curveTo3: 17,
              closePath: 18,
              rectangle: 19,
              stroke: 20,
              closeStroke: 21,
              fill: 22,
              eoFill: 23,
              fillStroke: 24,
              eoFillStroke: 25,
              closeFillStroke: 26,
              closeEOFillStroke: 27,
              endPath: 28,
              clip: 29,
              eoClip: 30,
              beginText: 31,
              endText: 32,
              setCharSpacing: 33,
              setWordSpacing: 34,
              setHScale: 35,
              setLeading: 36,
              setFont: 37,
              setTextRenderingMode: 38,
              setTextRise: 39,
              moveText: 40,
              setLeadingMoveText: 41,
              setTextMatrix: 42,
              nextLine: 43,
              showText: 44,
              showSpacedText: 45,
              nextLineShowText: 46,
              nextLineSetSpacingShowText: 47,
              setCharWidth: 48,
              setCharWidthAndBounds: 49,
              setStrokeColorSpace: 50,
              setFillColorSpace: 51,
              setStrokeColor: 52,
              setStrokeColorN: 53,
              setFillColor: 54,
              setFillColorN: 55,
              setStrokeGray: 56,
              setFillGray: 57,
              setStrokeRGBColor: 58,
              setFillRGBColor: 59,
              setStrokeCMYKColor: 60,
              setFillCMYKColor: 61,
              shadingFill: 62,
              beginInlineImage: 63,
              beginImageData: 64,
              endInlineImage: 65,
              paintXObject: 66,
              markPoint: 67,
              markPointProps: 68,
              beginMarkedContent: 69,
              beginMarkedContentProps: 70,
              endMarkedContent: 71,
              beginCompat: 72,
              endCompat: 73,
              paintFormXObjectBegin: 74,
              paintFormXObjectEnd: 75,
              beginGroup: 76,
              endGroup: 77,
              beginAnnotations: 78,
              endAnnotations: 79,
              beginAnnotation: 80,
              endAnnotation: 81,
              paintJpegXObject: 82,
              paintImageMaskXObject: 83,
              paintImageMaskXObjectGroup: 84,
              paintImageXObject: 85,
              paintInlineImageXObject: 86,
              paintInlineImageXObjectGroup: 87,
              paintImageXObjectRepeat: 88,
              paintImageMaskXObjectRepeat: 89,
              paintSolidColorImageMask: 90,
              constructPath: 91
            };
            exports2.OPS = OPS;
            var UNSUPPORTED_FEATURES = {
              unknown: "unknown",
              forms: "forms",
              javaScript: "javaScript",
              signatures: "signatures",
              smask: "smask",
              shadingPattern: "shadingPattern",
              font: "font",
              errorTilingPattern: "errorTilingPattern",
              errorExtGState: "errorExtGState",
              errorXObject: "errorXObject",
              errorFontLoadType3: "errorFontLoadType3",
              errorFontState: "errorFontState",
              errorFontMissing: "errorFontMissing",
              errorFontTranslate: "errorFontTranslate",
              errorColorSpace: "errorColorSpace",
              errorOperatorList: "errorOperatorList",
              errorFontToUnicode: "errorFontToUnicode",
              errorFontLoadNative: "errorFontLoadNative",
              errorFontBuildPath: "errorFontBuildPath",
              errorFontGetPath: "errorFontGetPath",
              errorMarkedContent: "errorMarkedContent",
              errorContentSubStream: "errorContentSubStream"
            };
            exports2.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
            var PasswordResponses2 = {
              NEED_PASSWORD: 1,
              INCORRECT_PASSWORD: 2
            };
            exports2.PasswordResponses = PasswordResponses2;
            var verbosity = VerbosityLevel.WARNINGS;
            function setVerbosityLevel(level) {
              if (Number.isInteger(level)) {
                verbosity = level;
              }
            }
            function getVerbosityLevel() {
              return verbosity;
            }
            function info(msg) {
              if (verbosity >= VerbosityLevel.INFOS) {
                console.log("Info: ".concat(msg));
              }
            }
            function warn(msg) {
              if (verbosity >= VerbosityLevel.WARNINGS) {
                console.log("Warning: ".concat(msg));
              }
            }
            function unreachable(msg) {
              throw new Error(msg);
            }
            function assert(cond, msg) {
              if (!cond) {
                unreachable(msg);
              }
            }
            function isSameOrigin(baseUrl, otherUrl) {
              var base;
              try {
                base = new URL(baseUrl);
                if (!base.origin || base.origin === "null") {
                  return false;
                }
              } catch (e) {
                return false;
              }
              var other = new URL(otherUrl, base);
              return base.origin === other.origin;
            }
            function _isValidProtocol(url) {
              if (!url) {
                return false;
              }
              switch (url.protocol) {
                case "http:":
                case "https:":
                case "ftp:":
                case "mailto:":
                case "tel:":
                  return true;
                default:
                  return false;
              }
            }
            function createValidAbsoluteUrl(url) {
              var baseUrl = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              if (!url) {
                return null;
              }
              try {
                if (options && typeof url === "string") {
                  if (options.addDefaultProtocol && url.startsWith("www.")) {
                    var dots = url.match(/\./g);
                    if (dots && dots.length >= 2) {
                      url = "http://".concat(url);
                    }
                  }
                  if (options.tryConvertEncoding) {
                    try {
                      url = stringToUTF8String(url);
                    } catch (ex) {
                    }
                  }
                }
                var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
                if (_isValidProtocol(absoluteUrl)) {
                  return absoluteUrl;
                }
              } catch (ex) {
              }
              return null;
            }
            function shadow(obj, prop, value) {
              Object.defineProperty(obj, prop, {
                value,
                enumerable: true,
                configurable: true,
                writable: false
              });
              return value;
            }
            var BaseException = function BaseExceptionClosure() {
              function BaseException2(message, name) {
                if (this.constructor === BaseException2) {
                  unreachable("Cannot initialize BaseException.");
                }
                this.message = message;
                this.name = name;
              }
              BaseException2.prototype = new Error();
              BaseException2.constructor = BaseException2;
              return BaseException2;
            }();
            exports2.BaseException = BaseException;
            var PasswordException = function(_BaseException) {
              _inherits2(PasswordException2, _BaseException);
              var _super = _createSuper10(PasswordException2);
              function PasswordException2(msg, code) {
                var _this;
                _classCallCheck3(this, PasswordException2);
                _this = _super.call(this, msg, "PasswordException");
                _this.code = code;
                return _this;
              }
              return PasswordException2;
            }(BaseException);
            exports2.PasswordException = PasswordException;
            var UnknownErrorException = function(_BaseException2) {
              _inherits2(UnknownErrorException2, _BaseException2);
              var _super2 = _createSuper10(UnknownErrorException2);
              function UnknownErrorException2(msg, details) {
                var _this2;
                _classCallCheck3(this, UnknownErrorException2);
                _this2 = _super2.call(this, msg, "UnknownErrorException");
                _this2.details = details;
                return _this2;
              }
              return UnknownErrorException2;
            }(BaseException);
            exports2.UnknownErrorException = UnknownErrorException;
            var InvalidPDFException = function(_BaseException3) {
              _inherits2(InvalidPDFException2, _BaseException3);
              var _super3 = _createSuper10(InvalidPDFException2);
              function InvalidPDFException2(msg) {
                _classCallCheck3(this, InvalidPDFException2);
                return _super3.call(this, msg, "InvalidPDFException");
              }
              return InvalidPDFException2;
            }(BaseException);
            exports2.InvalidPDFException = InvalidPDFException;
            var MissingPDFException = function(_BaseException4) {
              _inherits2(MissingPDFException2, _BaseException4);
              var _super4 = _createSuper10(MissingPDFException2);
              function MissingPDFException2(msg) {
                _classCallCheck3(this, MissingPDFException2);
                return _super4.call(this, msg, "MissingPDFException");
              }
              return MissingPDFException2;
            }(BaseException);
            exports2.MissingPDFException = MissingPDFException;
            var UnexpectedResponseException = function(_BaseException5) {
              _inherits2(UnexpectedResponseException2, _BaseException5);
              var _super5 = _createSuper10(UnexpectedResponseException2);
              function UnexpectedResponseException2(msg, status) {
                var _this3;
                _classCallCheck3(this, UnexpectedResponseException2);
                _this3 = _super5.call(this, msg, "UnexpectedResponseException");
                _this3.status = status;
                return _this3;
              }
              return UnexpectedResponseException2;
            }(BaseException);
            exports2.UnexpectedResponseException = UnexpectedResponseException;
            var FormatError = function(_BaseException6) {
              _inherits2(FormatError2, _BaseException6);
              var _super6 = _createSuper10(FormatError2);
              function FormatError2(msg) {
                _classCallCheck3(this, FormatError2);
                return _super6.call(this, msg, "FormatError");
              }
              return FormatError2;
            }(BaseException);
            exports2.FormatError = FormatError;
            var AbortException = function(_BaseException7) {
              _inherits2(AbortException2, _BaseException7);
              var _super7 = _createSuper10(AbortException2);
              function AbortException2(msg) {
                _classCallCheck3(this, AbortException2);
                return _super7.call(this, msg, "AbortException");
              }
              return AbortException2;
            }(BaseException);
            exports2.AbortException = AbortException;
            var NullCharactersRegExp = /\x00+/g;
            var InvisibleCharactersRegExp = /[\x01-\x1F]/g;
            function removeNullCharacters(str) {
              var replaceInvisible = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (typeof str !== "string") {
                warn("The argument for removeNullCharacters must be a string.");
                return str;
              }
              if (replaceInvisible) {
                str = str.replace(InvisibleCharactersRegExp, " ");
              }
              return str.replace(NullCharactersRegExp, "");
            }
            function bytesToString(bytes) {
              assert(bytes !== null && _typeof3(bytes) === "object" && bytes.length !== void 0, "Invalid argument for bytesToString");
              var length = bytes.length;
              var MAX_ARGUMENT_COUNT = 8192;
              if (length < MAX_ARGUMENT_COUNT) {
                return String.fromCharCode.apply(null, bytes);
              }
              var strBuf = [];
              for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
                var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
                var chunk = bytes.subarray(i, chunkEnd);
                strBuf.push(String.fromCharCode.apply(null, chunk));
              }
              return strBuf.join("");
            }
            function stringToBytes(str) {
              assert(typeof str === "string", "Invalid argument for stringToBytes");
              var length = str.length;
              var bytes = new Uint8Array(length);
              for (var i = 0; i < length; ++i) {
                bytes[i] = str.charCodeAt(i) & 255;
              }
              return bytes;
            }
            function arrayByteLength(arr) {
              if (arr.length !== void 0) {
                return arr.length;
              }
              assert(arr.byteLength !== void 0, "arrayByteLength - invalid argument.");
              return arr.byteLength;
            }
            function arraysToBytes(arr) {
              var length = arr.length;
              if (length === 1 && arr[0] instanceof Uint8Array) {
                return arr[0];
              }
              var resultLength = 0;
              for (var i = 0; i < length; i++) {
                resultLength += arrayByteLength(arr[i]);
              }
              var pos = 0;
              var data = new Uint8Array(resultLength);
              for (var _i = 0; _i < length; _i++) {
                var item = arr[_i];
                if (!(item instanceof Uint8Array)) {
                  if (typeof item === "string") {
                    item = stringToBytes(item);
                  } else {
                    item = new Uint8Array(item);
                  }
                }
                var itemLength = item.byteLength;
                data.set(item, pos);
                pos += itemLength;
              }
              return data;
            }
            function string32(value) {
              return String.fromCharCode(value >> 24 & 255, value >> 16 & 255, value >> 8 & 255, value & 255);
            }
            function objectSize(obj) {
              return Object.keys(obj).length;
            }
            function objectFromMap(map) {
              var obj = /* @__PURE__ */ Object.create(null);
              var _iterator = _createForOfIteratorHelper2(map), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var _step$value = _slicedToArray3(_step.value, 2), key = _step$value[0], value = _step$value[1];
                  obj[key] = value;
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              return obj;
            }
            function isLittleEndian() {
              var buffer8 = new Uint8Array(4);
              buffer8[0] = 1;
              var view32 = new Uint32Array(buffer8.buffer, 0, 1);
              return view32[0] === 1;
            }
            var IsLittleEndianCached = {
              get value() {
                return shadow(this, "value", isLittleEndian());
              }
            };
            exports2.IsLittleEndianCached = IsLittleEndianCached;
            function isEvalSupported() {
              try {
                new Function("");
                return true;
              } catch (e) {
                return false;
              }
            }
            var IsEvalSupportedCached = {
              get value() {
                return shadow(this, "value", isEvalSupported());
              }
            };
            exports2.IsEvalSupportedCached = IsEvalSupportedCached;
            var hexNumbers = _toConsumableArray3(Array(256).keys()).map(function(n) {
              return n.toString(16).padStart(2, "0");
            });
            var Util = function() {
              function Util2() {
                _classCallCheck3(this, Util2);
              }
              _createClass3(Util2, null, [{
                key: "makeHexColor",
                value: function makeHexColor(r, g, b) {
                  return "#".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);
                }
              }, {
                key: "transform",
                value: function transform(m1, m2) {
                  return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
                }
              }, {
                key: "applyTransform",
                value: function applyTransform(p, m) {
                  var xt = p[0] * m[0] + p[1] * m[2] + m[4];
                  var yt = p[0] * m[1] + p[1] * m[3] + m[5];
                  return [xt, yt];
                }
              }, {
                key: "applyInverseTransform",
                value: function applyInverseTransform(p, m) {
                  var d = m[0] * m[3] - m[1] * m[2];
                  var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
                  var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
                  return [xt, yt];
                }
              }, {
                key: "getAxialAlignedBoundingBox",
                value: function getAxialAlignedBoundingBox(r, m) {
                  var p1 = Util2.applyTransform(r, m);
                  var p2 = Util2.applyTransform(r.slice(2, 4), m);
                  var p3 = Util2.applyTransform([r[0], r[3]], m);
                  var p4 = Util2.applyTransform([r[2], r[1]], m);
                  return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
                }
              }, {
                key: "inverseTransform",
                value: function inverseTransform(m) {
                  var d = m[0] * m[3] - m[1] * m[2];
                  return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
                }
              }, {
                key: "apply3dTransform",
                value: function apply3dTransform(m, v) {
                  return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
                }
              }, {
                key: "singularValueDecompose2dScale",
                value: function singularValueDecompose2dScale(m) {
                  var transpose = [m[0], m[2], m[1], m[3]];
                  var a = m[0] * transpose[0] + m[1] * transpose[2];
                  var b = m[0] * transpose[1] + m[1] * transpose[3];
                  var c = m[2] * transpose[0] + m[3] * transpose[2];
                  var d = m[2] * transpose[1] + m[3] * transpose[3];
                  var first = (a + d) / 2;
                  var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;
                  var sx = first + second || 1;
                  var sy = first - second || 1;
                  return [Math.sqrt(sx), Math.sqrt(sy)];
                }
              }, {
                key: "normalizeRect",
                value: function normalizeRect(rect) {
                  var r = rect.slice(0);
                  if (rect[0] > rect[2]) {
                    r[0] = rect[2];
                    r[2] = rect[0];
                  }
                  if (rect[1] > rect[3]) {
                    r[1] = rect[3];
                    r[3] = rect[1];
                  }
                  return r;
                }
              }, {
                key: "intersect",
                value: function intersect(rect1, rect2) {
                  function compare(a, b) {
                    return a - b;
                  }
                  var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);
                  var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);
                  var result = [];
                  rect1 = Util2.normalizeRect(rect1);
                  rect2 = Util2.normalizeRect(rect2);
                  if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
                    result[0] = orderedX[1];
                    result[2] = orderedX[2];
                  } else {
                    return null;
                  }
                  if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
                    result[1] = orderedY[1];
                    result[3] = orderedY[2];
                  } else {
                    return null;
                  }
                  return result;
                }
              }, {
                key: "bezierBoundingBox",
                value: function bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {
                  var tvalues = [], bounds = [[], []];
                  var a, b, c, t, t1, t2, b2ac, sqrtb2ac;
                  for (var i = 0; i < 2; ++i) {
                    if (i === 0) {
                      b = 6 * x0 - 12 * x1 + 6 * x2;
                      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
                      c = 3 * x1 - 3 * x0;
                    } else {
                      b = 6 * y0 - 12 * y1 + 6 * y2;
                      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
                      c = 3 * y1 - 3 * y0;
                    }
                    if (Math.abs(a) < 1e-12) {
                      if (Math.abs(b) < 1e-12) {
                        continue;
                      }
                      t = -c / b;
                      if (0 < t && t < 1) {
                        tvalues.push(t);
                      }
                      continue;
                    }
                    b2ac = b * b - 4 * c * a;
                    sqrtb2ac = Math.sqrt(b2ac);
                    if (b2ac < 0) {
                      continue;
                    }
                    t1 = (-b + sqrtb2ac) / (2 * a);
                    if (0 < t1 && t1 < 1) {
                      tvalues.push(t1);
                    }
                    t2 = (-b - sqrtb2ac) / (2 * a);
                    if (0 < t2 && t2 < 1) {
                      tvalues.push(t2);
                    }
                  }
                  var j = tvalues.length, mt;
                  var jlen = j;
                  while (j--) {
                    t = tvalues[j];
                    mt = 1 - t;
                    bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
                    bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
                  }
                  bounds[0][jlen] = x0;
                  bounds[1][jlen] = y0;
                  bounds[0][jlen + 1] = x3;
                  bounds[1][jlen + 1] = y3;
                  bounds[0].length = bounds[1].length = jlen + 2;
                  return [Math.min.apply(Math, _toConsumableArray3(bounds[0])), Math.min.apply(Math, _toConsumableArray3(bounds[1])), Math.max.apply(Math, _toConsumableArray3(bounds[0])), Math.max.apply(Math, _toConsumableArray3(bounds[1]))];
                }
              }]);
              return Util2;
            }();
            exports2.Util = Util;
            var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364];
            function stringToPDFString(str) {
              var length = str.length, strBuf = [];
              if (str[0] === "\xFE" && str[1] === "\xFF") {
                for (var i = 2; i < length; i += 2) {
                  strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
                }
              } else if (str[0] === "\xFF" && str[1] === "\xFE") {
                for (var _i2 = 2; _i2 < length; _i2 += 2) {
                  strBuf.push(String.fromCharCode(str.charCodeAt(_i2 + 1) << 8 | str.charCodeAt(_i2)));
                }
              } else {
                for (var _i3 = 0; _i3 < length; ++_i3) {
                  var code = PDFStringTranslateTable[str.charCodeAt(_i3)];
                  strBuf.push(code ? String.fromCharCode(code) : str.charAt(_i3));
                }
              }
              return strBuf.join("");
            }
            function escapeString(str) {
              return str.replace(/([()\\\n\r])/g, function(match) {
                if (match === "\n") {
                  return "\\n";
                } else if (match === "\r") {
                  return "\\r";
                }
                return "\\".concat(match);
              });
            }
            function isAscii(str) {
              return /^[\x00-\x7F]*$/.test(str);
            }
            function stringToUTF16BEString(str) {
              var buf = ["\xFE\xFF"];
              for (var i = 0, ii = str.length; i < ii; i++) {
                var _char = str.charCodeAt(i);
                buf.push(String.fromCharCode(_char >> 8 & 255), String.fromCharCode(_char & 255));
              }
              return buf.join("");
            }
            function stringToUTF8String(str) {
              return decodeURIComponent(escape(str));
            }
            function utf8StringToString(str) {
              return unescape(encodeURIComponent(str));
            }
            function isBool(v) {
              return typeof v === "boolean";
            }
            function isNum(v) {
              return typeof v === "number";
            }
            function isString2(v) {
              return typeof v === "string";
            }
            function isArrayBuffer2(v) {
              return _typeof3(v) === "object" && v !== null && v.byteLength !== void 0;
            }
            function isArrayEqual(arr1, arr2) {
              if (arr1.length !== arr2.length) {
                return false;
              }
              for (var i = 0, ii = arr1.length; i < ii; i++) {
                if (arr1[i] !== arr2[i]) {
                  return false;
                }
              }
              return true;
            }
            function getModificationDate() {
              var date = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new Date();
              var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
              return buffer.join("");
            }
            function createPromiseCapability() {
              var capability = /* @__PURE__ */ Object.create(null);
              var isSettled = false;
              Object.defineProperty(capability, "settled", {
                get: function get2() {
                  return isSettled;
                }
              });
              capability.promise = new Promise(function(resolve, reject) {
                capability.resolve = function(data) {
                  isSettled = true;
                  resolve(data);
                };
                capability.reject = function(reason) {
                  isSettled = true;
                  reject(reason);
                };
              });
              return capability;
            }
            function createObjectURL(data) {
              var contentType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
              var forceDataSchema = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              if (URL.createObjectURL && typeof Blob !== "undefined" && !forceDataSchema) {
                return URL.createObjectURL(new Blob([data], {
                  type: contentType
                }));
              }
              var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
              var buffer = "data:".concat(contentType, ";base64,");
              for (var i = 0, ii = data.length; i < ii; i += 3) {
                var b1 = data[i] & 255;
                var b2 = data[i + 1] & 255;
                var b3 = data[i + 2] & 255;
                var d1 = b1 >> 2, d2 = (b1 & 3) << 4 | b2 >> 4;
                var d3 = i + 1 < ii ? (b2 & 15) << 2 | b3 >> 6 : 64;
                var d4 = i + 2 < ii ? b3 & 63 : 64;
                buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
              }
              return buffer;
            }
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var _is_node2 = __w_pdfjs_require__2(6);
            if (typeof globalThis === "undefined" || !globalThis._pdfjsCompatibilityChecked) {
              if (typeof globalThis === "undefined" || globalThis.Math !== Math) {
                globalThis = __w_pdfjs_require__2(7);
              }
              globalThis._pdfjsCompatibilityChecked = true;
              (function checkNodeBtoa() {
                if (globalThis.btoa || !_is_node2.isNodeJS) {
                  return;
                }
                globalThis.btoa = function(chars) {
                  return Buffer.from(chars, "binary").toString("base64");
                };
              })();
              (function checkNodeAtob() {
                if (globalThis.atob || !_is_node2.isNodeJS) {
                  return;
                }
                globalThis.atob = function(input) {
                  return Buffer.from(input, "base64").toString("binary");
                };
              })();
              (function checkDOMMatrix() {
                if (globalThis.DOMMatrix || !_is_node2.isNodeJS) {
                  return;
                }
                globalThis.DOMMatrix = __w_pdfjs_require__2(69);
              })();
              (function checkObjectFromEntries() {
                if (Object.fromEntries) {
                  return;
                }
                __w_pdfjs_require__2(70);
              })();
              (function checkPromise() {
                if (globalThis.Promise.allSettled) {
                  return;
                }
                globalThis.Promise = __w_pdfjs_require__2(97);
              })();
              (function checkReadableStream() {
                if (globalThis.ReadableStream || !_is_node2.isNodeJS) {
                  return;
                }
                globalThis.ReadableStream = __w_pdfjs_require__2(134).ReadableStream;
              })();
            }
          },
          (__unused_webpack_module2, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.isNodeJS = void 0;
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            var isNodeJS = (typeof process === "undefined" ? "undefined" : _typeof3(process)) === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
            exports2.isNodeJS = isNodeJS;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            __w_pdfjs_require__2(8);
            module2.exports = __w_pdfjs_require__2(10);
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var $ = __w_pdfjs_require__2(9);
            var global2 = __w_pdfjs_require__2(10);
            $({ global: true }, { globalThis: global2 });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var getOwnPropertyDescriptor = __w_pdfjs_require__2(11).f;
            var createNonEnumerableProperty = __w_pdfjs_require__2(47);
            var redefine = __w_pdfjs_require__2(50);
            var setGlobal = __w_pdfjs_require__2(41);
            var copyConstructorProperties = __w_pdfjs_require__2(57);
            var isForced = __w_pdfjs_require__2(68);
            module2.exports = function(options, source) {
              var TARGET = options.target;
              var GLOBAL = options.global;
              var STATIC = options.stat;
              var FORCED, target, key, targetProperty, sourceProperty, descriptor;
              if (GLOBAL) {
                target = global2;
              } else if (STATIC) {
                target = global2[TARGET] || setGlobal(TARGET, {});
              } else {
                target = (global2[TARGET] || {}).prototype;
              }
              if (target)
                for (key in source) {
                  sourceProperty = source[key];
                  if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor(target, key);
                    targetProperty = descriptor && descriptor.value;
                  } else
                    targetProperty = target[key];
                  FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
                  if (!FORCED && targetProperty !== void 0) {
                    if (typeof sourceProperty == typeof targetProperty)
                      continue;
                    copyConstructorProperties(sourceProperty, targetProperty);
                  }
                  if (options.sham || targetProperty && targetProperty.sham) {
                    createNonEnumerableProperty(sourceProperty, "sham", true);
                  }
                  redefine(target, key, sourceProperty, options);
                }
            };
          },
          (module2) => {
            var check = function(it) {
              return it && it.Math == Math && it;
            };
            module2.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
              return this;
            }() || Function("return this")();
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var call = __w_pdfjs_require__2(14);
            var propertyIsEnumerableModule = __w_pdfjs_require__2(15);
            var createPropertyDescriptor = __w_pdfjs_require__2(16);
            var toIndexedObject = __w_pdfjs_require__2(17);
            var toPropertyKey = __w_pdfjs_require__2(22);
            var hasOwn = __w_pdfjs_require__2(42);
            var IE8_DOM_DEFINE = __w_pdfjs_require__2(45);
            var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            exports2.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
              O = toIndexedObject(O);
              P = toPropertyKey(P);
              if (IE8_DOM_DEFINE)
                try {
                  return $getOwnPropertyDescriptor(O, P);
                } catch (error) {
                }
              if (hasOwn(O, P))
                return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var fails = __w_pdfjs_require__2(13);
            module2.exports = !fails(function() {
              return Object.defineProperty({}, 1, {
                get: function() {
                  return 7;
                }
              })[1] != 7;
            });
          },
          (module2) => {
            module2.exports = function(exec) {
              try {
                return !!exec();
              } catch (error) {
                return true;
              }
            };
          },
          (module2) => {
            var call = Function.prototype.call;
            module2.exports = call.bind ? call.bind(call) : function() {
              return call.apply(call, arguments);
            };
          },
          (__unused_webpack_module2, exports2) => {
            "use strict";
            var $propertyIsEnumerable = {}.propertyIsEnumerable;
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
            exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
              var descriptor = getOwnPropertyDescriptor(this, V);
              return !!descriptor && descriptor.enumerable;
            } : $propertyIsEnumerable;
          },
          (module2) => {
            module2.exports = function(bitmap, value) {
              return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value
              };
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var IndexedObject = __w_pdfjs_require__2(18);
            var requireObjectCoercible = __w_pdfjs_require__2(21);
            module2.exports = function(it) {
              return IndexedObject(requireObjectCoercible(it));
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var uncurryThis = __w_pdfjs_require__2(19);
            var fails = __w_pdfjs_require__2(13);
            var classof = __w_pdfjs_require__2(20);
            var Object2 = global2.Object;
            var split = uncurryThis("".split);
            module2.exports = fails(function() {
              return !Object2("z").propertyIsEnumerable(0);
            }) ? function(it) {
              return classof(it) == "String" ? split(it, "") : Object2(it);
            } : Object2;
          },
          (module2) => {
            var FunctionPrototype = Function.prototype;
            var bind = FunctionPrototype.bind;
            var call = FunctionPrototype.call;
            var callBind = bind && bind.bind(call);
            module2.exports = bind ? function(fn) {
              return fn && callBind(call, fn);
            } : function(fn) {
              return fn && function() {
                return call.apply(fn, arguments);
              };
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var toString = uncurryThis({}.toString);
            var stringSlice = uncurryThis("".slice);
            module2.exports = function(it) {
              return stringSlice(toString(it), 8, -1);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var TypeError2 = global2.TypeError;
            module2.exports = function(it) {
              if (it == void 0)
                throw TypeError2("Can't call method on " + it);
              return it;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var toPrimitive = __w_pdfjs_require__2(23);
            var isSymbol = __w_pdfjs_require__2(26);
            module2.exports = function(argument) {
              var key = toPrimitive(argument, "string");
              return isSymbol(key) ? key : key + "";
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var call = __w_pdfjs_require__2(14);
            var isObject = __w_pdfjs_require__2(24);
            var isSymbol = __w_pdfjs_require__2(26);
            var getMethod = __w_pdfjs_require__2(33);
            var ordinaryToPrimitive = __w_pdfjs_require__2(36);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var TypeError2 = global2.TypeError;
            var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
            module2.exports = function(input, pref) {
              if (!isObject(input) || isSymbol(input))
                return input;
              var exoticToPrim = getMethod(input, TO_PRIMITIVE);
              var result;
              if (exoticToPrim) {
                if (pref === void 0)
                  pref = "default";
                result = call(exoticToPrim, input, pref);
                if (!isObject(result) || isSymbol(result))
                  return result;
                throw TypeError2("Can't convert object to primitive value");
              }
              if (pref === void 0)
                pref = "number";
              return ordinaryToPrimitive(input, pref);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var isCallable = __w_pdfjs_require__2(25);
            module2.exports = function(it) {
              return typeof it == "object" ? it !== null : isCallable(it);
            };
          },
          (module2) => {
            module2.exports = function(argument) {
              return typeof argument == "function";
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var getBuiltIn = __w_pdfjs_require__2(27);
            var isCallable = __w_pdfjs_require__2(25);
            var isPrototypeOf = __w_pdfjs_require__2(28);
            var USE_SYMBOL_AS_UID = __w_pdfjs_require__2(29);
            var Object2 = global2.Object;
            module2.exports = USE_SYMBOL_AS_UID ? function(it) {
              return typeof it == "symbol";
            } : function(it) {
              var $Symbol = getBuiltIn("Symbol");
              return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object2(it));
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isCallable = __w_pdfjs_require__2(25);
            var aFunction = function(argument) {
              return isCallable(argument) ? argument : void 0;
            };
            module2.exports = function(namespace, method) {
              return arguments.length < 2 ? aFunction(global2[namespace]) : global2[namespace] && global2[namespace][method];
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            module2.exports = uncurryThis({}.isPrototypeOf);
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var NATIVE_SYMBOL = __w_pdfjs_require__2(30);
            module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var V8_VERSION = __w_pdfjs_require__2(31);
            var fails = __w_pdfjs_require__2(13);
            module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
              var symbol = Symbol();
              return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var userAgent = __w_pdfjs_require__2(32);
            var process2 = global2.process;
            var Deno = global2.Deno;
            var versions = process2 && process2.versions || Deno && Deno.version;
            var v8 = versions && versions.v8;
            var match, version2;
            if (v8) {
              match = v8.split(".");
              version2 = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
            }
            if (!version2 && userAgent) {
              match = userAgent.match(/Edge\/(\d+)/);
              if (!match || match[1] >= 74) {
                match = userAgent.match(/Chrome\/(\d+)/);
                if (match)
                  version2 = +match[1];
              }
            }
            module2.exports = version2;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var getBuiltIn = __w_pdfjs_require__2(27);
            module2.exports = getBuiltIn("navigator", "userAgent") || "";
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var aCallable = __w_pdfjs_require__2(34);
            module2.exports = function(V, P) {
              var func = V[P];
              return func == null ? void 0 : aCallable(func);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isCallable = __w_pdfjs_require__2(25);
            var tryToString = __w_pdfjs_require__2(35);
            var TypeError2 = global2.TypeError;
            module2.exports = function(argument) {
              if (isCallable(argument))
                return argument;
              throw TypeError2(tryToString(argument) + " is not a function");
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var String2 = global2.String;
            module2.exports = function(argument) {
              try {
                return String2(argument);
              } catch (error) {
                return "Object";
              }
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var call = __w_pdfjs_require__2(14);
            var isCallable = __w_pdfjs_require__2(25);
            var isObject = __w_pdfjs_require__2(24);
            var TypeError2 = global2.TypeError;
            module2.exports = function(input, pref) {
              var fn, val;
              if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
                return val;
              if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
                return val;
              if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
                return val;
              throw TypeError2("Can't convert object to primitive value");
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var shared = __w_pdfjs_require__2(38);
            var hasOwn = __w_pdfjs_require__2(42);
            var uid = __w_pdfjs_require__2(44);
            var NATIVE_SYMBOL = __w_pdfjs_require__2(30);
            var USE_SYMBOL_AS_UID = __w_pdfjs_require__2(29);
            var WellKnownSymbolsStore = shared("wks");
            var Symbol2 = global2.Symbol;
            var symbolFor = Symbol2 && Symbol2["for"];
            var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
            module2.exports = function(name) {
              if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
                var description = "Symbol." + name;
                if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
                  WellKnownSymbolsStore[name] = Symbol2[name];
                } else if (USE_SYMBOL_AS_UID && symbolFor) {
                  WellKnownSymbolsStore[name] = symbolFor(description);
                } else {
                  WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
                }
              }
              return WellKnownSymbolsStore[name];
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var IS_PURE = __w_pdfjs_require__2(39);
            var store = __w_pdfjs_require__2(40);
            (module2.exports = function(key, value) {
              return store[key] || (store[key] = value !== void 0 ? value : {});
            })("versions", []).push({
              version: "3.19.3",
              mode: IS_PURE ? "pure" : "global",
              copyright: "\xA9 2021 Denis Pushkarev (zloirock.ru)"
            });
          },
          (module2) => {
            module2.exports = false;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var setGlobal = __w_pdfjs_require__2(41);
            var SHARED = "__core-js_shared__";
            var store = global2[SHARED] || setGlobal(SHARED, {});
            module2.exports = store;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var defineProperty = Object.defineProperty;
            module2.exports = function(key, value) {
              try {
                defineProperty(global2, key, {
                  value,
                  configurable: true,
                  writable: true
                });
              } catch (error) {
                global2[key] = value;
              }
              return value;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var toObject = __w_pdfjs_require__2(43);
            var hasOwnProperty = uncurryThis({}.hasOwnProperty);
            module2.exports = Object.hasOwn || function hasOwn(it, key) {
              return hasOwnProperty(toObject(it), key);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var requireObjectCoercible = __w_pdfjs_require__2(21);
            var Object2 = global2.Object;
            module2.exports = function(argument) {
              return Object2(requireObjectCoercible(argument));
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var id = 0;
            var postfix = Math.random();
            var toString = uncurryThis(1 .toString);
            module2.exports = function(key) {
              return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var fails = __w_pdfjs_require__2(13);
            var createElement = __w_pdfjs_require__2(46);
            module2.exports = !DESCRIPTORS && !fails(function() {
              return Object.defineProperty(createElement("div"), "a", {
                get: function() {
                  return 7;
                }
              }).a != 7;
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isObject = __w_pdfjs_require__2(24);
            var document2 = global2.document;
            var EXISTS = isObject(document2) && isObject(document2.createElement);
            module2.exports = function(it) {
              return EXISTS ? document2.createElement(it) : {};
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var definePropertyModule = __w_pdfjs_require__2(48);
            var createPropertyDescriptor = __w_pdfjs_require__2(16);
            module2.exports = DESCRIPTORS ? function(object, key, value) {
              return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
            } : function(object, key, value) {
              object[key] = value;
              return object;
            };
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var IE8_DOM_DEFINE = __w_pdfjs_require__2(45);
            var anObject = __w_pdfjs_require__2(49);
            var toPropertyKey = __w_pdfjs_require__2(22);
            var TypeError2 = global2.TypeError;
            var $defineProperty = Object.defineProperty;
            exports2.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPropertyKey(P);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return $defineProperty(O, P, Attributes);
                } catch (error) {
                }
              if ("get" in Attributes || "set" in Attributes)
                throw TypeError2("Accessors not supported");
              if ("value" in Attributes)
                O[P] = Attributes.value;
              return O;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isObject = __w_pdfjs_require__2(24);
            var String2 = global2.String;
            var TypeError2 = global2.TypeError;
            module2.exports = function(argument) {
              if (isObject(argument))
                return argument;
              throw TypeError2(String2(argument) + " is not an object");
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isCallable = __w_pdfjs_require__2(25);
            var hasOwn = __w_pdfjs_require__2(42);
            var createNonEnumerableProperty = __w_pdfjs_require__2(47);
            var setGlobal = __w_pdfjs_require__2(41);
            var inspectSource = __w_pdfjs_require__2(51);
            var InternalStateModule = __w_pdfjs_require__2(52);
            var CONFIGURABLE_FUNCTION_NAME = __w_pdfjs_require__2(56).CONFIGURABLE;
            var getInternalState = InternalStateModule.get;
            var enforceInternalState = InternalStateModule.enforce;
            var TEMPLATE = String(String).split("String");
            (module2.exports = function(O, key, value, options) {
              var unsafe = options ? !!options.unsafe : false;
              var simple = options ? !!options.enumerable : false;
              var noTargetGet = options ? !!options.noTargetGet : false;
              var name = options && options.name !== void 0 ? options.name : key;
              var state;
              if (isCallable(value)) {
                if (String(name).slice(0, 7) === "Symbol(") {
                  name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
                }
                if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
                  createNonEnumerableProperty(value, "name", name);
                }
                state = enforceInternalState(value);
                if (!state.source) {
                  state.source = TEMPLATE.join(typeof name == "string" ? name : "");
                }
              }
              if (O === global2) {
                if (simple)
                  O[key] = value;
                else
                  setGlobal(key, value);
                return;
              } else if (!unsafe) {
                delete O[key];
              } else if (!noTargetGet && O[key]) {
                simple = true;
              }
              if (simple)
                O[key] = value;
              else
                createNonEnumerableProperty(O, key, value);
            })(Function.prototype, "toString", function toString() {
              return isCallable(this) && getInternalState(this).source || inspectSource(this);
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var isCallable = __w_pdfjs_require__2(25);
            var store = __w_pdfjs_require__2(40);
            var functionToString = uncurryThis(Function.toString);
            if (!isCallable(store.inspectSource)) {
              store.inspectSource = function(it) {
                return functionToString(it);
              };
            }
            module2.exports = store.inspectSource;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var NATIVE_WEAK_MAP = __w_pdfjs_require__2(53);
            var global2 = __w_pdfjs_require__2(10);
            var uncurryThis = __w_pdfjs_require__2(19);
            var isObject = __w_pdfjs_require__2(24);
            var createNonEnumerableProperty = __w_pdfjs_require__2(47);
            var hasOwn = __w_pdfjs_require__2(42);
            var shared = __w_pdfjs_require__2(40);
            var sharedKey = __w_pdfjs_require__2(54);
            var hiddenKeys = __w_pdfjs_require__2(55);
            var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
            var TypeError2 = global2.TypeError;
            var WeakMap2 = global2.WeakMap;
            var set, get2, has;
            var enforce = function(it) {
              return has(it) ? get2(it) : set(it, {});
            };
            var getterFor = function(TYPE) {
              return function(it) {
                var state;
                if (!isObject(it) || (state = get2(it)).type !== TYPE) {
                  throw TypeError2("Incompatible receiver, " + TYPE + " required");
                }
                return state;
              };
            };
            if (NATIVE_WEAK_MAP || shared.state) {
              var store = shared.state || (shared.state = new WeakMap2());
              var wmget = uncurryThis(store.get);
              var wmhas = uncurryThis(store.has);
              var wmset = uncurryThis(store.set);
              set = function(it, metadata) {
                if (wmhas(store, it))
                  throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
                metadata.facade = it;
                wmset(store, it, metadata);
                return metadata;
              };
              get2 = function(it) {
                return wmget(store, it) || {};
              };
              has = function(it) {
                return wmhas(store, it);
              };
            } else {
              var STATE = sharedKey("state");
              hiddenKeys[STATE] = true;
              set = function(it, metadata) {
                if (hasOwn(it, STATE))
                  throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
                metadata.facade = it;
                createNonEnumerableProperty(it, STATE, metadata);
                return metadata;
              };
              get2 = function(it) {
                return hasOwn(it, STATE) ? it[STATE] : {};
              };
              has = function(it) {
                return hasOwn(it, STATE);
              };
            }
            module2.exports = {
              set,
              get: get2,
              has,
              enforce,
              getterFor
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isCallable = __w_pdfjs_require__2(25);
            var inspectSource = __w_pdfjs_require__2(51);
            var WeakMap2 = global2.WeakMap;
            module2.exports = isCallable(WeakMap2) && /native code/.test(inspectSource(WeakMap2));
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var shared = __w_pdfjs_require__2(38);
            var uid = __w_pdfjs_require__2(44);
            var keys = shared("keys");
            module2.exports = function(key) {
              return keys[key] || (keys[key] = uid(key));
            };
          },
          (module2) => {
            module2.exports = {};
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var hasOwn = __w_pdfjs_require__2(42);
            var FunctionPrototype = Function.prototype;
            var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
            var EXISTS = hasOwn(FunctionPrototype, "name");
            var PROPER = EXISTS && function something() {
            }.name === "something";
            var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
            module2.exports = {
              EXISTS,
              PROPER,
              CONFIGURABLE
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var hasOwn = __w_pdfjs_require__2(42);
            var ownKeys4 = __w_pdfjs_require__2(58);
            var getOwnPropertyDescriptorModule = __w_pdfjs_require__2(11);
            var definePropertyModule = __w_pdfjs_require__2(48);
            module2.exports = function(target, source) {
              var keys = ownKeys4(source);
              var defineProperty = definePropertyModule.f;
              var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (!hasOwn(target, key))
                  defineProperty(target, key, getOwnPropertyDescriptor(source, key));
              }
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var getBuiltIn = __w_pdfjs_require__2(27);
            var uncurryThis = __w_pdfjs_require__2(19);
            var getOwnPropertyNamesModule = __w_pdfjs_require__2(59);
            var getOwnPropertySymbolsModule = __w_pdfjs_require__2(67);
            var anObject = __w_pdfjs_require__2(49);
            var concat = uncurryThis([].concat);
            module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys4(it) {
              var keys = getOwnPropertyNamesModule.f(anObject(it));
              var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
              return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
            };
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            var internalObjectKeys = __w_pdfjs_require__2(60);
            var enumBugKeys = __w_pdfjs_require__2(66);
            var hiddenKeys = enumBugKeys.concat("length", "prototype");
            exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
              return internalObjectKeys(O, hiddenKeys);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var hasOwn = __w_pdfjs_require__2(42);
            var toIndexedObject = __w_pdfjs_require__2(17);
            var indexOf = __w_pdfjs_require__2(61).indexOf;
            var hiddenKeys = __w_pdfjs_require__2(55);
            var push = uncurryThis([].push);
            module2.exports = function(object, names) {
              var O = toIndexedObject(object);
              var i = 0;
              var result = [];
              var key;
              for (key in O)
                !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
              while (names.length > i)
                if (hasOwn(O, key = names[i++])) {
                  ~indexOf(result, key) || push(result, key);
                }
              return result;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var toIndexedObject = __w_pdfjs_require__2(17);
            var toAbsoluteIndex = __w_pdfjs_require__2(62);
            var lengthOfArrayLike = __w_pdfjs_require__2(64);
            var createMethod = function(IS_INCLUDES) {
              return function($this, el, fromIndex) {
                var O = toIndexedObject($this);
                var length = lengthOfArrayLike(O);
                var index = toAbsoluteIndex(fromIndex, length);
                var value;
                if (IS_INCLUDES && el != el)
                  while (length > index) {
                    value = O[index++];
                    if (value != value)
                      return true;
                  }
                else
                  for (; length > index; index++) {
                    if ((IS_INCLUDES || index in O) && O[index] === el)
                      return IS_INCLUDES || index || 0;
                  }
                return !IS_INCLUDES && -1;
              };
            };
            module2.exports = {
              includes: createMethod(true),
              indexOf: createMethod(false)
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var toIntegerOrInfinity = __w_pdfjs_require__2(63);
            var max = Math.max;
            var min = Math.min;
            module2.exports = function(index, length) {
              var integer = toIntegerOrInfinity(index);
              return integer < 0 ? max(integer + length, 0) : min(integer, length);
            };
          },
          (module2) => {
            var ceil = Math.ceil;
            var floor = Math.floor;
            module2.exports = function(argument) {
              var number = +argument;
              return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var toLength = __w_pdfjs_require__2(65);
            module2.exports = function(obj) {
              return toLength(obj.length);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var toIntegerOrInfinity = __w_pdfjs_require__2(63);
            var min = Math.min;
            module2.exports = function(argument) {
              return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
            };
          },
          (module2) => {
            module2.exports = [
              "constructor",
              "hasOwnProperty",
              "isPrototypeOf",
              "propertyIsEnumerable",
              "toLocaleString",
              "toString",
              "valueOf"
            ];
          },
          (__unused_webpack_module2, exports2) => {
            exports2.f = Object.getOwnPropertySymbols;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var fails = __w_pdfjs_require__2(13);
            var isCallable = __w_pdfjs_require__2(25);
            var replacement = /#|\.prototype\./;
            var isForced = function(feature, detection) {
              var value = data[normalize(feature)];
              return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
            };
            var normalize = isForced.normalize = function(string) {
              return String(string).replace(replacement, ".").toLowerCase();
            };
            var data = isForced.data = {};
            var NATIVE = isForced.NATIVE = "N";
            var POLYFILL = isForced.POLYFILL = "P";
            module2.exports = isForced;
          },
          (module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            (function(global2, factory) {
              (false ? 0 : _typeof3(exports2)) === "object" && true ? module2.exports = factory() : true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports2, __w_pdfjs_require__2, exports2, module2) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
            })(void 0, function() {
              "use strict";
              function fromArray(array) {
                var m = new CSSMatrix();
                var a = Array.from(array);
                if (!a.every(function(n) {
                  return !Number.isNaN(n);
                })) {
                  throw TypeError('CSSMatrix: "' + array + '" must only have numbers.');
                }
                if (a.length === 16) {
                  var m11 = a[0];
                  var m12 = a[1];
                  var m13 = a[2];
                  var m14 = a[3];
                  var m21 = a[4];
                  var m22 = a[5];
                  var m23 = a[6];
                  var m24 = a[7];
                  var m31 = a[8];
                  var m32 = a[9];
                  var m33 = a[10];
                  var m34 = a[11];
                  var m41 = a[12];
                  var m42 = a[13];
                  var m43 = a[14];
                  var m44 = a[15];
                  m.m11 = m11;
                  m.a = m11;
                  m.m21 = m21;
                  m.c = m21;
                  m.m31 = m31;
                  m.m41 = m41;
                  m.e = m41;
                  m.m12 = m12;
                  m.b = m12;
                  m.m22 = m22;
                  m.d = m22;
                  m.m32 = m32;
                  m.m42 = m42;
                  m.f = m42;
                  m.m13 = m13;
                  m.m23 = m23;
                  m.m33 = m33;
                  m.m43 = m43;
                  m.m14 = m14;
                  m.m24 = m24;
                  m.m34 = m34;
                  m.m44 = m44;
                } else if (a.length === 6) {
                  var M11 = a[0];
                  var M12 = a[1];
                  var M21 = a[2];
                  var M22 = a[3];
                  var M41 = a[4];
                  var M42 = a[5];
                  m.m11 = M11;
                  m.a = M11;
                  m.m12 = M12;
                  m.b = M12;
                  m.m21 = M21;
                  m.c = M21;
                  m.m22 = M22;
                  m.d = M22;
                  m.m41 = M41;
                  m.e = M41;
                  m.m42 = M42;
                  m.f = M42;
                } else {
                  throw new TypeError("CSSMatrix: expecting an Array of 6/16 values.");
                }
                return m;
              }
              function fromMatrix(m) {
                var keys = Object.keys(new CSSMatrix());
                if (_typeof3(m) === "object" && keys.every(function(k) {
                  return k in m;
                })) {
                  return fromArray([m.m11, m.m12, m.m13, m.m14, m.m21, m.m22, m.m23, m.m24, m.m31, m.m32, m.m33, m.m34, m.m41, m.m42, m.m43, m.m44]);
                }
                throw TypeError('CSSMatrix: "' + m + '" is not a DOMMatrix / CSSMatrix / JSON compatible object.');
              }
              function fromString(source) {
                if (typeof source !== "string") {
                  throw TypeError('CSSMatrix: "' + source + '" is not a string.');
                }
                var str = String(source).replace(/\s/g, "");
                var m = new CSSMatrix();
                var invalidStringError = 'CSSMatrix: invalid transform string "' + source + '"';
                str.split(")").filter(function(f) {
                  return f;
                }).forEach(function(tf) {
                  var ref = tf.split("(");
                  var prop = ref[0];
                  var value = ref[1];
                  if (!value) {
                    throw TypeError(invalidStringError);
                  }
                  var components = value.split(",").map(function(n) {
                    return n.includes("rad") ? parseFloat(n) * (180 / Math.PI) : parseFloat(n);
                  });
                  var x = components[0];
                  var y = components[1];
                  var z = components[2];
                  var a = components[3];
                  var xyz = [x, y, z];
                  var xyza = [x, y, z, a];
                  if (prop === "perspective" && x && [y, z].every(function(n) {
                    return n === void 0;
                  })) {
                    m.m34 = -1 / x;
                  } else if (prop.includes("matrix") && [6, 16].includes(components.length) && components.every(function(n) {
                    return !Number.isNaN(+n);
                  })) {
                    var values = components.map(function(n) {
                      return Math.abs(n) < 1e-6 ? 0 : n;
                    });
                    m = m.multiply(fromArray(values));
                  } else if (prop === "translate3d" && xyz.every(function(n) {
                    return !Number.isNaN(+n);
                  })) {
                    m = m.translate(x, y, z);
                  } else if (prop === "translate" && x && z === void 0) {
                    m = m.translate(x, y || 0, 0);
                  } else if (prop === "rotate3d" && xyza.every(function(n) {
                    return !Number.isNaN(+n);
                  }) && a) {
                    m = m.rotateAxisAngle(x, y, z, a);
                  } else if (prop === "rotate" && x && [y, z].every(function(n) {
                    return n === void 0;
                  })) {
                    m = m.rotate(0, 0, x);
                  } else if (prop === "scale3d" && xyz.every(function(n) {
                    return !Number.isNaN(+n);
                  }) && xyz.some(function(n) {
                    return n !== 1;
                  })) {
                    m = m.scale(x, y, z);
                  } else if (prop === "scale" && !Number.isNaN(x) && x !== 1 && z === void 0) {
                    var nosy = Number.isNaN(+y);
                    var sy = nosy ? x : y;
                    m = m.scale(x, sy, 1);
                  } else if (prop === "skew" && x && z === void 0) {
                    m = m.skewX(x);
                    m = y ? m.skewY(y) : m;
                  } else if (/[XYZ]/.test(prop) && x && [y, z].every(function(n) {
                    return n === void 0;
                  }) && ["translate", "rotate", "scale", "skew"].some(function(p) {
                    return prop.includes(p);
                  })) {
                    if (["skewX", "skewY"].includes(prop)) {
                      m = m[prop](x);
                    } else {
                      var fn = prop.replace(/[XYZ]/, "");
                      var axis = prop.replace(fn, "");
                      var idx = ["X", "Y", "Z"].indexOf(axis);
                      var axeValues = [idx === 0 ? x : 0, idx === 1 ? x : 0, idx === 2 ? x : 0];
                      m = m[fn].apply(m, axeValues);
                    }
                  } else {
                    throw TypeError(invalidStringError);
                  }
                });
                return m;
              }
              function Translate(x, y, z) {
                var m = new CSSMatrix();
                m.m41 = x;
                m.e = x;
                m.m42 = y;
                m.f = y;
                m.m43 = z;
                return m;
              }
              function Rotate(rx, ry, rz) {
                var m = new CSSMatrix();
                var degToRad = Math.PI / 180;
                var radX = rx * degToRad;
                var radY = ry * degToRad;
                var radZ = rz * degToRad;
                var cosx = Math.cos(radX);
                var sinx = -Math.sin(radX);
                var cosy = Math.cos(radY);
                var siny = -Math.sin(radY);
                var cosz = Math.cos(radZ);
                var sinz = -Math.sin(radZ);
                var m11 = cosy * cosz;
                var m12 = -cosy * sinz;
                m.m11 = m11;
                m.a = m11;
                m.m12 = m12;
                m.b = m12;
                m.m13 = siny;
                var m21 = sinx * siny * cosz + cosx * sinz;
                m.m21 = m21;
                m.c = m21;
                var m22 = cosx * cosz - sinx * siny * sinz;
                m.m22 = m22;
                m.d = m22;
                m.m23 = -sinx * cosy;
                m.m31 = sinx * sinz - cosx * siny * cosz;
                m.m32 = sinx * cosz + cosx * siny * sinz;
                m.m33 = cosx * cosy;
                return m;
              }
              function RotateAxisAngle(x, y, z, alpha) {
                var m = new CSSMatrix();
                var angle = alpha * (Math.PI / 360);
                var sinA = Math.sin(angle);
                var cosA = Math.cos(angle);
                var sinA2 = sinA * sinA;
                var length = Math.sqrt(x * x + y * y + z * z);
                var X = x;
                var Y = y;
                var Z = z;
                if (length === 0) {
                  X = 0;
                  Y = 0;
                  Z = 1;
                } else {
                  X /= length;
                  Y /= length;
                  Z /= length;
                }
                var x2 = X * X;
                var y2 = Y * Y;
                var z2 = Z * Z;
                var m11 = 1 - 2 * (y2 + z2) * sinA2;
                m.m11 = m11;
                m.a = m11;
                var m12 = 2 * (X * Y * sinA2 + Z * sinA * cosA);
                m.m12 = m12;
                m.b = m12;
                m.m13 = 2 * (X * Z * sinA2 - Y * sinA * cosA);
                var m21 = 2 * (Y * X * sinA2 - Z * sinA * cosA);
                m.m21 = m21;
                m.c = m21;
                var m22 = 1 - 2 * (z2 + x2) * sinA2;
                m.m22 = m22;
                m.d = m22;
                m.m23 = 2 * (Y * Z * sinA2 + X * sinA * cosA);
                m.m31 = 2 * (Z * X * sinA2 + Y * sinA * cosA);
                m.m32 = 2 * (Z * Y * sinA2 - X * sinA * cosA);
                m.m33 = 1 - 2 * (x2 + y2) * sinA2;
                return m;
              }
              function Scale(x, y, z) {
                var m = new CSSMatrix();
                m.m11 = x;
                m.a = x;
                m.m22 = y;
                m.d = y;
                m.m33 = z;
                return m;
              }
              function SkewX(angle) {
                var m = new CSSMatrix();
                var radA = angle * Math.PI / 180;
                var t = Math.tan(radA);
                m.m21 = t;
                m.c = t;
                return m;
              }
              function SkewY(angle) {
                var m = new CSSMatrix();
                var radA = angle * Math.PI / 180;
                var t = Math.tan(radA);
                m.m12 = t;
                m.b = t;
                return m;
              }
              function Multiply(m1, m2) {
                var m11 = m2.m11 * m1.m11 + m2.m12 * m1.m21 + m2.m13 * m1.m31 + m2.m14 * m1.m41;
                var m12 = m2.m11 * m1.m12 + m2.m12 * m1.m22 + m2.m13 * m1.m32 + m2.m14 * m1.m42;
                var m13 = m2.m11 * m1.m13 + m2.m12 * m1.m23 + m2.m13 * m1.m33 + m2.m14 * m1.m43;
                var m14 = m2.m11 * m1.m14 + m2.m12 * m1.m24 + m2.m13 * m1.m34 + m2.m14 * m1.m44;
                var m21 = m2.m21 * m1.m11 + m2.m22 * m1.m21 + m2.m23 * m1.m31 + m2.m24 * m1.m41;
                var m22 = m2.m21 * m1.m12 + m2.m22 * m1.m22 + m2.m23 * m1.m32 + m2.m24 * m1.m42;
                var m23 = m2.m21 * m1.m13 + m2.m22 * m1.m23 + m2.m23 * m1.m33 + m2.m24 * m1.m43;
                var m24 = m2.m21 * m1.m14 + m2.m22 * m1.m24 + m2.m23 * m1.m34 + m2.m24 * m1.m44;
                var m31 = m2.m31 * m1.m11 + m2.m32 * m1.m21 + m2.m33 * m1.m31 + m2.m34 * m1.m41;
                var m32 = m2.m31 * m1.m12 + m2.m32 * m1.m22 + m2.m33 * m1.m32 + m2.m34 * m1.m42;
                var m33 = m2.m31 * m1.m13 + m2.m32 * m1.m23 + m2.m33 * m1.m33 + m2.m34 * m1.m43;
                var m34 = m2.m31 * m1.m14 + m2.m32 * m1.m24 + m2.m33 * m1.m34 + m2.m34 * m1.m44;
                var m41 = m2.m41 * m1.m11 + m2.m42 * m1.m21 + m2.m43 * m1.m31 + m2.m44 * m1.m41;
                var m42 = m2.m41 * m1.m12 + m2.m42 * m1.m22 + m2.m43 * m1.m32 + m2.m44 * m1.m42;
                var m43 = m2.m41 * m1.m13 + m2.m42 * m1.m23 + m2.m43 * m1.m33 + m2.m44 * m1.m43;
                var m44 = m2.m41 * m1.m14 + m2.m42 * m1.m24 + m2.m43 * m1.m34 + m2.m44 * m1.m44;
                return fromArray([m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44]);
              }
              var CSSMatrix = function CSSMatrix2() {
                var args = [], len = arguments.length;
                while (len--) {
                  args[len] = arguments[len];
                }
                var m = this;
                m.a = 1;
                m.b = 0;
                m.c = 0;
                m.d = 1;
                m.e = 0;
                m.f = 0;
                m.m11 = 1;
                m.m12 = 0;
                m.m13 = 0;
                m.m14 = 0;
                m.m21 = 0;
                m.m22 = 1;
                m.m23 = 0;
                m.m24 = 0;
                m.m31 = 0;
                m.m32 = 0;
                m.m33 = 1;
                m.m34 = 0;
                m.m41 = 0;
                m.m42 = 0;
                m.m43 = 0;
                m.m44 = 1;
                if (args && args.length) {
                  var ARGS = [16, 6].some(function(l) {
                    return l === args.length;
                  }) ? args : args[0];
                  return m.setMatrixValue(ARGS);
                }
                return m;
              };
              var prototypeAccessors = {
                isIdentity: {
                  configurable: true
                },
                is2D: {
                  configurable: true
                }
              };
              prototypeAccessors.isIdentity.set = function(value) {
                this.isIdentity = value;
              };
              prototypeAccessors.isIdentity.get = function() {
                var m = this;
                return m.m11 === 1 && m.m12 === 0 && m.m13 === 0 && m.m14 === 0 && m.m21 === 0 && m.m22 === 1 && m.m23 === 0 && m.m24 === 0 && m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m41 === 0 && m.m42 === 0 && m.m43 === 0 && m.m44 === 1;
              };
              prototypeAccessors.is2D.get = function() {
                var m = this;
                return m.m31 === 0 && m.m32 === 0 && m.m33 === 1 && m.m34 === 0 && m.m43 === 0 && m.m44 === 1;
              };
              prototypeAccessors.is2D.set = function(value) {
                this.is2D = value;
              };
              CSSMatrix.prototype.setMatrixValue = function setMatrixValue(source) {
                var m = this;
                if ([Array, Float64Array, Float32Array].some(function(a) {
                  return source instanceof a;
                })) {
                  return fromArray(source);
                }
                if (typeof source === "string" && source.length && source !== "none") {
                  return fromString(source);
                }
                if (_typeof3(source) === "object") {
                  return fromMatrix(source);
                }
                return m;
              };
              CSSMatrix.prototype.toArray = function toArray() {
                var m = this;
                var pow = Math.pow(10, 6);
                var result;
                if (m.is2D) {
                  result = [m.a, m.b, m.c, m.d, m.e, m.f];
                } else {
                  result = [m.m11, m.m12, m.m13, m.m14, m.m21, m.m22, m.m23, m.m24, m.m31, m.m32, m.m33, m.m34, m.m41, m.m42, m.m43, m.m44];
                }
                return result.map(function(n) {
                  return Math.abs(n) < 1e-6 ? 0 : (n * pow >> 0) / pow;
                });
              };
              CSSMatrix.prototype.toString = function toString() {
                var m = this;
                var values = m.toArray();
                var type = m.is2D ? "matrix" : "matrix3d";
                return type + "(" + values + ")";
              };
              CSSMatrix.prototype.toJSON = function toJSON() {
                var m = this;
                var is2D = m.is2D;
                var isIdentity = m.isIdentity;
                return Object.assign({}, m, {
                  is2D,
                  isIdentity
                });
              };
              CSSMatrix.prototype.multiply = function multiply(m2) {
                return Multiply(this, m2);
              };
              CSSMatrix.prototype.translate = function translate(x, y, z) {
                var X = x;
                var Y = y;
                var Z = z;
                if (Z === void 0) {
                  Z = 0;
                }
                if (Y === void 0) {
                  Y = 0;
                }
                return Multiply(this, Translate(X, Y, Z));
              };
              CSSMatrix.prototype.scale = function scale(x, y, z) {
                var X = x;
                var Y = y;
                var Z = z;
                if (Y === void 0) {
                  Y = x;
                }
                if (Z === void 0) {
                  Z = 1;
                }
                return Multiply(this, Scale(X, Y, Z));
              };
              CSSMatrix.prototype.rotate = function rotate(rx, ry, rz) {
                var RX = rx;
                var RY = ry;
                var RZ = rz;
                if (RY === void 0) {
                  RY = 0;
                }
                if (RZ === void 0) {
                  RZ = RX;
                  RX = 0;
                }
                return Multiply(this, Rotate(RX, RY, RZ));
              };
              CSSMatrix.prototype.rotateAxisAngle = function rotateAxisAngle(x, y, z, angle) {
                if ([x, y, z, angle].some(function(n) {
                  return Number.isNaN(n);
                })) {
                  throw new TypeError("CSSMatrix: expecting 4 values");
                }
                return Multiply(this, RotateAxisAngle(x, y, z, angle));
              };
              CSSMatrix.prototype.skewX = function skewX(angle) {
                return Multiply(this, SkewX(angle));
              };
              CSSMatrix.prototype.skewY = function skewY(angle) {
                return Multiply(this, SkewY(angle));
              };
              CSSMatrix.prototype.transformPoint = function transformPoint(v) {
                var M = this;
                var m = Translate(v.x, v.y, v.z);
                m.m44 = v.w || 1;
                m = M.multiply(m);
                return {
                  x: m.m41,
                  y: m.m42,
                  z: m.m43,
                  w: m.m44
                };
              };
              CSSMatrix.prototype.transform = function transform(t) {
                var m = this;
                var x = m.m11 * t.x + m.m12 * t.y + m.m13 * t.z + m.m14 * t.w;
                var y = m.m21 * t.x + m.m22 * t.y + m.m23 * t.z + m.m24 * t.w;
                var z = m.m31 * t.x + m.m32 * t.y + m.m33 * t.z + m.m34 * t.w;
                var w = m.m41 * t.x + m.m42 * t.y + m.m43 * t.z + m.m44 * t.w;
                return {
                  x: x / w,
                  y: y / w,
                  z: z / w,
                  w
                };
              };
              Object.defineProperties(CSSMatrix.prototype, prototypeAccessors);
              Object.assign(CSSMatrix, {
                Translate,
                Rotate,
                RotateAxisAngle,
                Scale,
                SkewX,
                SkewY,
                Multiply,
                fromArray,
                fromMatrix,
                fromString
              });
              var version2 = "0.0.24";
              var Version = version2;
              Object.assign(CSSMatrix, {
                Version
              });
              return CSSMatrix;
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            __w_pdfjs_require__2(71);
            __w_pdfjs_require__2(86);
            var path = __w_pdfjs_require__2(96);
            module2.exports = path.Object.fromEntries;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var toIndexedObject = __w_pdfjs_require__2(17);
            var addToUnscopables = __w_pdfjs_require__2(72);
            var Iterators = __w_pdfjs_require__2(77);
            var InternalStateModule = __w_pdfjs_require__2(52);
            var defineIterator = __w_pdfjs_require__2(78);
            var ARRAY_ITERATOR = "Array Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
            module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
              setInternalState(this, {
                type: ARRAY_ITERATOR,
                target: toIndexedObject(iterated),
                index: 0,
                kind
              });
            }, function() {
              var state = getInternalState(this);
              var target = state.target;
              var kind = state.kind;
              var index = state.index++;
              if (!target || index >= target.length) {
                state.target = void 0;
                return {
                  value: void 0,
                  done: true
                };
              }
              if (kind == "keys")
                return {
                  value: index,
                  done: false
                };
              if (kind == "values")
                return {
                  value: target[index],
                  done: false
                };
              return {
                value: [
                  index,
                  target[index]
                ],
                done: false
              };
            }, "values");
            Iterators.Arguments = Iterators.Array;
            addToUnscopables("keys");
            addToUnscopables("values");
            addToUnscopables("entries");
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var create = __w_pdfjs_require__2(73);
            var definePropertyModule = __w_pdfjs_require__2(48);
            var UNSCOPABLES = wellKnownSymbol("unscopables");
            var ArrayPrototype = Array.prototype;
            if (ArrayPrototype[UNSCOPABLES] == void 0) {
              definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
                configurable: true,
                value: create(null)
              });
            }
            module2.exports = function(key) {
              ArrayPrototype[UNSCOPABLES][key] = true;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var anObject = __w_pdfjs_require__2(49);
            var defineProperties = __w_pdfjs_require__2(74);
            var enumBugKeys = __w_pdfjs_require__2(66);
            var hiddenKeys = __w_pdfjs_require__2(55);
            var html = __w_pdfjs_require__2(76);
            var documentCreateElement = __w_pdfjs_require__2(46);
            var sharedKey = __w_pdfjs_require__2(54);
            var GT = ">";
            var LT = "<";
            var PROTOTYPE = "prototype";
            var SCRIPT = "script";
            var IE_PROTO = sharedKey("IE_PROTO");
            var EmptyConstructor = function() {
            };
            var scriptTag = function(content) {
              return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
            };
            var NullProtoObjectViaActiveX = function(activeXDocument2) {
              activeXDocument2.write(scriptTag(""));
              activeXDocument2.close();
              var temp = activeXDocument2.parentWindow.Object;
              activeXDocument2 = null;
              return temp;
            };
            var NullProtoObjectViaIFrame = function() {
              var iframe = documentCreateElement("iframe");
              var JS = "java" + SCRIPT + ":";
              var iframeDocument;
              iframe.style.display = "none";
              html.appendChild(iframe);
              iframe.src = String(JS);
              iframeDocument = iframe.contentWindow.document;
              iframeDocument.open();
              iframeDocument.write(scriptTag("document.F=Object"));
              iframeDocument.close();
              return iframeDocument.F;
            };
            var activeXDocument;
            var NullProtoObject = function() {
              try {
                activeXDocument = new ActiveXObject("htmlfile");
              } catch (error) {
              }
              NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
              var length = enumBugKeys.length;
              while (length--)
                delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
              return NullProtoObject();
            };
            hiddenKeys[IE_PROTO] = true;
            module2.exports = Object.create || function create(O, Properties) {
              var result;
              if (O !== null) {
                EmptyConstructor[PROTOTYPE] = anObject(O);
                result = new EmptyConstructor();
                EmptyConstructor[PROTOTYPE] = null;
                result[IE_PROTO] = O;
              } else
                result = NullProtoObject();
              return Properties === void 0 ? result : defineProperties(result, Properties);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var definePropertyModule = __w_pdfjs_require__2(48);
            var anObject = __w_pdfjs_require__2(49);
            var toIndexedObject = __w_pdfjs_require__2(17);
            var objectKeys = __w_pdfjs_require__2(75);
            module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
              anObject(O);
              var props = toIndexedObject(Properties);
              var keys = objectKeys(Properties);
              var length = keys.length;
              var index = 0;
              var key;
              while (length > index)
                definePropertyModule.f(O, key = keys[index++], props[key]);
              return O;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var internalObjectKeys = __w_pdfjs_require__2(60);
            var enumBugKeys = __w_pdfjs_require__2(66);
            module2.exports = Object.keys || function keys(O) {
              return internalObjectKeys(O, enumBugKeys);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var getBuiltIn = __w_pdfjs_require__2(27);
            module2.exports = getBuiltIn("document", "documentElement");
          },
          (module2) => {
            module2.exports = {};
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var $ = __w_pdfjs_require__2(9);
            var call = __w_pdfjs_require__2(14);
            var IS_PURE = __w_pdfjs_require__2(39);
            var FunctionName = __w_pdfjs_require__2(56);
            var isCallable = __w_pdfjs_require__2(25);
            var createIteratorConstructor = __w_pdfjs_require__2(79);
            var getPrototypeOf = __w_pdfjs_require__2(81);
            var setPrototypeOf = __w_pdfjs_require__2(84);
            var setToStringTag = __w_pdfjs_require__2(83);
            var createNonEnumerableProperty = __w_pdfjs_require__2(47);
            var redefine = __w_pdfjs_require__2(50);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var Iterators = __w_pdfjs_require__2(77);
            var IteratorsCore = __w_pdfjs_require__2(80);
            var PROPER_FUNCTION_NAME = FunctionName.PROPER;
            var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
            var IteratorPrototype = IteratorsCore.IteratorPrototype;
            var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
            var ITERATOR = wellKnownSymbol("iterator");
            var KEYS = "keys";
            var VALUES = "values";
            var ENTRIES = "entries";
            var returnThis = function() {
              return this;
            };
            module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
              createIteratorConstructor(IteratorConstructor, NAME, next);
              var getIterationMethod = function(KIND) {
                if (KIND === DEFAULT && defaultIterator)
                  return defaultIterator;
                if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
                  return IterablePrototype[KIND];
                switch (KIND) {
                  case KEYS:
                    return function keys() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case VALUES:
                    return function values() {
                      return new IteratorConstructor(this, KIND);
                    };
                  case ENTRIES:
                    return function entries() {
                      return new IteratorConstructor(this, KIND);
                    };
                }
                return function() {
                  return new IteratorConstructor(this);
                };
              };
              var TO_STRING_TAG = NAME + " Iterator";
              var INCORRECT_VALUES_NAME = false;
              var IterablePrototype = Iterable.prototype;
              var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
              var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
              var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
              var CurrentIteratorPrototype, methods, KEY;
              if (anyNativeIterator) {
                CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
                if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                  if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                    if (setPrototypeOf) {
                      setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                    } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                      redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
                    }
                  }
                  setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                  if (IS_PURE)
                    Iterators[TO_STRING_TAG] = returnThis;
                }
              }
              if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
                if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
                  createNonEnumerableProperty(IterablePrototype, "name", VALUES);
                } else {
                  INCORRECT_VALUES_NAME = true;
                  defaultIterator = function values() {
                    return call(nativeIterator, this);
                  };
                }
              }
              if (DEFAULT) {
                methods = {
                  values: getIterationMethod(VALUES),
                  keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                  entries: getIterationMethod(ENTRIES)
                };
                if (FORCED)
                  for (KEY in methods) {
                    if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                      redefine(IterablePrototype, KEY, methods[KEY]);
                    }
                  }
                else
                  $({
                    target: NAME,
                    proto: true,
                    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
                  }, methods);
              }
              if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
                redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
              }
              Iterators[NAME] = defaultIterator;
              return methods;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var IteratorPrototype = __w_pdfjs_require__2(80).IteratorPrototype;
            var create = __w_pdfjs_require__2(73);
            var createPropertyDescriptor = __w_pdfjs_require__2(16);
            var setToStringTag = __w_pdfjs_require__2(83);
            var Iterators = __w_pdfjs_require__2(77);
            var returnThis = function() {
              return this;
            };
            module2.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
              var TO_STRING_TAG = NAME + " Iterator";
              IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
              setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
              Iterators[TO_STRING_TAG] = returnThis;
              return IteratorConstructor;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var fails = __w_pdfjs_require__2(13);
            var isCallable = __w_pdfjs_require__2(25);
            var create = __w_pdfjs_require__2(73);
            var getPrototypeOf = __w_pdfjs_require__2(81);
            var redefine = __w_pdfjs_require__2(50);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var IS_PURE = __w_pdfjs_require__2(39);
            var ITERATOR = wellKnownSymbol("iterator");
            var BUGGY_SAFARI_ITERATORS = false;
            var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
            if ([].keys) {
              arrayIterator = [].keys();
              if (!("next" in arrayIterator))
                BUGGY_SAFARI_ITERATORS = true;
              else {
                PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
                if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
                  IteratorPrototype = PrototypeOfArrayIteratorPrototype;
              }
            }
            var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
              var test = {};
              return IteratorPrototype[ITERATOR].call(test) !== test;
            });
            if (NEW_ITERATOR_PROTOTYPE)
              IteratorPrototype = {};
            else if (IS_PURE)
              IteratorPrototype = create(IteratorPrototype);
            if (!isCallable(IteratorPrototype[ITERATOR])) {
              redefine(IteratorPrototype, ITERATOR, function() {
                return this;
              });
            }
            module2.exports = {
              IteratorPrototype,
              BUGGY_SAFARI_ITERATORS
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var hasOwn = __w_pdfjs_require__2(42);
            var isCallable = __w_pdfjs_require__2(25);
            var toObject = __w_pdfjs_require__2(43);
            var sharedKey = __w_pdfjs_require__2(54);
            var CORRECT_PROTOTYPE_GETTER = __w_pdfjs_require__2(82);
            var IE_PROTO = sharedKey("IE_PROTO");
            var Object2 = global2.Object;
            var ObjectPrototype = Object2.prototype;
            module2.exports = CORRECT_PROTOTYPE_GETTER ? Object2.getPrototypeOf : function(O) {
              var object = toObject(O);
              if (hasOwn(object, IE_PROTO))
                return object[IE_PROTO];
              var constructor = object.constructor;
              if (isCallable(constructor) && object instanceof constructor) {
                return constructor.prototype;
              }
              return object instanceof Object2 ? ObjectPrototype : null;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var fails = __w_pdfjs_require__2(13);
            module2.exports = !fails(function() {
              function F() {
              }
              F.prototype.constructor = null;
              return Object.getPrototypeOf(new F()) !== F.prototype;
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var defineProperty = __w_pdfjs_require__2(48).f;
            var hasOwn = __w_pdfjs_require__2(42);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            module2.exports = function(it, TAG, STATIC) {
              if (it && !hasOwn(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
                defineProperty(it, TO_STRING_TAG, {
                  configurable: true,
                  value: TAG
                });
              }
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var anObject = __w_pdfjs_require__2(49);
            var aPossiblePrototype = __w_pdfjs_require__2(85);
            module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
              var CORRECT_SETTER = false;
              var test = {};
              var setter;
              try {
                setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
                setter(test, []);
                CORRECT_SETTER = test instanceof Array;
              } catch (error) {
              }
              return function setPrototypeOf(O, proto) {
                anObject(O);
                aPossiblePrototype(proto);
                if (CORRECT_SETTER)
                  setter(O, proto);
                else
                  O.__proto__ = proto;
                return O;
              };
            }() : void 0);
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isCallable = __w_pdfjs_require__2(25);
            var String2 = global2.String;
            var TypeError2 = global2.TypeError;
            module2.exports = function(argument) {
              if (typeof argument == "object" || isCallable(argument))
                return argument;
              throw TypeError2("Can't set " + String2(argument) + " as a prototype");
            };
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var $ = __w_pdfjs_require__2(9);
            var iterate = __w_pdfjs_require__2(87);
            var createProperty = __w_pdfjs_require__2(95);
            $({
              target: "Object",
              stat: true
            }, {
              fromEntries: function fromEntries(iterable) {
                var obj = {};
                iterate(iterable, function(k, v) {
                  createProperty(obj, k, v);
                }, { AS_ENTRIES: true });
                return obj;
              }
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var bind = __w_pdfjs_require__2(88);
            var call = __w_pdfjs_require__2(14);
            var anObject = __w_pdfjs_require__2(49);
            var tryToString = __w_pdfjs_require__2(35);
            var isArrayIteratorMethod = __w_pdfjs_require__2(89);
            var lengthOfArrayLike = __w_pdfjs_require__2(64);
            var isPrototypeOf = __w_pdfjs_require__2(28);
            var getIterator = __w_pdfjs_require__2(90);
            var getIteratorMethod = __w_pdfjs_require__2(91);
            var iteratorClose = __w_pdfjs_require__2(94);
            var TypeError2 = global2.TypeError;
            var Result = function(stopped, result) {
              this.stopped = stopped;
              this.result = result;
            };
            var ResultPrototype = Result.prototype;
            module2.exports = function(iterable, unboundFunction, options) {
              var that = options && options.that;
              var AS_ENTRIES = !!(options && options.AS_ENTRIES);
              var IS_ITERATOR = !!(options && options.IS_ITERATOR);
              var INTERRUPTED = !!(options && options.INTERRUPTED);
              var fn = bind(unboundFunction, that);
              var iterator, iterFn, index, length, result, next, step;
              var stop = function(condition) {
                if (iterator)
                  iteratorClose(iterator, "normal", condition);
                return new Result(true, condition);
              };
              var callFn = function(value) {
                if (AS_ENTRIES) {
                  anObject(value);
                  return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
                }
                return INTERRUPTED ? fn(value, stop) : fn(value);
              };
              if (IS_ITERATOR) {
                iterator = iterable;
              } else {
                iterFn = getIteratorMethod(iterable);
                if (!iterFn)
                  throw TypeError2(tryToString(iterable) + " is not iterable");
                if (isArrayIteratorMethod(iterFn)) {
                  for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
                    result = callFn(iterable[index]);
                    if (result && isPrototypeOf(ResultPrototype, result))
                      return result;
                  }
                  return new Result(false);
                }
                iterator = getIterator(iterable, iterFn);
              }
              next = iterator.next;
              while (!(step = call(next, iterator)).done) {
                try {
                  result = callFn(step.value);
                } catch (error) {
                  iteratorClose(iterator, "throw", error);
                }
                if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
                  return result;
              }
              return new Result(false);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var aCallable = __w_pdfjs_require__2(34);
            var bind = uncurryThis(uncurryThis.bind);
            module2.exports = function(fn, that) {
              aCallable(fn);
              return that === void 0 ? fn : bind ? bind(fn, that) : function() {
                return fn.apply(that, arguments);
              };
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var Iterators = __w_pdfjs_require__2(77);
            var ITERATOR = wellKnownSymbol("iterator");
            var ArrayPrototype = Array.prototype;
            module2.exports = function(it) {
              return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var call = __w_pdfjs_require__2(14);
            var aCallable = __w_pdfjs_require__2(34);
            var anObject = __w_pdfjs_require__2(49);
            var tryToString = __w_pdfjs_require__2(35);
            var getIteratorMethod = __w_pdfjs_require__2(91);
            var TypeError2 = global2.TypeError;
            module2.exports = function(argument, usingIterator) {
              var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
              if (aCallable(iteratorMethod))
                return anObject(call(iteratorMethod, argument));
              throw TypeError2(tryToString(argument) + " is not iterable");
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var classof = __w_pdfjs_require__2(92);
            var getMethod = __w_pdfjs_require__2(33);
            var Iterators = __w_pdfjs_require__2(77);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var ITERATOR = wellKnownSymbol("iterator");
            module2.exports = function(it) {
              if (it != void 0)
                return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var TO_STRING_TAG_SUPPORT = __w_pdfjs_require__2(93);
            var isCallable = __w_pdfjs_require__2(25);
            var classofRaw = __w_pdfjs_require__2(20);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var Object2 = global2.Object;
            var CORRECT_ARGUMENTS = classofRaw(function() {
              return arguments;
            }()) == "Arguments";
            var tryGet = function(it, key) {
              try {
                return it[key];
              } catch (error) {
              }
            };
            module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
              var O, tag, result;
              return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object2(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var test = {};
            test[TO_STRING_TAG] = "z";
            module2.exports = String(test) === "[object z]";
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var call = __w_pdfjs_require__2(14);
            var anObject = __w_pdfjs_require__2(49);
            var getMethod = __w_pdfjs_require__2(33);
            module2.exports = function(iterator, kind, value) {
              var innerResult, innerError;
              anObject(iterator);
              try {
                innerResult = getMethod(iterator, "return");
                if (!innerResult) {
                  if (kind === "throw")
                    throw value;
                  return value;
                }
                innerResult = call(innerResult, iterator);
              } catch (error) {
                innerError = true;
                innerResult = error;
              }
              if (kind === "throw")
                throw value;
              if (innerError)
                throw innerResult;
              anObject(innerResult);
              return value;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var toPropertyKey = __w_pdfjs_require__2(22);
            var definePropertyModule = __w_pdfjs_require__2(48);
            var createPropertyDescriptor = __w_pdfjs_require__2(16);
            module2.exports = function(object, key, value) {
              var propertyKey = toPropertyKey(key);
              if (propertyKey in object)
                definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
              else
                object[propertyKey] = value;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            module2.exports = global2;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            __w_pdfjs_require__2(98);
            __w_pdfjs_require__2(71);
            __w_pdfjs_require__2(105);
            __w_pdfjs_require__2(107);
            __w_pdfjs_require__2(129);
            __w_pdfjs_require__2(130);
            __w_pdfjs_require__2(131);
            __w_pdfjs_require__2(132);
            var path = __w_pdfjs_require__2(96);
            module2.exports = path.Promise;
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var $ = __w_pdfjs_require__2(9);
            var global2 = __w_pdfjs_require__2(10);
            var isPrototypeOf = __w_pdfjs_require__2(28);
            var getPrototypeOf = __w_pdfjs_require__2(81);
            var setPrototypeOf = __w_pdfjs_require__2(84);
            var copyConstructorProperties = __w_pdfjs_require__2(57);
            var create = __w_pdfjs_require__2(73);
            var createNonEnumerableProperty = __w_pdfjs_require__2(47);
            var createPropertyDescriptor = __w_pdfjs_require__2(16);
            var clearErrorStack = __w_pdfjs_require__2(99);
            var installErrorCause = __w_pdfjs_require__2(101);
            var iterate = __w_pdfjs_require__2(87);
            var normalizeStringArgument = __w_pdfjs_require__2(102);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var ERROR_STACK_INSTALLABLE = __w_pdfjs_require__2(104);
            var TO_STRING_TAG = wellKnownSymbol("toStringTag");
            var Error2 = global2.Error;
            var push = [].push;
            var $AggregateError = function AggregateError2(errors, message) {
              var options = arguments.length > 2 ? arguments[2] : void 0;
              var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
              var that;
              if (setPrototypeOf) {
                that = setPrototypeOf(new Error2(void 0), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
              } else {
                that = isInstance ? this : create(AggregateErrorPrototype);
                createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
              }
              createNonEnumerableProperty(that, "message", normalizeStringArgument(message, ""));
              if (ERROR_STACK_INSTALLABLE)
                createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
              installErrorCause(that, options);
              var errorsArray = [];
              iterate(errors, push, { that: errorsArray });
              createNonEnumerableProperty(that, "errors", errorsArray);
              return that;
            };
            if (setPrototypeOf)
              setPrototypeOf($AggregateError, Error2);
            else
              copyConstructorProperties($AggregateError, Error2);
            var AggregateErrorPrototype = $AggregateError.prototype = create(Error2.prototype, {
              constructor: createPropertyDescriptor(1, $AggregateError),
              message: createPropertyDescriptor(1, ""),
              name: createPropertyDescriptor(1, "AggregateError")
            });
            $({ global: true }, { AggregateError: $AggregateError });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var arraySlice = __w_pdfjs_require__2(100);
            var replace = uncurryThis("".replace);
            var split = uncurryThis("".split);
            var join = uncurryThis([].join);
            var TEST = function(arg) {
              return String(Error(arg).stack);
            }("zxcasd");
            var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
            var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
            var IS_FIREFOX_OR_SAFARI_STACK = /@[^\n]*\n/.test(TEST) && !/zxcasd/.test(TEST);
            module2.exports = function(stack, dropEntries) {
              if (typeof stack != "string")
                return stack;
              if (IS_V8_OR_CHAKRA_STACK) {
                while (dropEntries--)
                  stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
              } else if (IS_FIREFOX_OR_SAFARI_STACK) {
                return join(arraySlice(split(stack, "\n"), dropEntries), "\n");
              }
              return stack;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var toAbsoluteIndex = __w_pdfjs_require__2(62);
            var lengthOfArrayLike = __w_pdfjs_require__2(64);
            var createProperty = __w_pdfjs_require__2(95);
            var Array2 = global2.Array;
            var max = Math.max;
            module2.exports = function(O, start, end) {
              var length = lengthOfArrayLike(O);
              var k = toAbsoluteIndex(start, length);
              var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
              var result = Array2(max(fin - k, 0));
              for (var n = 0; k < fin; k++, n++)
                createProperty(result, n, O[k]);
              result.length = n;
              return result;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var isObject = __w_pdfjs_require__2(24);
            var createNonEnumerableProperty = __w_pdfjs_require__2(47);
            module2.exports = function(O, options) {
              if (isObject(options) && "cause" in options) {
                createNonEnumerableProperty(O, "cause", options.cause);
              }
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var toString = __w_pdfjs_require__2(103);
            module2.exports = function(argument, $default) {
              return argument === void 0 ? arguments.length < 2 ? "" : $default : toString(argument);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var classof = __w_pdfjs_require__2(92);
            var String2 = global2.String;
            module2.exports = function(argument) {
              if (classof(argument) === "Symbol")
                throw TypeError("Cannot convert a Symbol value to a string");
              return String2(argument);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var fails = __w_pdfjs_require__2(13);
            var createPropertyDescriptor = __w_pdfjs_require__2(16);
            module2.exports = !fails(function() {
              var error = Error("a");
              if (!("stack" in error))
                return true;
              Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
              return error.stack !== 7;
            });
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var TO_STRING_TAG_SUPPORT = __w_pdfjs_require__2(93);
            var redefine = __w_pdfjs_require__2(50);
            var toString = __w_pdfjs_require__2(106);
            if (!TO_STRING_TAG_SUPPORT) {
              redefine(Object.prototype, "toString", toString, { unsafe: true });
            }
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var TO_STRING_TAG_SUPPORT = __w_pdfjs_require__2(93);
            var classof = __w_pdfjs_require__2(92);
            module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
              return "[object " + classof(this) + "]";
            };
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var $ = __w_pdfjs_require__2(9);
            var IS_PURE = __w_pdfjs_require__2(39);
            var global2 = __w_pdfjs_require__2(10);
            var getBuiltIn = __w_pdfjs_require__2(27);
            var call = __w_pdfjs_require__2(14);
            var NativePromise = __w_pdfjs_require__2(108);
            var redefine = __w_pdfjs_require__2(50);
            var redefineAll = __w_pdfjs_require__2(109);
            var setPrototypeOf = __w_pdfjs_require__2(84);
            var setToStringTag = __w_pdfjs_require__2(83);
            var setSpecies = __w_pdfjs_require__2(110);
            var aCallable = __w_pdfjs_require__2(34);
            var isCallable = __w_pdfjs_require__2(25);
            var isObject = __w_pdfjs_require__2(24);
            var anInstance = __w_pdfjs_require__2(111);
            var inspectSource = __w_pdfjs_require__2(51);
            var iterate = __w_pdfjs_require__2(87);
            var checkCorrectnessOfIteration = __w_pdfjs_require__2(112);
            var speciesConstructor = __w_pdfjs_require__2(113);
            var task = __w_pdfjs_require__2(116).set;
            var microtask = __w_pdfjs_require__2(121);
            var promiseResolve = __w_pdfjs_require__2(124);
            var hostReportErrors = __w_pdfjs_require__2(126);
            var newPromiseCapabilityModule = __w_pdfjs_require__2(125);
            var perform = __w_pdfjs_require__2(127);
            var InternalStateModule = __w_pdfjs_require__2(52);
            var isForced = __w_pdfjs_require__2(68);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var IS_BROWSER = __w_pdfjs_require__2(128);
            var IS_NODE = __w_pdfjs_require__2(120);
            var V8_VERSION = __w_pdfjs_require__2(31);
            var SPECIES = wellKnownSymbol("species");
            var PROMISE = "Promise";
            var getInternalState = InternalStateModule.getterFor(PROMISE);
            var setInternalState = InternalStateModule.set;
            var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
            var NativePromisePrototype = NativePromise && NativePromise.prototype;
            var PromiseConstructor = NativePromise;
            var PromisePrototype = NativePromisePrototype;
            var TypeError2 = global2.TypeError;
            var document2 = global2.document;
            var process2 = global2.process;
            var newPromiseCapability = newPromiseCapabilityModule.f;
            var newGenericPromiseCapability = newPromiseCapability;
            var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
            var NATIVE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
            var UNHANDLED_REJECTION = "unhandledrejection";
            var REJECTION_HANDLED = "rejectionhandled";
            var PENDING = 0;
            var FULFILLED = 1;
            var REJECTED = 2;
            var HANDLED = 1;
            var UNHANDLED = 2;
            var SUBCLASSING = false;
            var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
            var FORCED = isForced(PROMISE, function() {
              var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
              var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
              if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
                return true;
              if (IS_PURE && !PromisePrototype["finally"])
                return true;
              if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE))
                return false;
              var promise = new PromiseConstructor(function(resolve) {
                resolve(1);
              });
              var FakePromise = function(exec) {
                exec(function() {
                }, function() {
                });
              };
              var constructor = promise.constructor = {};
              constructor[SPECIES] = FakePromise;
              SUBCLASSING = promise.then(function() {
              }) instanceof FakePromise;
              if (!SUBCLASSING)
                return true;
              return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
            });
            var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
              PromiseConstructor.all(iterable)["catch"](function() {
              });
            });
            var isThenable = function(it) {
              var then;
              return isObject(it) && isCallable(then = it.then) ? then : false;
            };
            var notify = function(state, isReject) {
              if (state.notified)
                return;
              state.notified = true;
              var chain = state.reactions;
              microtask(function() {
                var value = state.value;
                var ok = state.state == FULFILLED;
                var index = 0;
                while (chain.length > index) {
                  var reaction = chain[index++];
                  var handler = ok ? reaction.ok : reaction.fail;
                  var resolve = reaction.resolve;
                  var reject = reaction.reject;
                  var domain = reaction.domain;
                  var result, then, exited;
                  try {
                    if (handler) {
                      if (!ok) {
                        if (state.rejection === UNHANDLED)
                          onHandleUnhandled(state);
                        state.rejection = HANDLED;
                      }
                      if (handler === true)
                        result = value;
                      else {
                        if (domain)
                          domain.enter();
                        result = handler(value);
                        if (domain) {
                          domain.exit();
                          exited = true;
                        }
                      }
                      if (result === reaction.promise) {
                        reject(TypeError2("Promise-chain cycle"));
                      } else if (then = isThenable(result)) {
                        call(then, result, resolve, reject);
                      } else
                        resolve(result);
                    } else
                      reject(value);
                  } catch (error) {
                    if (domain && !exited)
                      domain.exit();
                    reject(error);
                  }
                }
                state.reactions = [];
                state.notified = false;
                if (isReject && !state.rejection)
                  onUnhandled(state);
              });
            };
            var dispatchEvent = function(name, promise, reason) {
              var event, handler;
              if (DISPATCH_EVENT) {
                event = document2.createEvent("Event");
                event.promise = promise;
                event.reason = reason;
                event.initEvent(name, false, true);
                global2.dispatchEvent(event);
              } else
                event = {
                  promise,
                  reason
                };
              if (!NATIVE_REJECTION_EVENT && (handler = global2["on" + name]))
                handler(event);
              else if (name === UNHANDLED_REJECTION)
                hostReportErrors("Unhandled promise rejection", reason);
            };
            var onUnhandled = function(state) {
              call(task, global2, function() {
                var promise = state.facade;
                var value = state.value;
                var IS_UNHANDLED = isUnhandled(state);
                var result;
                if (IS_UNHANDLED) {
                  result = perform(function() {
                    if (IS_NODE) {
                      process2.emit("unhandledRejection", value, promise);
                    } else
                      dispatchEvent(UNHANDLED_REJECTION, promise, value);
                  });
                  state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
                  if (result.error)
                    throw result.value;
                }
              });
            };
            var isUnhandled = function(state) {
              return state.rejection !== HANDLED && !state.parent;
            };
            var onHandleUnhandled = function(state) {
              call(task, global2, function() {
                var promise = state.facade;
                if (IS_NODE) {
                  process2.emit("rejectionHandled", promise);
                } else
                  dispatchEvent(REJECTION_HANDLED, promise, state.value);
              });
            };
            var bind = function(fn, state, unwrap) {
              return function(value) {
                fn(state, value, unwrap);
              };
            };
            var internalReject = function(state, value, unwrap) {
              if (state.done)
                return;
              state.done = true;
              if (unwrap)
                state = unwrap;
              state.value = value;
              state.state = REJECTED;
              notify(state, true);
            };
            var internalResolve = function(state, value, unwrap) {
              if (state.done)
                return;
              state.done = true;
              if (unwrap)
                state = unwrap;
              try {
                if (state.facade === value)
                  throw TypeError2("Promise can't be resolved itself");
                var then = isThenable(value);
                if (then) {
                  microtask(function() {
                    var wrapper = { done: false };
                    try {
                      call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
                    } catch (error) {
                      internalReject(wrapper, error, state);
                    }
                  });
                } else {
                  state.value = value;
                  state.state = FULFILLED;
                  notify(state, false);
                }
              } catch (error) {
                internalReject({ done: false }, error, state);
              }
            };
            if (FORCED) {
              PromiseConstructor = function Promise2(executor) {
                anInstance(this, PromisePrototype);
                aCallable(executor);
                call(Internal, this);
                var state = getInternalState(this);
                try {
                  executor(bind(internalResolve, state), bind(internalReject, state));
                } catch (error) {
                  internalReject(state, error);
                }
              };
              PromisePrototype = PromiseConstructor.prototype;
              Internal = function Promise2(executor) {
                setInternalState(this, {
                  type: PROMISE,
                  done: false,
                  notified: false,
                  parent: false,
                  reactions: [],
                  rejection: false,
                  state: PENDING,
                  value: void 0
                });
              };
              Internal.prototype = redefineAll(PromisePrototype, {
                then: function then(onFulfilled, onRejected) {
                  var state = getInternalPromiseState(this);
                  var reactions = state.reactions;
                  var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
                  reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
                  reaction.fail = isCallable(onRejected) && onRejected;
                  reaction.domain = IS_NODE ? process2.domain : void 0;
                  state.parent = true;
                  reactions[reactions.length] = reaction;
                  if (state.state != PENDING)
                    notify(state, false);
                  return reaction.promise;
                },
                "catch": function(onRejected) {
                  return this.then(void 0, onRejected);
                }
              });
              OwnPromiseCapability = function() {
                var promise = new Internal();
                var state = getInternalState(promise);
                this.promise = promise;
                this.resolve = bind(internalResolve, state);
                this.reject = bind(internalReject, state);
              };
              newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
                return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
              };
              if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
                nativeThen = NativePromisePrototype.then;
                if (!SUBCLASSING) {
                  redefine(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
                    var that = this;
                    return new PromiseConstructor(function(resolve, reject) {
                      call(nativeThen, that, resolve, reject);
                    }).then(onFulfilled, onRejected);
                  }, { unsafe: true });
                  redefine(NativePromisePrototype, "catch", PromisePrototype["catch"], { unsafe: true });
                }
                try {
                  delete NativePromisePrototype.constructor;
                } catch (error) {
                }
                if (setPrototypeOf) {
                  setPrototypeOf(NativePromisePrototype, PromisePrototype);
                }
              }
            }
            $({
              global: true,
              wrap: true,
              forced: FORCED
            }, { Promise: PromiseConstructor });
            setToStringTag(PromiseConstructor, PROMISE, false, true);
            setSpecies(PROMISE);
            PromiseWrapper = getBuiltIn(PROMISE);
            $({
              target: PROMISE,
              stat: true,
              forced: FORCED
            }, {
              reject: function reject(r) {
                var capability = newPromiseCapability(this);
                call(capability.reject, void 0, r);
                return capability.promise;
              }
            });
            $({
              target: PROMISE,
              stat: true,
              forced: IS_PURE || FORCED
            }, {
              resolve: function resolve(x) {
                return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
              }
            });
            $({
              target: PROMISE,
              stat: true,
              forced: INCORRECT_ITERATION
            }, {
              all: function all(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function() {
                  var $promiseResolve = aCallable(C.resolve);
                  var values = [];
                  var counter = 0;
                  var remaining = 1;
                  iterate(iterable, function(promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    remaining++;
                    call($promiseResolve, C, promise).then(function(value) {
                      if (alreadyCalled)
                        return;
                      alreadyCalled = true;
                      values[index] = value;
                      --remaining || resolve(values);
                    }, reject);
                  });
                  --remaining || resolve(values);
                });
                if (result.error)
                  reject(result.value);
                return capability.promise;
              },
              race: function race(iterable) {
                var C = this;
                var capability = newPromiseCapability(C);
                var reject = capability.reject;
                var result = perform(function() {
                  var $promiseResolve = aCallable(C.resolve);
                  iterate(iterable, function(promise) {
                    call($promiseResolve, C, promise).then(capability.resolve, reject);
                  });
                });
                if (result.error)
                  reject(result.value);
                return capability.promise;
              }
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            module2.exports = global2.Promise;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var redefine = __w_pdfjs_require__2(50);
            module2.exports = function(target, src, options) {
              for (var key in src)
                redefine(target, key, src[key], options);
              return target;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var getBuiltIn = __w_pdfjs_require__2(27);
            var definePropertyModule = __w_pdfjs_require__2(48);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var DESCRIPTORS = __w_pdfjs_require__2(12);
            var SPECIES = wellKnownSymbol("species");
            module2.exports = function(CONSTRUCTOR_NAME) {
              var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
              var defineProperty = definePropertyModule.f;
              if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
                defineProperty(Constructor, SPECIES, {
                  configurable: true,
                  get: function() {
                    return this;
                  }
                });
              }
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isPrototypeOf = __w_pdfjs_require__2(28);
            var TypeError2 = global2.TypeError;
            module2.exports = function(it, Prototype) {
              if (isPrototypeOf(Prototype, it))
                return it;
              throw TypeError2("Incorrect invocation");
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var ITERATOR = wellKnownSymbol("iterator");
            var SAFE_CLOSING = false;
            try {
              var called = 0;
              var iteratorWithReturn = {
                next: function() {
                  return { done: !!called++ };
                },
                "return": function() {
                  SAFE_CLOSING = true;
                }
              };
              iteratorWithReturn[ITERATOR] = function() {
                return this;
              };
              Array.from(iteratorWithReturn, function() {
                throw 2;
              });
            } catch (error) {
            }
            module2.exports = function(exec, SKIP_CLOSING) {
              if (!SKIP_CLOSING && !SAFE_CLOSING)
                return false;
              var ITERATION_SUPPORT = false;
              try {
                var object = {};
                object[ITERATOR] = function() {
                  return {
                    next: function() {
                      return { done: ITERATION_SUPPORT = true };
                    }
                  };
                };
                exec(object);
              } catch (error) {
              }
              return ITERATION_SUPPORT;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var anObject = __w_pdfjs_require__2(49);
            var aConstructor = __w_pdfjs_require__2(114);
            var wellKnownSymbol = __w_pdfjs_require__2(37);
            var SPECIES = wellKnownSymbol("species");
            module2.exports = function(O, defaultConstructor) {
              var C = anObject(O).constructor;
              var S;
              return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aConstructor(S);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var isConstructor = __w_pdfjs_require__2(115);
            var tryToString = __w_pdfjs_require__2(35);
            var TypeError2 = global2.TypeError;
            module2.exports = function(argument) {
              if (isConstructor(argument))
                return argument;
              throw TypeError2(tryToString(argument) + " is not a constructor");
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var fails = __w_pdfjs_require__2(13);
            var isCallable = __w_pdfjs_require__2(25);
            var classof = __w_pdfjs_require__2(92);
            var getBuiltIn = __w_pdfjs_require__2(27);
            var inspectSource = __w_pdfjs_require__2(51);
            var noop = function() {
            };
            var empty = [];
            var construct = getBuiltIn("Reflect", "construct");
            var constructorRegExp = /^\s*(?:class|function)\b/;
            var exec = uncurryThis(constructorRegExp.exec);
            var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
            var isConstructorModern = function(argument) {
              if (!isCallable(argument))
                return false;
              try {
                construct(noop, empty, argument);
                return true;
              } catch (error) {
                return false;
              }
            };
            var isConstructorLegacy = function(argument) {
              if (!isCallable(argument))
                return false;
              switch (classof(argument)) {
                case "AsyncFunction":
                case "GeneratorFunction":
                case "AsyncGeneratorFunction":
                  return false;
              }
              return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
            };
            module2.exports = !construct || fails(function() {
              var called;
              return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
                called = true;
              }) || called;
            }) ? isConstructorLegacy : isConstructorModern;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var apply = __w_pdfjs_require__2(117);
            var bind = __w_pdfjs_require__2(88);
            var isCallable = __w_pdfjs_require__2(25);
            var hasOwn = __w_pdfjs_require__2(42);
            var fails = __w_pdfjs_require__2(13);
            var html = __w_pdfjs_require__2(76);
            var arraySlice = __w_pdfjs_require__2(118);
            var createElement = __w_pdfjs_require__2(46);
            var IS_IOS = __w_pdfjs_require__2(119);
            var IS_NODE = __w_pdfjs_require__2(120);
            var set = global2.setImmediate;
            var clear = global2.clearImmediate;
            var process2 = global2.process;
            var Dispatch = global2.Dispatch;
            var Function2 = global2.Function;
            var MessageChannel = global2.MessageChannel;
            var String2 = global2.String;
            var counter = 0;
            var queue = {};
            var ONREADYSTATECHANGE = "onreadystatechange";
            var location, defer, channel, port;
            try {
              location = global2.location;
            } catch (error) {
            }
            var run = function(id) {
              if (hasOwn(queue, id)) {
                var fn = queue[id];
                delete queue[id];
                fn();
              }
            };
            var runner = function(id) {
              return function() {
                run(id);
              };
            };
            var listener = function(event) {
              run(event.data);
            };
            var post = function(id) {
              global2.postMessage(String2(id), location.protocol + "//" + location.host);
            };
            if (!set || !clear) {
              set = function setImmediate(fn) {
                var args = arraySlice(arguments, 1);
                queue[++counter] = function() {
                  apply(isCallable(fn) ? fn : Function2(fn), void 0, args);
                };
                defer(counter);
                return counter;
              };
              clear = function clearImmediate(id) {
                delete queue[id];
              };
              if (IS_NODE) {
                defer = function(id) {
                  process2.nextTick(runner(id));
                };
              } else if (Dispatch && Dispatch.now) {
                defer = function(id) {
                  Dispatch.now(runner(id));
                };
              } else if (MessageChannel && !IS_IOS) {
                channel = new MessageChannel();
                port = channel.port2;
                channel.port1.onmessage = listener;
                defer = bind(port.postMessage, port);
              } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && location && location.protocol !== "file:" && !fails(post)) {
                defer = post;
                global2.addEventListener("message", listener, false);
              } else if (ONREADYSTATECHANGE in createElement("script")) {
                defer = function(id) {
                  html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
                    html.removeChild(this);
                    run(id);
                  };
                };
              } else {
                defer = function(id) {
                  setTimeout(runner(id), 0);
                };
              }
            }
            module2.exports = {
              set,
              clear
            };
          },
          (module2) => {
            var FunctionPrototype = Function.prototype;
            var apply = FunctionPrototype.apply;
            var bind = FunctionPrototype.bind;
            var call = FunctionPrototype.call;
            module2.exports = typeof Reflect == "object" && Reflect.apply || (bind ? call.bind(apply) : function() {
              return call.apply(apply, arguments);
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            module2.exports = uncurryThis([].slice);
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var userAgent = __w_pdfjs_require__2(32);
            module2.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var classof = __w_pdfjs_require__2(20);
            var global2 = __w_pdfjs_require__2(10);
            module2.exports = classof(global2.process) == "process";
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            var bind = __w_pdfjs_require__2(88);
            var getOwnPropertyDescriptor = __w_pdfjs_require__2(11).f;
            var macrotask = __w_pdfjs_require__2(116).set;
            var IS_IOS = __w_pdfjs_require__2(119);
            var IS_IOS_PEBBLE = __w_pdfjs_require__2(122);
            var IS_WEBOS_WEBKIT = __w_pdfjs_require__2(123);
            var IS_NODE = __w_pdfjs_require__2(120);
            var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
            var document2 = global2.document;
            var process2 = global2.process;
            var Promise2 = global2.Promise;
            var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
            var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
            var flush, head, last, notify, toggle, node, promise, then;
            if (!queueMicrotask) {
              flush = function() {
                var parent, fn;
                if (IS_NODE && (parent = process2.domain))
                  parent.exit();
                while (head) {
                  fn = head.fn;
                  head = head.next;
                  try {
                    fn();
                  } catch (error) {
                    if (head)
                      notify();
                    else
                      last = void 0;
                    throw error;
                  }
                }
                last = void 0;
                if (parent)
                  parent.enter();
              };
              if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
                toggle = true;
                node = document2.createTextNode("");
                new MutationObserver(flush).observe(node, { characterData: true });
                notify = function() {
                  node.data = toggle = !toggle;
                };
              } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
                promise = Promise2.resolve(void 0);
                promise.constructor = Promise2;
                then = bind(promise.then, promise);
                notify = function() {
                  then(flush);
                };
              } else if (IS_NODE) {
                notify = function() {
                  process2.nextTick(flush);
                };
              } else {
                macrotask = bind(macrotask, global2);
                notify = function() {
                  macrotask(flush);
                };
              }
            }
            module2.exports = queueMicrotask || function(fn) {
              var task = {
                fn,
                next: void 0
              };
              if (last)
                last.next = task;
              if (!head) {
                head = task;
                notify();
              }
              last = task;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var userAgent = __w_pdfjs_require__2(32);
            var global2 = __w_pdfjs_require__2(10);
            module2.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var userAgent = __w_pdfjs_require__2(32);
            module2.exports = /web0s(?!.*chrome)/i.test(userAgent);
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var anObject = __w_pdfjs_require__2(49);
            var isObject = __w_pdfjs_require__2(24);
            var newPromiseCapability = __w_pdfjs_require__2(125);
            module2.exports = function(C, x) {
              anObject(C);
              if (isObject(x) && x.constructor === C)
                return x;
              var promiseCapability = newPromiseCapability.f(C);
              var resolve = promiseCapability.resolve;
              resolve(x);
              return promiseCapability.promise;
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var aCallable = __w_pdfjs_require__2(34);
            var PromiseCapability = function(C) {
              var resolve, reject;
              this.promise = new C(function($$resolve, $$reject) {
                if (resolve !== void 0 || reject !== void 0)
                  throw TypeError("Bad Promise constructor");
                resolve = $$resolve;
                reject = $$reject;
              });
              this.resolve = aCallable(resolve);
              this.reject = aCallable(reject);
            };
            module2.exports.f = function(C) {
              return new PromiseCapability(C);
            };
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var global2 = __w_pdfjs_require__2(10);
            module2.exports = function(a, b) {
              var console2 = global2.console;
              if (console2 && console2.error) {
                arguments.length == 1 ? console2.error(a) : console2.error(a, b);
              }
            };
          },
          (module2) => {
            module2.exports = function(exec) {
              try {
                return {
                  error: false,
                  value: exec()
                };
              } catch (error) {
                return {
                  error: true,
                  value: error
                };
              }
            };
          },
          (module2) => {
            module2.exports = typeof window == "object";
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var $ = __w_pdfjs_require__2(9);
            var call = __w_pdfjs_require__2(14);
            var aCallable = __w_pdfjs_require__2(34);
            var newPromiseCapabilityModule = __w_pdfjs_require__2(125);
            var perform = __w_pdfjs_require__2(127);
            var iterate = __w_pdfjs_require__2(87);
            $({
              target: "Promise",
              stat: true
            }, {
              allSettled: function allSettled(iterable) {
                var C = this;
                var capability = newPromiseCapabilityModule.f(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function() {
                  var promiseResolve = aCallable(C.resolve);
                  var values = [];
                  var counter = 0;
                  var remaining = 1;
                  iterate(iterable, function(promise) {
                    var index = counter++;
                    var alreadyCalled = false;
                    remaining++;
                    call(promiseResolve, C, promise).then(function(value) {
                      if (alreadyCalled)
                        return;
                      alreadyCalled = true;
                      values[index] = {
                        status: "fulfilled",
                        value
                      };
                      --remaining || resolve(values);
                    }, function(error) {
                      if (alreadyCalled)
                        return;
                      alreadyCalled = true;
                      values[index] = {
                        status: "rejected",
                        reason: error
                      };
                      --remaining || resolve(values);
                    });
                  });
                  --remaining || resolve(values);
                });
                if (result.error)
                  reject(result.value);
                return capability.promise;
              }
            });
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var $ = __w_pdfjs_require__2(9);
            var aCallable = __w_pdfjs_require__2(34);
            var getBuiltIn = __w_pdfjs_require__2(27);
            var call = __w_pdfjs_require__2(14);
            var newPromiseCapabilityModule = __w_pdfjs_require__2(125);
            var perform = __w_pdfjs_require__2(127);
            var iterate = __w_pdfjs_require__2(87);
            var PROMISE_ANY_ERROR = "No one promise resolved";
            $({
              target: "Promise",
              stat: true
            }, {
              any: function any(iterable) {
                var C = this;
                var AggregateError2 = getBuiltIn("AggregateError");
                var capability = newPromiseCapabilityModule.f(C);
                var resolve = capability.resolve;
                var reject = capability.reject;
                var result = perform(function() {
                  var promiseResolve = aCallable(C.resolve);
                  var errors = [];
                  var counter = 0;
                  var remaining = 1;
                  var alreadyResolved = false;
                  iterate(iterable, function(promise) {
                    var index = counter++;
                    var alreadyRejected = false;
                    remaining++;
                    call(promiseResolve, C, promise).then(function(value) {
                      if (alreadyRejected || alreadyResolved)
                        return;
                      alreadyResolved = true;
                      resolve(value);
                    }, function(error) {
                      if (alreadyRejected || alreadyResolved)
                        return;
                      alreadyRejected = true;
                      errors[index] = error;
                      --remaining || reject(new AggregateError2(errors, PROMISE_ANY_ERROR));
                    });
                  });
                  --remaining || reject(new AggregateError2(errors, PROMISE_ANY_ERROR));
                });
                if (result.error)
                  reject(result.value);
                return capability.promise;
              }
            });
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var $ = __w_pdfjs_require__2(9);
            var IS_PURE = __w_pdfjs_require__2(39);
            var NativePromise = __w_pdfjs_require__2(108);
            var fails = __w_pdfjs_require__2(13);
            var getBuiltIn = __w_pdfjs_require__2(27);
            var isCallable = __w_pdfjs_require__2(25);
            var speciesConstructor = __w_pdfjs_require__2(113);
            var promiseResolve = __w_pdfjs_require__2(124);
            var redefine = __w_pdfjs_require__2(50);
            var NON_GENERIC = !!NativePromise && fails(function() {
              NativePromise.prototype["finally"].call({
                then: function() {
                }
              }, function() {
              });
            });
            $({
              target: "Promise",
              proto: true,
              real: true,
              forced: NON_GENERIC
            }, {
              "finally": function(onFinally) {
                var C = speciesConstructor(this, getBuiltIn("Promise"));
                var isFunction = isCallable(onFinally);
                return this.then(isFunction ? function(x) {
                  return promiseResolve(C, onFinally()).then(function() {
                    return x;
                  });
                } : onFinally, isFunction ? function(e) {
                  return promiseResolve(C, onFinally()).then(function() {
                    throw e;
                  });
                } : onFinally);
              }
            });
            if (!IS_PURE && isCallable(NativePromise)) {
              var method = getBuiltIn("Promise").prototype["finally"];
              if (NativePromise.prototype["finally"] !== method) {
                redefine(NativePromise.prototype, "finally", method, { unsafe: true });
              }
            }
          },
          (__unused_webpack_module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            "use strict";
            var charAt = __w_pdfjs_require__2(133).charAt;
            var toString = __w_pdfjs_require__2(103);
            var InternalStateModule = __w_pdfjs_require__2(52);
            var defineIterator = __w_pdfjs_require__2(78);
            var STRING_ITERATOR = "String Iterator";
            var setInternalState = InternalStateModule.set;
            var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
            defineIterator(String, "String", function(iterated) {
              setInternalState(this, {
                type: STRING_ITERATOR,
                string: toString(iterated),
                index: 0
              });
            }, function next() {
              var state = getInternalState(this);
              var string = state.string;
              var index = state.index;
              var point;
              if (index >= string.length)
                return {
                  value: void 0,
                  done: true
                };
              point = charAt(string, index);
              state.index += point.length;
              return {
                value: point,
                done: false
              };
            });
          },
          (module2, __unused_webpack_exports, __w_pdfjs_require__2) => {
            var uncurryThis = __w_pdfjs_require__2(19);
            var toIntegerOrInfinity = __w_pdfjs_require__2(63);
            var toString = __w_pdfjs_require__2(103);
            var requireObjectCoercible = __w_pdfjs_require__2(21);
            var charAt = uncurryThis("".charAt);
            var charCodeAt = uncurryThis("".charCodeAt);
            var stringSlice = uncurryThis("".slice);
            var createMethod = function(CONVERT_TO_STRING) {
              return function($this, pos) {
                var S = toString(requireObjectCoercible($this));
                var position = toIntegerOrInfinity(pos);
                var size = S.length;
                var first, second;
                if (position < 0 || position >= size)
                  return CONVERT_TO_STRING ? "" : void 0;
                first = charCodeAt(S, position);
                return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
              };
            };
            module2.exports = {
              codeAt: createMethod(false),
              charAt: createMethod(true)
            };
          },
          function(__unused_webpack_module2, exports2) {
            (function(global2, factory) {
              true ? factory(exports2) : 0;
            })(this, function(exports3) {
              "use strict";
              var SymbolPolyfill = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol : function(description) {
                return "Symbol(" + description + ")";
              };
              function noop() {
                return void 0;
              }
              function getGlobals() {
                if (typeof self !== "undefined") {
                  return self;
                } else if (typeof window !== "undefined") {
                  return window;
                } else if (typeof global !== "undefined") {
                  return global;
                }
                return void 0;
              }
              var globals = getGlobals();
              function typeIsObject(x) {
                return typeof x === "object" && x !== null || typeof x === "function";
              }
              var rethrowAssertionErrorRejection = noop;
              var originalPromise = Promise;
              var originalPromiseThen = Promise.prototype.then;
              var originalPromiseResolve = Promise.resolve.bind(originalPromise);
              var originalPromiseReject = Promise.reject.bind(originalPromise);
              function newPromise(executor) {
                return new originalPromise(executor);
              }
              function promiseResolvedWith(value) {
                return originalPromiseResolve(value);
              }
              function promiseRejectedWith(reason) {
                return originalPromiseReject(reason);
              }
              function PerformPromiseThen(promise, onFulfilled, onRejected) {
                return originalPromiseThen.call(promise, onFulfilled, onRejected);
              }
              function uponPromise(promise, onFulfilled, onRejected) {
                PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
              }
              function uponFulfillment(promise, onFulfilled) {
                uponPromise(promise, onFulfilled);
              }
              function uponRejection(promise, onRejected) {
                uponPromise(promise, void 0, onRejected);
              }
              function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
                return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
              }
              function setPromiseIsHandledToTrue(promise) {
                PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
              }
              var queueMicrotask = function() {
                var globalQueueMicrotask = globals && globals.queueMicrotask;
                if (typeof globalQueueMicrotask === "function") {
                  return globalQueueMicrotask;
                }
                var resolvedPromise = promiseResolvedWith(void 0);
                return function(fn) {
                  return PerformPromiseThen(resolvedPromise, fn);
                };
              }();
              function reflectCall(F, V, args) {
                if (typeof F !== "function") {
                  throw new TypeError("Argument is not a function");
                }
                return Function.prototype.apply.call(F, V, args);
              }
              function promiseCall(F, V, args) {
                try {
                  return promiseResolvedWith(reflectCall(F, V, args));
                } catch (value) {
                  return promiseRejectedWith(value);
                }
              }
              var QUEUE_MAX_ARRAY_SIZE = 16384;
              var SimpleQueue = function() {
                function SimpleQueue2() {
                  this._cursor = 0;
                  this._size = 0;
                  this._front = {
                    _elements: [],
                    _next: void 0
                  };
                  this._back = this._front;
                  this._cursor = 0;
                  this._size = 0;
                }
                Object.defineProperty(SimpleQueue2.prototype, "length", {
                  get: function() {
                    return this._size;
                  },
                  enumerable: false,
                  configurable: true
                });
                SimpleQueue2.prototype.push = function(element) {
                  var oldBack = this._back;
                  var newBack = oldBack;
                  if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
                    newBack = {
                      _elements: [],
                      _next: void 0
                    };
                  }
                  oldBack._elements.push(element);
                  if (newBack !== oldBack) {
                    this._back = newBack;
                    oldBack._next = newBack;
                  }
                  ++this._size;
                };
                SimpleQueue2.prototype.shift = function() {
                  var oldFront = this._front;
                  var newFront = oldFront;
                  var oldCursor = this._cursor;
                  var newCursor = oldCursor + 1;
                  var elements = oldFront._elements;
                  var element = elements[oldCursor];
                  if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
                    newFront = oldFront._next;
                    newCursor = 0;
                  }
                  --this._size;
                  this._cursor = newCursor;
                  if (oldFront !== newFront) {
                    this._front = newFront;
                  }
                  elements[oldCursor] = void 0;
                  return element;
                };
                SimpleQueue2.prototype.forEach = function(callback) {
                  var i = this._cursor;
                  var node = this._front;
                  var elements = node._elements;
                  while (i !== elements.length || node._next !== void 0) {
                    if (i === elements.length) {
                      node = node._next;
                      elements = node._elements;
                      i = 0;
                      if (elements.length === 0) {
                        break;
                      }
                    }
                    callback(elements[i]);
                    ++i;
                  }
                };
                SimpleQueue2.prototype.peek = function() {
                  var front = this._front;
                  var cursor = this._cursor;
                  return front._elements[cursor];
                };
                return SimpleQueue2;
              }();
              function ReadableStreamReaderGenericInitialize(reader, stream) {
                reader._ownerReadableStream = stream;
                stream._reader = reader;
                if (stream._state === "readable") {
                  defaultReaderClosedPromiseInitialize(reader);
                } else if (stream._state === "closed") {
                  defaultReaderClosedPromiseInitializeAsResolved(reader);
                } else {
                  defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
                }
              }
              function ReadableStreamReaderGenericCancel(reader, reason) {
                var stream = reader._ownerReadableStream;
                return ReadableStreamCancel(stream, reason);
              }
              function ReadableStreamReaderGenericRelease(reader) {
                if (reader._ownerReadableStream._state === "readable") {
                  defaultReaderClosedPromiseReject(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
                } else {
                  defaultReaderClosedPromiseResetToRejected(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
                }
                reader._ownerReadableStream._reader = void 0;
                reader._ownerReadableStream = void 0;
              }
              function readerLockException(name) {
                return new TypeError("Cannot " + name + " a stream using a released reader");
              }
              function defaultReaderClosedPromiseInitialize(reader) {
                reader._closedPromise = newPromise(function(resolve, reject) {
                  reader._closedPromise_resolve = resolve;
                  reader._closedPromise_reject = reject;
                });
              }
              function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
                defaultReaderClosedPromiseInitialize(reader);
                defaultReaderClosedPromiseReject(reader, reason);
              }
              function defaultReaderClosedPromiseInitializeAsResolved(reader) {
                defaultReaderClosedPromiseInitialize(reader);
                defaultReaderClosedPromiseResolve(reader);
              }
              function defaultReaderClosedPromiseReject(reader, reason) {
                if (reader._closedPromise_reject === void 0) {
                  return;
                }
                setPromiseIsHandledToTrue(reader._closedPromise);
                reader._closedPromise_reject(reason);
                reader._closedPromise_resolve = void 0;
                reader._closedPromise_reject = void 0;
              }
              function defaultReaderClosedPromiseResetToRejected(reader, reason) {
                defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
              }
              function defaultReaderClosedPromiseResolve(reader) {
                if (reader._closedPromise_resolve === void 0) {
                  return;
                }
                reader._closedPromise_resolve(void 0);
                reader._closedPromise_resolve = void 0;
                reader._closedPromise_reject = void 0;
              }
              var AbortSteps = SymbolPolyfill("[[AbortSteps]]");
              var ErrorSteps = SymbolPolyfill("[[ErrorSteps]]");
              var CancelSteps = SymbolPolyfill("[[CancelSteps]]");
              var PullSteps = SymbolPolyfill("[[PullSteps]]");
              var NumberIsFinite = Number.isFinite || function(x) {
                return typeof x === "number" && isFinite(x);
              };
              var MathTrunc = Math.trunc || function(v) {
                return v < 0 ? Math.ceil(v) : Math.floor(v);
              };
              function isDictionary(x) {
                return typeof x === "object" || typeof x === "function";
              }
              function assertDictionary(obj, context) {
                if (obj !== void 0 && !isDictionary(obj)) {
                  throw new TypeError(context + " is not an object.");
                }
              }
              function assertFunction(x, context) {
                if (typeof x !== "function") {
                  throw new TypeError(context + " is not a function.");
                }
              }
              function isObject(x) {
                return typeof x === "object" && x !== null || typeof x === "function";
              }
              function assertObject(x, context) {
                if (!isObject(x)) {
                  throw new TypeError(context + " is not an object.");
                }
              }
              function assertRequiredArgument(x, position, context) {
                if (x === void 0) {
                  throw new TypeError("Parameter " + position + " is required in '" + context + "'.");
                }
              }
              function assertRequiredField(x, field, context) {
                if (x === void 0) {
                  throw new TypeError(field + " is required in '" + context + "'.");
                }
              }
              function convertUnrestrictedDouble(value) {
                return Number(value);
              }
              function censorNegativeZero(x) {
                return x === 0 ? 0 : x;
              }
              function integerPart(x) {
                return censorNegativeZero(MathTrunc(x));
              }
              function convertUnsignedLongLongWithEnforceRange(value, context) {
                var lowerBound = 0;
                var upperBound = Number.MAX_SAFE_INTEGER;
                var x = Number(value);
                x = censorNegativeZero(x);
                if (!NumberIsFinite(x)) {
                  throw new TypeError(context + " is not a finite number");
                }
                x = integerPart(x);
                if (x < lowerBound || x > upperBound) {
                  throw new TypeError(context + " is outside the accepted range of " + lowerBound + " to " + upperBound + ", inclusive");
                }
                if (!NumberIsFinite(x) || x === 0) {
                  return 0;
                }
                return x;
              }
              function assertReadableStream(x, context) {
                if (!IsReadableStream(x)) {
                  throw new TypeError(context + " is not a ReadableStream.");
                }
              }
              function AcquireReadableStreamDefaultReader(stream) {
                return new ReadableStreamDefaultReader(stream);
              }
              function ReadableStreamAddReadRequest(stream, readRequest) {
                stream._reader._readRequests.push(readRequest);
              }
              function ReadableStreamFulfillReadRequest(stream, chunk, done) {
                var reader = stream._reader;
                var readRequest = reader._readRequests.shift();
                if (done) {
                  readRequest._closeSteps();
                } else {
                  readRequest._chunkSteps(chunk);
                }
              }
              function ReadableStreamGetNumReadRequests(stream) {
                return stream._reader._readRequests.length;
              }
              function ReadableStreamHasDefaultReader(stream) {
                var reader = stream._reader;
                if (reader === void 0) {
                  return false;
                }
                if (!IsReadableStreamDefaultReader(reader)) {
                  return false;
                }
                return true;
              }
              var ReadableStreamDefaultReader = function() {
                function ReadableStreamDefaultReader2(stream) {
                  assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
                  assertReadableStream(stream, "First parameter");
                  if (IsReadableStreamLocked(stream)) {
                    throw new TypeError("This stream has already been locked for exclusive reading by another reader");
                  }
                  ReadableStreamReaderGenericInitialize(this, stream);
                  this._readRequests = new SimpleQueue();
                }
                Object.defineProperty(ReadableStreamDefaultReader2.prototype, "closed", {
                  get: function() {
                    if (!IsReadableStreamDefaultReader(this)) {
                      return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
                    }
                    return this._closedPromise;
                  },
                  enumerable: false,
                  configurable: true
                });
                ReadableStreamDefaultReader2.prototype.cancel = function(reason) {
                  if (reason === void 0) {
                    reason = void 0;
                  }
                  if (!IsReadableStreamDefaultReader(this)) {
                    return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
                  }
                  if (this._ownerReadableStream === void 0) {
                    return promiseRejectedWith(readerLockException("cancel"));
                  }
                  return ReadableStreamReaderGenericCancel(this, reason);
                };
                ReadableStreamDefaultReader2.prototype.read = function() {
                  if (!IsReadableStreamDefaultReader(this)) {
                    return promiseRejectedWith(defaultReaderBrandCheckException("read"));
                  }
                  if (this._ownerReadableStream === void 0) {
                    return promiseRejectedWith(readerLockException("read from"));
                  }
                  var resolvePromise;
                  var rejectPromise;
                  var promise = newPromise(function(resolve, reject) {
                    resolvePromise = resolve;
                    rejectPromise = reject;
                  });
                  var readRequest = {
                    _chunkSteps: function(chunk) {
                      return resolvePromise({
                        value: chunk,
                        done: false
                      });
                    },
                    _closeSteps: function() {
                      return resolvePromise({
                        value: void 0,
                        done: true
                      });
                    },
                    _errorSteps: function(e) {
                      return rejectPromise(e);
                    }
                  };
                  ReadableStreamDefaultReaderRead(this, readRequest);
                  return promise;
                };
                ReadableStreamDefaultReader2.prototype.releaseLock = function() {
                  if (!IsReadableStreamDefaultReader(this)) {
                    throw defaultReaderBrandCheckException("releaseLock");
                  }
                  if (this._ownerReadableStream === void 0) {
                    return;
                  }
                  if (this._readRequests.length > 0) {
                    throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
                  }
                  ReadableStreamReaderGenericRelease(this);
                };
                return ReadableStreamDefaultReader2;
              }();
              Object.defineProperties(ReadableStreamDefaultReader.prototype, {
                cancel: { enumerable: true },
                read: { enumerable: true },
                releaseLock: { enumerable: true },
                closed: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
                  value: "ReadableStreamDefaultReader",
                  configurable: true
                });
              }
              function IsReadableStreamDefaultReader(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_readRequests")) {
                  return false;
                }
                return x instanceof ReadableStreamDefaultReader;
              }
              function ReadableStreamDefaultReaderRead(reader, readRequest) {
                var stream = reader._ownerReadableStream;
                stream._disturbed = true;
                if (stream._state === "closed") {
                  readRequest._closeSteps();
                } else if (stream._state === "errored") {
                  readRequest._errorSteps(stream._storedError);
                } else {
                  stream._readableStreamController[PullSteps](readRequest);
                }
              }
              function defaultReaderBrandCheckException(name) {
                return new TypeError("ReadableStreamDefaultReader.prototype." + name + " can only be used on a ReadableStreamDefaultReader");
              }
              var _a;
              var AsyncIteratorPrototype;
              if (typeof SymbolPolyfill.asyncIterator === "symbol") {
                AsyncIteratorPrototype = (_a = {}, _a[SymbolPolyfill.asyncIterator] = function() {
                  return this;
                }, _a);
                Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, { enumerable: false });
              }
              var ReadableStreamAsyncIteratorImpl = function() {
                function ReadableStreamAsyncIteratorImpl2(reader, preventCancel) {
                  this._ongoingPromise = void 0;
                  this._isFinished = false;
                  this._reader = reader;
                  this._preventCancel = preventCancel;
                }
                ReadableStreamAsyncIteratorImpl2.prototype.next = function() {
                  var _this = this;
                  var nextSteps = function() {
                    return _this._nextSteps();
                  };
                  this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
                  return this._ongoingPromise;
                };
                ReadableStreamAsyncIteratorImpl2.prototype.return = function(value) {
                  var _this = this;
                  var returnSteps = function() {
                    return _this._returnSteps(value);
                  };
                  return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
                };
                ReadableStreamAsyncIteratorImpl2.prototype._nextSteps = function() {
                  var _this = this;
                  if (this._isFinished) {
                    return Promise.resolve({
                      value: void 0,
                      done: true
                    });
                  }
                  var reader = this._reader;
                  if (reader._ownerReadableStream === void 0) {
                    return promiseRejectedWith(readerLockException("iterate"));
                  }
                  var resolvePromise;
                  var rejectPromise;
                  var promise = newPromise(function(resolve, reject) {
                    resolvePromise = resolve;
                    rejectPromise = reject;
                  });
                  var readRequest = {
                    _chunkSteps: function(chunk) {
                      _this._ongoingPromise = void 0;
                      queueMicrotask(function() {
                        return resolvePromise({
                          value: chunk,
                          done: false
                        });
                      });
                    },
                    _closeSteps: function() {
                      _this._ongoingPromise = void 0;
                      _this._isFinished = true;
                      ReadableStreamReaderGenericRelease(reader);
                      resolvePromise({
                        value: void 0,
                        done: true
                      });
                    },
                    _errorSteps: function(reason) {
                      _this._ongoingPromise = void 0;
                      _this._isFinished = true;
                      ReadableStreamReaderGenericRelease(reader);
                      rejectPromise(reason);
                    }
                  };
                  ReadableStreamDefaultReaderRead(reader, readRequest);
                  return promise;
                };
                ReadableStreamAsyncIteratorImpl2.prototype._returnSteps = function(value) {
                  if (this._isFinished) {
                    return Promise.resolve({
                      value,
                      done: true
                    });
                  }
                  this._isFinished = true;
                  var reader = this._reader;
                  if (reader._ownerReadableStream === void 0) {
                    return promiseRejectedWith(readerLockException("finish iterating"));
                  }
                  if (!this._preventCancel) {
                    var result = ReadableStreamReaderGenericCancel(reader, value);
                    ReadableStreamReaderGenericRelease(reader);
                    return transformPromiseWith(result, function() {
                      return {
                        value,
                        done: true
                      };
                    });
                  }
                  ReadableStreamReaderGenericRelease(reader);
                  return promiseResolvedWith({
                    value,
                    done: true
                  });
                };
                return ReadableStreamAsyncIteratorImpl2;
              }();
              var ReadableStreamAsyncIteratorPrototype = {
                next: function() {
                  if (!IsReadableStreamAsyncIterator(this)) {
                    return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
                  }
                  return this._asyncIteratorImpl.next();
                },
                return: function(value) {
                  if (!IsReadableStreamAsyncIterator(this)) {
                    return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
                  }
                  return this._asyncIteratorImpl.return(value);
                }
              };
              if (AsyncIteratorPrototype !== void 0) {
                Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
              }
              function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
                var reader = AcquireReadableStreamDefaultReader(stream);
                var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
                var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
                iterator._asyncIteratorImpl = impl;
                return iterator;
              }
              function IsReadableStreamAsyncIterator(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_asyncIteratorImpl")) {
                  return false;
                }
                try {
                  return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
                } catch (_a2) {
                  return false;
                }
              }
              function streamAsyncIteratorBrandCheckException(name) {
                return new TypeError("ReadableStreamAsyncIterator." + name + " can only be used on a ReadableSteamAsyncIterator");
              }
              var NumberIsNaN = Number.isNaN || function(x) {
                return x !== x;
              };
              function CreateArrayFromList(elements) {
                return elements.slice();
              }
              function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
                new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
              }
              function TransferArrayBuffer(O) {
                return O;
              }
              function IsDetachedBuffer(O) {
                return false;
              }
              function ArrayBufferSlice(buffer, begin, end) {
                if (buffer.slice) {
                  return buffer.slice(begin, end);
                }
                var length = end - begin;
                var slice = new ArrayBuffer(length);
                CopyDataBlockBytes(slice, 0, buffer, begin, length);
                return slice;
              }
              function IsNonNegativeNumber(v) {
                if (typeof v !== "number") {
                  return false;
                }
                if (NumberIsNaN(v)) {
                  return false;
                }
                if (v < 0) {
                  return false;
                }
                return true;
              }
              function CloneAsUint8Array(O) {
                var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
                return new Uint8Array(buffer);
              }
              function DequeueValue(container) {
                var pair = container._queue.shift();
                container._queueTotalSize -= pair.size;
                if (container._queueTotalSize < 0) {
                  container._queueTotalSize = 0;
                }
                return pair.value;
              }
              function EnqueueValueWithSize(container, value, size) {
                if (!IsNonNegativeNumber(size) || size === Infinity) {
                  throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
                }
                container._queue.push({
                  value,
                  size
                });
                container._queueTotalSize += size;
              }
              function PeekQueueValue(container) {
                var pair = container._queue.peek();
                return pair.value;
              }
              function ResetQueue(container) {
                container._queue = new SimpleQueue();
                container._queueTotalSize = 0;
              }
              var ReadableStreamBYOBRequest = function() {
                function ReadableStreamBYOBRequest2() {
                  throw new TypeError("Illegal constructor");
                }
                Object.defineProperty(ReadableStreamBYOBRequest2.prototype, "view", {
                  get: function() {
                    if (!IsReadableStreamBYOBRequest(this)) {
                      throw byobRequestBrandCheckException("view");
                    }
                    return this._view;
                  },
                  enumerable: false,
                  configurable: true
                });
                ReadableStreamBYOBRequest2.prototype.respond = function(bytesWritten) {
                  if (!IsReadableStreamBYOBRequest(this)) {
                    throw byobRequestBrandCheckException("respond");
                  }
                  assertRequiredArgument(bytesWritten, 1, "respond");
                  bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
                  if (this._associatedReadableByteStreamController === void 0) {
                    throw new TypeError("This BYOB request has been invalidated");
                  }
                  if (IsDetachedBuffer(this._view.buffer))
                    ;
                  ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
                };
                ReadableStreamBYOBRequest2.prototype.respondWithNewView = function(view) {
                  if (!IsReadableStreamBYOBRequest(this)) {
                    throw byobRequestBrandCheckException("respondWithNewView");
                  }
                  assertRequiredArgument(view, 1, "respondWithNewView");
                  if (!ArrayBuffer.isView(view)) {
                    throw new TypeError("You can only respond with array buffer views");
                  }
                  if (this._associatedReadableByteStreamController === void 0) {
                    throw new TypeError("This BYOB request has been invalidated");
                  }
                  if (IsDetachedBuffer(view.buffer))
                    ;
                  ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
                };
                return ReadableStreamBYOBRequest2;
              }();
              Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
                respond: { enumerable: true },
                respondWithNewView: { enumerable: true },
                view: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
                  value: "ReadableStreamBYOBRequest",
                  configurable: true
                });
              }
              var ReadableByteStreamController = function() {
                function ReadableByteStreamController2() {
                  throw new TypeError("Illegal constructor");
                }
                Object.defineProperty(ReadableByteStreamController2.prototype, "byobRequest", {
                  get: function() {
                    if (!IsReadableByteStreamController(this)) {
                      throw byteStreamControllerBrandCheckException("byobRequest");
                    }
                    return ReadableByteStreamControllerGetBYOBRequest(this);
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(ReadableByteStreamController2.prototype, "desiredSize", {
                  get: function() {
                    if (!IsReadableByteStreamController(this)) {
                      throw byteStreamControllerBrandCheckException("desiredSize");
                    }
                    return ReadableByteStreamControllerGetDesiredSize(this);
                  },
                  enumerable: false,
                  configurable: true
                });
                ReadableByteStreamController2.prototype.close = function() {
                  if (!IsReadableByteStreamController(this)) {
                    throw byteStreamControllerBrandCheckException("close");
                  }
                  if (this._closeRequested) {
                    throw new TypeError("The stream has already been closed; do not close it again!");
                  }
                  var state = this._controlledReadableByteStream._state;
                  if (state !== "readable") {
                    throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be closed");
                  }
                  ReadableByteStreamControllerClose(this);
                };
                ReadableByteStreamController2.prototype.enqueue = function(chunk) {
                  if (!IsReadableByteStreamController(this)) {
                    throw byteStreamControllerBrandCheckException("enqueue");
                  }
                  assertRequiredArgument(chunk, 1, "enqueue");
                  if (!ArrayBuffer.isView(chunk)) {
                    throw new TypeError("chunk must be an array buffer view");
                  }
                  if (chunk.byteLength === 0) {
                    throw new TypeError("chunk must have non-zero byteLength");
                  }
                  if (chunk.buffer.byteLength === 0) {
                    throw new TypeError("chunk's buffer must have non-zero byteLength");
                  }
                  if (this._closeRequested) {
                    throw new TypeError("stream is closed or draining");
                  }
                  var state = this._controlledReadableByteStream._state;
                  if (state !== "readable") {
                    throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be enqueued to");
                  }
                  ReadableByteStreamControllerEnqueue(this, chunk);
                };
                ReadableByteStreamController2.prototype.error = function(e) {
                  if (e === void 0) {
                    e = void 0;
                  }
                  if (!IsReadableByteStreamController(this)) {
                    throw byteStreamControllerBrandCheckException("error");
                  }
                  ReadableByteStreamControllerError(this, e);
                };
                ReadableByteStreamController2.prototype[CancelSteps] = function(reason) {
                  ReadableByteStreamControllerClearPendingPullIntos(this);
                  ResetQueue(this);
                  var result = this._cancelAlgorithm(reason);
                  ReadableByteStreamControllerClearAlgorithms(this);
                  return result;
                };
                ReadableByteStreamController2.prototype[PullSteps] = function(readRequest) {
                  var stream = this._controlledReadableByteStream;
                  if (this._queueTotalSize > 0) {
                    var entry = this._queue.shift();
                    this._queueTotalSize -= entry.byteLength;
                    ReadableByteStreamControllerHandleQueueDrain(this);
                    var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                    readRequest._chunkSteps(view);
                    return;
                  }
                  var autoAllocateChunkSize = this._autoAllocateChunkSize;
                  if (autoAllocateChunkSize !== void 0) {
                    var buffer = void 0;
                    try {
                      buffer = new ArrayBuffer(autoAllocateChunkSize);
                    } catch (bufferE) {
                      readRequest._errorSteps(bufferE);
                      return;
                    }
                    var pullIntoDescriptor = {
                      buffer,
                      bufferByteLength: autoAllocateChunkSize,
                      byteOffset: 0,
                      byteLength: autoAllocateChunkSize,
                      bytesFilled: 0,
                      elementSize: 1,
                      viewConstructor: Uint8Array,
                      readerType: "default"
                    };
                    this._pendingPullIntos.push(pullIntoDescriptor);
                  }
                  ReadableStreamAddReadRequest(stream, readRequest);
                  ReadableByteStreamControllerCallPullIfNeeded(this);
                };
                return ReadableByteStreamController2;
              }();
              Object.defineProperties(ReadableByteStreamController.prototype, {
                close: { enumerable: true },
                enqueue: { enumerable: true },
                error: { enumerable: true },
                byobRequest: { enumerable: true },
                desiredSize: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
                  value: "ReadableByteStreamController",
                  configurable: true
                });
              }
              function IsReadableByteStreamController(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableByteStream")) {
                  return false;
                }
                return x instanceof ReadableByteStreamController;
              }
              function IsReadableStreamBYOBRequest(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController")) {
                  return false;
                }
                return x instanceof ReadableStreamBYOBRequest;
              }
              function ReadableByteStreamControllerCallPullIfNeeded(controller) {
                var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
                if (!shouldPull) {
                  return;
                }
                if (controller._pulling) {
                  controller._pullAgain = true;
                  return;
                }
                controller._pulling = true;
                var pullPromise = controller._pullAlgorithm();
                uponPromise(pullPromise, function() {
                  controller._pulling = false;
                  if (controller._pullAgain) {
                    controller._pullAgain = false;
                    ReadableByteStreamControllerCallPullIfNeeded(controller);
                  }
                }, function(e) {
                  ReadableByteStreamControllerError(controller, e);
                });
              }
              function ReadableByteStreamControllerClearPendingPullIntos(controller) {
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                controller._pendingPullIntos = new SimpleQueue();
              }
              function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
                var done = false;
                if (stream._state === "closed") {
                  done = true;
                }
                var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                if (pullIntoDescriptor.readerType === "default") {
                  ReadableStreamFulfillReadRequest(stream, filledView, done);
                } else {
                  ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
                }
              }
              function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
                var bytesFilled = pullIntoDescriptor.bytesFilled;
                var elementSize = pullIntoDescriptor.elementSize;
                return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
              }
              function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
                controller._queue.push({
                  buffer,
                  byteOffset,
                  byteLength
                });
                controller._queueTotalSize += byteLength;
              }
              function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
                var elementSize = pullIntoDescriptor.elementSize;
                var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
                var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
                var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
                var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
                var totalBytesToCopyRemaining = maxBytesToCopy;
                var ready = false;
                if (maxAlignedBytes > currentAlignedBytes) {
                  totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
                  ready = true;
                }
                var queue = controller._queue;
                while (totalBytesToCopyRemaining > 0) {
                  var headOfQueue = queue.peek();
                  var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
                  var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                  CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
                  if (headOfQueue.byteLength === bytesToCopy) {
                    queue.shift();
                  } else {
                    headOfQueue.byteOffset += bytesToCopy;
                    headOfQueue.byteLength -= bytesToCopy;
                  }
                  controller._queueTotalSize -= bytesToCopy;
                  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
                  totalBytesToCopyRemaining -= bytesToCopy;
                }
                return ready;
              }
              function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
                pullIntoDescriptor.bytesFilled += size;
              }
              function ReadableByteStreamControllerHandleQueueDrain(controller) {
                if (controller._queueTotalSize === 0 && controller._closeRequested) {
                  ReadableByteStreamControllerClearAlgorithms(controller);
                  ReadableStreamClose(controller._controlledReadableByteStream);
                } else {
                  ReadableByteStreamControllerCallPullIfNeeded(controller);
                }
              }
              function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
                if (controller._byobRequest === null) {
                  return;
                }
                controller._byobRequest._associatedReadableByteStreamController = void 0;
                controller._byobRequest._view = null;
                controller._byobRequest = null;
              }
              function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
                while (controller._pendingPullIntos.length > 0) {
                  if (controller._queueTotalSize === 0) {
                    return;
                  }
                  var pullIntoDescriptor = controller._pendingPullIntos.peek();
                  if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                    ReadableByteStreamControllerShiftPendingPullInto(controller);
                    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
                  }
                }
              }
              function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
                var stream = controller._controlledReadableByteStream;
                var elementSize = 1;
                if (view.constructor !== DataView) {
                  elementSize = view.constructor.BYTES_PER_ELEMENT;
                }
                var ctor = view.constructor;
                var buffer = TransferArrayBuffer(view.buffer);
                var pullIntoDescriptor = {
                  buffer,
                  bufferByteLength: buffer.byteLength,
                  byteOffset: view.byteOffset,
                  byteLength: view.byteLength,
                  bytesFilled: 0,
                  elementSize,
                  viewConstructor: ctor,
                  readerType: "byob"
                };
                if (controller._pendingPullIntos.length > 0) {
                  controller._pendingPullIntos.push(pullIntoDescriptor);
                  ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
                  return;
                }
                if (stream._state === "closed") {
                  var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
                  readIntoRequest._closeSteps(emptyView);
                  return;
                }
                if (controller._queueTotalSize > 0) {
                  if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                    var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                    ReadableByteStreamControllerHandleQueueDrain(controller);
                    readIntoRequest._chunkSteps(filledView);
                    return;
                  }
                  if (controller._closeRequested) {
                    var e = new TypeError("Insufficient bytes to fill elements in the given buffer");
                    ReadableByteStreamControllerError(controller, e);
                    readIntoRequest._errorSteps(e);
                    return;
                  }
                }
                controller._pendingPullIntos.push(pullIntoDescriptor);
                ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
                ReadableByteStreamControllerCallPullIfNeeded(controller);
              }
              function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
                var stream = controller._controlledReadableByteStream;
                if (ReadableStreamHasBYOBReader(stream)) {
                  while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                    var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
                    ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
                  }
                }
              }
              function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
                ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
                if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
                  return;
                }
                ReadableByteStreamControllerShiftPendingPullInto(controller);
                var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
                if (remainderSize > 0) {
                  var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                  var remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
                  ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
                }
                pullIntoDescriptor.bytesFilled -= remainderSize;
                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
                ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
              }
              function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
                var firstDescriptor = controller._pendingPullIntos.peek();
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                var state = controller._controlledReadableByteStream._state;
                if (state === "closed") {
                  ReadableByteStreamControllerRespondInClosedState(controller);
                } else {
                  ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
                }
                ReadableByteStreamControllerCallPullIfNeeded(controller);
              }
              function ReadableByteStreamControllerShiftPendingPullInto(controller) {
                var descriptor = controller._pendingPullIntos.shift();
                return descriptor;
              }
              function ReadableByteStreamControllerShouldCallPull(controller) {
                var stream = controller._controlledReadableByteStream;
                if (stream._state !== "readable") {
                  return false;
                }
                if (controller._closeRequested) {
                  return false;
                }
                if (!controller._started) {
                  return false;
                }
                if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
                  return true;
                }
                if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                  return true;
                }
                var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
                if (desiredSize > 0) {
                  return true;
                }
                return false;
              }
              function ReadableByteStreamControllerClearAlgorithms(controller) {
                controller._pullAlgorithm = void 0;
                controller._cancelAlgorithm = void 0;
              }
              function ReadableByteStreamControllerClose(controller) {
                var stream = controller._controlledReadableByteStream;
                if (controller._closeRequested || stream._state !== "readable") {
                  return;
                }
                if (controller._queueTotalSize > 0) {
                  controller._closeRequested = true;
                  return;
                }
                if (controller._pendingPullIntos.length > 0) {
                  var firstPendingPullInto = controller._pendingPullIntos.peek();
                  if (firstPendingPullInto.bytesFilled > 0) {
                    var e = new TypeError("Insufficient bytes to fill elements in the given buffer");
                    ReadableByteStreamControllerError(controller, e);
                    throw e;
                  }
                }
                ReadableByteStreamControllerClearAlgorithms(controller);
                ReadableStreamClose(stream);
              }
              function ReadableByteStreamControllerEnqueue(controller, chunk) {
                var stream = controller._controlledReadableByteStream;
                if (controller._closeRequested || stream._state !== "readable") {
                  return;
                }
                var buffer = chunk.buffer;
                var byteOffset = chunk.byteOffset;
                var byteLength = chunk.byteLength;
                var transferredBuffer = TransferArrayBuffer(buffer);
                if (controller._pendingPullIntos.length > 0) {
                  var firstPendingPullInto = controller._pendingPullIntos.peek();
                  if (IsDetachedBuffer(firstPendingPullInto.buffer))
                    ;
                  firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
                }
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                if (ReadableStreamHasDefaultReader(stream)) {
                  if (ReadableStreamGetNumReadRequests(stream) === 0) {
                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                  } else {
                    if (controller._pendingPullIntos.length > 0) {
                      ReadableByteStreamControllerShiftPendingPullInto(controller);
                    }
                    var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
                    ReadableStreamFulfillReadRequest(stream, transferredView, false);
                  }
                } else if (ReadableStreamHasBYOBReader(stream)) {
                  ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
                } else {
                  ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
                }
                ReadableByteStreamControllerCallPullIfNeeded(controller);
              }
              function ReadableByteStreamControllerError(controller, e) {
                var stream = controller._controlledReadableByteStream;
                if (stream._state !== "readable") {
                  return;
                }
                ReadableByteStreamControllerClearPendingPullIntos(controller);
                ResetQueue(controller);
                ReadableByteStreamControllerClearAlgorithms(controller);
                ReadableStreamError(stream, e);
              }
              function ReadableByteStreamControllerGetBYOBRequest(controller) {
                if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
                  var firstDescriptor = controller._pendingPullIntos.peek();
                  var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
                  var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
                  SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
                  controller._byobRequest = byobRequest;
                }
                return controller._byobRequest;
              }
              function ReadableByteStreamControllerGetDesiredSize(controller) {
                var state = controller._controlledReadableByteStream._state;
                if (state === "errored") {
                  return null;
                }
                if (state === "closed") {
                  return 0;
                }
                return controller._strategyHWM - controller._queueTotalSize;
              }
              function ReadableByteStreamControllerRespond(controller, bytesWritten) {
                var firstDescriptor = controller._pendingPullIntos.peek();
                var state = controller._controlledReadableByteStream._state;
                if (state === "closed") {
                  if (bytesWritten !== 0) {
                    throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
                  }
                } else {
                  if (bytesWritten === 0) {
                    throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
                  }
                  if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
                    throw new RangeError("bytesWritten out of range");
                  }
                }
                firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
                ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
              }
              function ReadableByteStreamControllerRespondWithNewView(controller, view) {
                var firstDescriptor = controller._pendingPullIntos.peek();
                var state = controller._controlledReadableByteStream._state;
                if (state === "closed") {
                  if (view.byteLength !== 0) {
                    throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
                  }
                } else {
                  if (view.byteLength === 0) {
                    throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
                  }
                }
                if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
                  throw new RangeError("The region specified by view does not match byobRequest");
                }
                if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
                  throw new RangeError("The buffer of view has different capacity than byobRequest");
                }
                if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
                  throw new RangeError("The region specified by view is larger than byobRequest");
                }
                var viewByteLength = view.byteLength;
                firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
                ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
              }
              function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
                controller._controlledReadableByteStream = stream;
                controller._pullAgain = false;
                controller._pulling = false;
                controller._byobRequest = null;
                controller._queue = controller._queueTotalSize = void 0;
                ResetQueue(controller);
                controller._closeRequested = false;
                controller._started = false;
                controller._strategyHWM = highWaterMark;
                controller._pullAlgorithm = pullAlgorithm;
                controller._cancelAlgorithm = cancelAlgorithm;
                controller._autoAllocateChunkSize = autoAllocateChunkSize;
                controller._pendingPullIntos = new SimpleQueue();
                stream._readableStreamController = controller;
                var startResult = startAlgorithm();
                uponPromise(promiseResolvedWith(startResult), function() {
                  controller._started = true;
                  ReadableByteStreamControllerCallPullIfNeeded(controller);
                }, function(r) {
                  ReadableByteStreamControllerError(controller, r);
                });
              }
              function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
                var controller = Object.create(ReadableByteStreamController.prototype);
                var startAlgorithm = function() {
                  return void 0;
                };
                var pullAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                var cancelAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                if (underlyingByteSource.start !== void 0) {
                  startAlgorithm = function() {
                    return underlyingByteSource.start(controller);
                  };
                }
                if (underlyingByteSource.pull !== void 0) {
                  pullAlgorithm = function() {
                    return underlyingByteSource.pull(controller);
                  };
                }
                if (underlyingByteSource.cancel !== void 0) {
                  cancelAlgorithm = function(reason) {
                    return underlyingByteSource.cancel(reason);
                  };
                }
                var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
                if (autoAllocateChunkSize === 0) {
                  throw new TypeError("autoAllocateChunkSize must be greater than 0");
                }
                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
              }
              function SetUpReadableStreamBYOBRequest(request, controller, view) {
                request._associatedReadableByteStreamController = controller;
                request._view = view;
              }
              function byobRequestBrandCheckException(name) {
                return new TypeError("ReadableStreamBYOBRequest.prototype." + name + " can only be used on a ReadableStreamBYOBRequest");
              }
              function byteStreamControllerBrandCheckException(name) {
                return new TypeError("ReadableByteStreamController.prototype." + name + " can only be used on a ReadableByteStreamController");
              }
              function AcquireReadableStreamBYOBReader(stream) {
                return new ReadableStreamBYOBReader(stream);
              }
              function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
                stream._reader._readIntoRequests.push(readIntoRequest);
              }
              function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
                var reader = stream._reader;
                var readIntoRequest = reader._readIntoRequests.shift();
                if (done) {
                  readIntoRequest._closeSteps(chunk);
                } else {
                  readIntoRequest._chunkSteps(chunk);
                }
              }
              function ReadableStreamGetNumReadIntoRequests(stream) {
                return stream._reader._readIntoRequests.length;
              }
              function ReadableStreamHasBYOBReader(stream) {
                var reader = stream._reader;
                if (reader === void 0) {
                  return false;
                }
                if (!IsReadableStreamBYOBReader(reader)) {
                  return false;
                }
                return true;
              }
              var ReadableStreamBYOBReader = function() {
                function ReadableStreamBYOBReader2(stream) {
                  assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
                  assertReadableStream(stream, "First parameter");
                  if (IsReadableStreamLocked(stream)) {
                    throw new TypeError("This stream has already been locked for exclusive reading by another reader");
                  }
                  if (!IsReadableByteStreamController(stream._readableStreamController)) {
                    throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
                  }
                  ReadableStreamReaderGenericInitialize(this, stream);
                  this._readIntoRequests = new SimpleQueue();
                }
                Object.defineProperty(ReadableStreamBYOBReader2.prototype, "closed", {
                  get: function() {
                    if (!IsReadableStreamBYOBReader(this)) {
                      return promiseRejectedWith(byobReaderBrandCheckException("closed"));
                    }
                    return this._closedPromise;
                  },
                  enumerable: false,
                  configurable: true
                });
                ReadableStreamBYOBReader2.prototype.cancel = function(reason) {
                  if (reason === void 0) {
                    reason = void 0;
                  }
                  if (!IsReadableStreamBYOBReader(this)) {
                    return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
                  }
                  if (this._ownerReadableStream === void 0) {
                    return promiseRejectedWith(readerLockException("cancel"));
                  }
                  return ReadableStreamReaderGenericCancel(this, reason);
                };
                ReadableStreamBYOBReader2.prototype.read = function(view) {
                  if (!IsReadableStreamBYOBReader(this)) {
                    return promiseRejectedWith(byobReaderBrandCheckException("read"));
                  }
                  if (!ArrayBuffer.isView(view)) {
                    return promiseRejectedWith(new TypeError("view must be an array buffer view"));
                  }
                  if (view.byteLength === 0) {
                    return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
                  }
                  if (view.buffer.byteLength === 0) {
                    return promiseRejectedWith(new TypeError("view's buffer must have non-zero byteLength"));
                  }
                  if (IsDetachedBuffer(view.buffer))
                    ;
                  if (this._ownerReadableStream === void 0) {
                    return promiseRejectedWith(readerLockException("read from"));
                  }
                  var resolvePromise;
                  var rejectPromise;
                  var promise = newPromise(function(resolve, reject) {
                    resolvePromise = resolve;
                    rejectPromise = reject;
                  });
                  var readIntoRequest = {
                    _chunkSteps: function(chunk) {
                      return resolvePromise({
                        value: chunk,
                        done: false
                      });
                    },
                    _closeSteps: function(chunk) {
                      return resolvePromise({
                        value: chunk,
                        done: true
                      });
                    },
                    _errorSteps: function(e) {
                      return rejectPromise(e);
                    }
                  };
                  ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
                  return promise;
                };
                ReadableStreamBYOBReader2.prototype.releaseLock = function() {
                  if (!IsReadableStreamBYOBReader(this)) {
                    throw byobReaderBrandCheckException("releaseLock");
                  }
                  if (this._ownerReadableStream === void 0) {
                    return;
                  }
                  if (this._readIntoRequests.length > 0) {
                    throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
                  }
                  ReadableStreamReaderGenericRelease(this);
                };
                return ReadableStreamBYOBReader2;
              }();
              Object.defineProperties(ReadableStreamBYOBReader.prototype, {
                cancel: { enumerable: true },
                read: { enumerable: true },
                releaseLock: { enumerable: true },
                closed: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
                  value: "ReadableStreamBYOBReader",
                  configurable: true
                });
              }
              function IsReadableStreamBYOBReader(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_readIntoRequests")) {
                  return false;
                }
                return x instanceof ReadableStreamBYOBReader;
              }
              function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
                var stream = reader._ownerReadableStream;
                stream._disturbed = true;
                if (stream._state === "errored") {
                  readIntoRequest._errorSteps(stream._storedError);
                } else {
                  ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
                }
              }
              function byobReaderBrandCheckException(name) {
                return new TypeError("ReadableStreamBYOBReader.prototype." + name + " can only be used on a ReadableStreamBYOBReader");
              }
              function ExtractHighWaterMark(strategy, defaultHWM) {
                var highWaterMark = strategy.highWaterMark;
                if (highWaterMark === void 0) {
                  return defaultHWM;
                }
                if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
                  throw new RangeError("Invalid highWaterMark");
                }
                return highWaterMark;
              }
              function ExtractSizeAlgorithm(strategy) {
                var size = strategy.size;
                if (!size) {
                  return function() {
                    return 1;
                  };
                }
                return size;
              }
              function convertQueuingStrategy(init, context) {
                assertDictionary(init, context);
                var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
                var size = init === null || init === void 0 ? void 0 : init.size;
                return {
                  highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
                  size: size === void 0 ? void 0 : convertQueuingStrategySize(size, context + " has member 'size' that")
                };
              }
              function convertQueuingStrategySize(fn, context) {
                assertFunction(fn, context);
                return function(chunk) {
                  return convertUnrestrictedDouble(fn(chunk));
                };
              }
              function convertUnderlyingSink(original, context) {
                assertDictionary(original, context);
                var abort = original === null || original === void 0 ? void 0 : original.abort;
                var close = original === null || original === void 0 ? void 0 : original.close;
                var start = original === null || original === void 0 ? void 0 : original.start;
                var type = original === null || original === void 0 ? void 0 : original.type;
                var write = original === null || original === void 0 ? void 0 : original.write;
                return {
                  abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, context + " has member 'abort' that"),
                  close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, context + " has member 'close' that"),
                  start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, context + " has member 'start' that"),
                  write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, context + " has member 'write' that"),
                  type
                };
              }
              function convertUnderlyingSinkAbortCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(reason) {
                  return promiseCall(fn, original, [reason]);
                };
              }
              function convertUnderlyingSinkCloseCallback(fn, original, context) {
                assertFunction(fn, context);
                return function() {
                  return promiseCall(fn, original, []);
                };
              }
              function convertUnderlyingSinkStartCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(controller) {
                  return reflectCall(fn, original, [controller]);
                };
              }
              function convertUnderlyingSinkWriteCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(chunk, controller) {
                  return promiseCall(fn, original, [
                    chunk,
                    controller
                  ]);
                };
              }
              function assertWritableStream(x, context) {
                if (!IsWritableStream(x)) {
                  throw new TypeError(context + " is not a WritableStream.");
                }
              }
              function isAbortSignal(value) {
                if (typeof value !== "object" || value === null) {
                  return false;
                }
                try {
                  return typeof value.aborted === "boolean";
                } catch (_a2) {
                  return false;
                }
              }
              var supportsAbortController = typeof AbortController === "function";
              function createAbortController() {
                if (supportsAbortController) {
                  return new AbortController();
                }
                return void 0;
              }
              var WritableStream = function() {
                function WritableStream2(rawUnderlyingSink, rawStrategy) {
                  if (rawUnderlyingSink === void 0) {
                    rawUnderlyingSink = {};
                  }
                  if (rawStrategy === void 0) {
                    rawStrategy = {};
                  }
                  if (rawUnderlyingSink === void 0) {
                    rawUnderlyingSink = null;
                  } else {
                    assertObject(rawUnderlyingSink, "First parameter");
                  }
                  var strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
                  var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
                  InitializeWritableStream(this);
                  var type = underlyingSink.type;
                  if (type !== void 0) {
                    throw new RangeError("Invalid type is specified");
                  }
                  var sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                  var highWaterMark = ExtractHighWaterMark(strategy, 1);
                  SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
                }
                Object.defineProperty(WritableStream2.prototype, "locked", {
                  get: function() {
                    if (!IsWritableStream(this)) {
                      throw streamBrandCheckException$2("locked");
                    }
                    return IsWritableStreamLocked(this);
                  },
                  enumerable: false,
                  configurable: true
                });
                WritableStream2.prototype.abort = function(reason) {
                  if (reason === void 0) {
                    reason = void 0;
                  }
                  if (!IsWritableStream(this)) {
                    return promiseRejectedWith(streamBrandCheckException$2("abort"));
                  }
                  if (IsWritableStreamLocked(this)) {
                    return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
                  }
                  return WritableStreamAbort(this, reason);
                };
                WritableStream2.prototype.close = function() {
                  if (!IsWritableStream(this)) {
                    return promiseRejectedWith(streamBrandCheckException$2("close"));
                  }
                  if (IsWritableStreamLocked(this)) {
                    return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
                  }
                  if (WritableStreamCloseQueuedOrInFlight(this)) {
                    return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
                  }
                  return WritableStreamClose(this);
                };
                WritableStream2.prototype.getWriter = function() {
                  if (!IsWritableStream(this)) {
                    throw streamBrandCheckException$2("getWriter");
                  }
                  return AcquireWritableStreamDefaultWriter(this);
                };
                return WritableStream2;
              }();
              Object.defineProperties(WritableStream.prototype, {
                abort: { enumerable: true },
                close: { enumerable: true },
                getWriter: { enumerable: true },
                locked: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
                  value: "WritableStream",
                  configurable: true
                });
              }
              function AcquireWritableStreamDefaultWriter(stream) {
                return new WritableStreamDefaultWriter(stream);
              }
              function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
                if (highWaterMark === void 0) {
                  highWaterMark = 1;
                }
                if (sizeAlgorithm === void 0) {
                  sizeAlgorithm = function() {
                    return 1;
                  };
                }
                var stream = Object.create(WritableStream.prototype);
                InitializeWritableStream(stream);
                var controller = Object.create(WritableStreamDefaultController.prototype);
                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
                return stream;
              }
              function InitializeWritableStream(stream) {
                stream._state = "writable";
                stream._storedError = void 0;
                stream._writer = void 0;
                stream._writableStreamController = void 0;
                stream._writeRequests = new SimpleQueue();
                stream._inFlightWriteRequest = void 0;
                stream._closeRequest = void 0;
                stream._inFlightCloseRequest = void 0;
                stream._pendingAbortRequest = void 0;
                stream._backpressure = false;
              }
              function IsWritableStream(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_writableStreamController")) {
                  return false;
                }
                return x instanceof WritableStream;
              }
              function IsWritableStreamLocked(stream) {
                if (stream._writer === void 0) {
                  return false;
                }
                return true;
              }
              function WritableStreamAbort(stream, reason) {
                var _a2;
                if (stream._state === "closed" || stream._state === "errored") {
                  return promiseResolvedWith(void 0);
                }
                stream._writableStreamController._abortReason = reason;
                (_a2 = stream._writableStreamController._abortController) === null || _a2 === void 0 ? void 0 : _a2.abort();
                var state = stream._state;
                if (state === "closed" || state === "errored") {
                  return promiseResolvedWith(void 0);
                }
                if (stream._pendingAbortRequest !== void 0) {
                  return stream._pendingAbortRequest._promise;
                }
                var wasAlreadyErroring = false;
                if (state === "erroring") {
                  wasAlreadyErroring = true;
                  reason = void 0;
                }
                var promise = newPromise(function(resolve, reject) {
                  stream._pendingAbortRequest = {
                    _promise: void 0,
                    _resolve: resolve,
                    _reject: reject,
                    _reason: reason,
                    _wasAlreadyErroring: wasAlreadyErroring
                  };
                });
                stream._pendingAbortRequest._promise = promise;
                if (!wasAlreadyErroring) {
                  WritableStreamStartErroring(stream, reason);
                }
                return promise;
              }
              function WritableStreamClose(stream) {
                var state = stream._state;
                if (state === "closed" || state === "errored") {
                  return promiseRejectedWith(new TypeError("The stream (in " + state + " state) is not in the writable state and cannot be closed"));
                }
                var promise = newPromise(function(resolve, reject) {
                  var closeRequest = {
                    _resolve: resolve,
                    _reject: reject
                  };
                  stream._closeRequest = closeRequest;
                });
                var writer = stream._writer;
                if (writer !== void 0 && stream._backpressure && state === "writable") {
                  defaultWriterReadyPromiseResolve(writer);
                }
                WritableStreamDefaultControllerClose(stream._writableStreamController);
                return promise;
              }
              function WritableStreamAddWriteRequest(stream) {
                var promise = newPromise(function(resolve, reject) {
                  var writeRequest = {
                    _resolve: resolve,
                    _reject: reject
                  };
                  stream._writeRequests.push(writeRequest);
                });
                return promise;
              }
              function WritableStreamDealWithRejection(stream, error) {
                var state = stream._state;
                if (state === "writable") {
                  WritableStreamStartErroring(stream, error);
                  return;
                }
                WritableStreamFinishErroring(stream);
              }
              function WritableStreamStartErroring(stream, reason) {
                var controller = stream._writableStreamController;
                stream._state = "erroring";
                stream._storedError = reason;
                var writer = stream._writer;
                if (writer !== void 0) {
                  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
                }
                if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
                  WritableStreamFinishErroring(stream);
                }
              }
              function WritableStreamFinishErroring(stream) {
                stream._state = "errored";
                stream._writableStreamController[ErrorSteps]();
                var storedError = stream._storedError;
                stream._writeRequests.forEach(function(writeRequest) {
                  writeRequest._reject(storedError);
                });
                stream._writeRequests = new SimpleQueue();
                if (stream._pendingAbortRequest === void 0) {
                  WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                  return;
                }
                var abortRequest = stream._pendingAbortRequest;
                stream._pendingAbortRequest = void 0;
                if (abortRequest._wasAlreadyErroring) {
                  abortRequest._reject(storedError);
                  WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                  return;
                }
                var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
                uponPromise(promise, function() {
                  abortRequest._resolve();
                  WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                }, function(reason) {
                  abortRequest._reject(reason);
                  WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                });
              }
              function WritableStreamFinishInFlightWrite(stream) {
                stream._inFlightWriteRequest._resolve(void 0);
                stream._inFlightWriteRequest = void 0;
              }
              function WritableStreamFinishInFlightWriteWithError(stream, error) {
                stream._inFlightWriteRequest._reject(error);
                stream._inFlightWriteRequest = void 0;
                WritableStreamDealWithRejection(stream, error);
              }
              function WritableStreamFinishInFlightClose(stream) {
                stream._inFlightCloseRequest._resolve(void 0);
                stream._inFlightCloseRequest = void 0;
                var state = stream._state;
                if (state === "erroring") {
                  stream._storedError = void 0;
                  if (stream._pendingAbortRequest !== void 0) {
                    stream._pendingAbortRequest._resolve();
                    stream._pendingAbortRequest = void 0;
                  }
                }
                stream._state = "closed";
                var writer = stream._writer;
                if (writer !== void 0) {
                  defaultWriterClosedPromiseResolve(writer);
                }
              }
              function WritableStreamFinishInFlightCloseWithError(stream, error) {
                stream._inFlightCloseRequest._reject(error);
                stream._inFlightCloseRequest = void 0;
                if (stream._pendingAbortRequest !== void 0) {
                  stream._pendingAbortRequest._reject(error);
                  stream._pendingAbortRequest = void 0;
                }
                WritableStreamDealWithRejection(stream, error);
              }
              function WritableStreamCloseQueuedOrInFlight(stream) {
                if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
                  return false;
                }
                return true;
              }
              function WritableStreamHasOperationMarkedInFlight(stream) {
                if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
                  return false;
                }
                return true;
              }
              function WritableStreamMarkCloseRequestInFlight(stream) {
                stream._inFlightCloseRequest = stream._closeRequest;
                stream._closeRequest = void 0;
              }
              function WritableStreamMarkFirstWriteRequestInFlight(stream) {
                stream._inFlightWriteRequest = stream._writeRequests.shift();
              }
              function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
                if (stream._closeRequest !== void 0) {
                  stream._closeRequest._reject(stream._storedError);
                  stream._closeRequest = void 0;
                }
                var writer = stream._writer;
                if (writer !== void 0) {
                  defaultWriterClosedPromiseReject(writer, stream._storedError);
                }
              }
              function WritableStreamUpdateBackpressure(stream, backpressure) {
                var writer = stream._writer;
                if (writer !== void 0 && backpressure !== stream._backpressure) {
                  if (backpressure) {
                    defaultWriterReadyPromiseReset(writer);
                  } else {
                    defaultWriterReadyPromiseResolve(writer);
                  }
                }
                stream._backpressure = backpressure;
              }
              var WritableStreamDefaultWriter = function() {
                function WritableStreamDefaultWriter2(stream) {
                  assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
                  assertWritableStream(stream, "First parameter");
                  if (IsWritableStreamLocked(stream)) {
                    throw new TypeError("This stream has already been locked for exclusive writing by another writer");
                  }
                  this._ownerWritableStream = stream;
                  stream._writer = this;
                  var state = stream._state;
                  if (state === "writable") {
                    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                      defaultWriterReadyPromiseInitialize(this);
                    } else {
                      defaultWriterReadyPromiseInitializeAsResolved(this);
                    }
                    defaultWriterClosedPromiseInitialize(this);
                  } else if (state === "erroring") {
                    defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                    defaultWriterClosedPromiseInitialize(this);
                  } else if (state === "closed") {
                    defaultWriterReadyPromiseInitializeAsResolved(this);
                    defaultWriterClosedPromiseInitializeAsResolved(this);
                  } else {
                    var storedError = stream._storedError;
                    defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                    defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
                  }
                }
                Object.defineProperty(WritableStreamDefaultWriter2.prototype, "closed", {
                  get: function() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                      return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
                    }
                    return this._closedPromise;
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(WritableStreamDefaultWriter2.prototype, "desiredSize", {
                  get: function() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                      throw defaultWriterBrandCheckException("desiredSize");
                    }
                    if (this._ownerWritableStream === void 0) {
                      throw defaultWriterLockException("desiredSize");
                    }
                    return WritableStreamDefaultWriterGetDesiredSize(this);
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(WritableStreamDefaultWriter2.prototype, "ready", {
                  get: function() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                      return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
                    }
                    return this._readyPromise;
                  },
                  enumerable: false,
                  configurable: true
                });
                WritableStreamDefaultWriter2.prototype.abort = function(reason) {
                  if (reason === void 0) {
                    reason = void 0;
                  }
                  if (!IsWritableStreamDefaultWriter(this)) {
                    return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
                  }
                  if (this._ownerWritableStream === void 0) {
                    return promiseRejectedWith(defaultWriterLockException("abort"));
                  }
                  return WritableStreamDefaultWriterAbort(this, reason);
                };
                WritableStreamDefaultWriter2.prototype.close = function() {
                  if (!IsWritableStreamDefaultWriter(this)) {
                    return promiseRejectedWith(defaultWriterBrandCheckException("close"));
                  }
                  var stream = this._ownerWritableStream;
                  if (stream === void 0) {
                    return promiseRejectedWith(defaultWriterLockException("close"));
                  }
                  if (WritableStreamCloseQueuedOrInFlight(stream)) {
                    return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
                  }
                  return WritableStreamDefaultWriterClose(this);
                };
                WritableStreamDefaultWriter2.prototype.releaseLock = function() {
                  if (!IsWritableStreamDefaultWriter(this)) {
                    throw defaultWriterBrandCheckException("releaseLock");
                  }
                  var stream = this._ownerWritableStream;
                  if (stream === void 0) {
                    return;
                  }
                  WritableStreamDefaultWriterRelease(this);
                };
                WritableStreamDefaultWriter2.prototype.write = function(chunk) {
                  if (chunk === void 0) {
                    chunk = void 0;
                  }
                  if (!IsWritableStreamDefaultWriter(this)) {
                    return promiseRejectedWith(defaultWriterBrandCheckException("write"));
                  }
                  if (this._ownerWritableStream === void 0) {
                    return promiseRejectedWith(defaultWriterLockException("write to"));
                  }
                  return WritableStreamDefaultWriterWrite(this, chunk);
                };
                return WritableStreamDefaultWriter2;
              }();
              Object.defineProperties(WritableStreamDefaultWriter.prototype, {
                abort: { enumerable: true },
                close: { enumerable: true },
                releaseLock: { enumerable: true },
                write: { enumerable: true },
                closed: { enumerable: true },
                desiredSize: { enumerable: true },
                ready: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
                  value: "WritableStreamDefaultWriter",
                  configurable: true
                });
              }
              function IsWritableStreamDefaultWriter(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream")) {
                  return false;
                }
                return x instanceof WritableStreamDefaultWriter;
              }
              function WritableStreamDefaultWriterAbort(writer, reason) {
                var stream = writer._ownerWritableStream;
                return WritableStreamAbort(stream, reason);
              }
              function WritableStreamDefaultWriterClose(writer) {
                var stream = writer._ownerWritableStream;
                return WritableStreamClose(stream);
              }
              function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
                var stream = writer._ownerWritableStream;
                var state = stream._state;
                if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
                  return promiseResolvedWith(void 0);
                }
                if (state === "errored") {
                  return promiseRejectedWith(stream._storedError);
                }
                return WritableStreamDefaultWriterClose(writer);
              }
              function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
                if (writer._closedPromiseState === "pending") {
                  defaultWriterClosedPromiseReject(writer, error);
                } else {
                  defaultWriterClosedPromiseResetToRejected(writer, error);
                }
              }
              function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
                if (writer._readyPromiseState === "pending") {
                  defaultWriterReadyPromiseReject(writer, error);
                } else {
                  defaultWriterReadyPromiseResetToRejected(writer, error);
                }
              }
              function WritableStreamDefaultWriterGetDesiredSize(writer) {
                var stream = writer._ownerWritableStream;
                var state = stream._state;
                if (state === "errored" || state === "erroring") {
                  return null;
                }
                if (state === "closed") {
                  return 0;
                }
                return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
              }
              function WritableStreamDefaultWriterRelease(writer) {
                var stream = writer._ownerWritableStream;
                var releasedError = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
                WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
                WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
                stream._writer = void 0;
                writer._ownerWritableStream = void 0;
              }
              function WritableStreamDefaultWriterWrite(writer, chunk) {
                var stream = writer._ownerWritableStream;
                var controller = stream._writableStreamController;
                var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
                if (stream !== writer._ownerWritableStream) {
                  return promiseRejectedWith(defaultWriterLockException("write to"));
                }
                var state = stream._state;
                if (state === "errored") {
                  return promiseRejectedWith(stream._storedError);
                }
                if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
                  return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
                }
                if (state === "erroring") {
                  return promiseRejectedWith(stream._storedError);
                }
                var promise = WritableStreamAddWriteRequest(stream);
                WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
                return promise;
              }
              var closeSentinel = {};
              var WritableStreamDefaultController = function() {
                function WritableStreamDefaultController2() {
                  throw new TypeError("Illegal constructor");
                }
                Object.defineProperty(WritableStreamDefaultController2.prototype, "abortReason", {
                  get: function() {
                    if (!IsWritableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$2("abortReason");
                    }
                    return this._abortReason;
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(WritableStreamDefaultController2.prototype, "signal", {
                  get: function() {
                    if (!IsWritableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$2("signal");
                    }
                    if (this._abortController === void 0) {
                      throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
                    }
                    return this._abortController.signal;
                  },
                  enumerable: false,
                  configurable: true
                });
                WritableStreamDefaultController2.prototype.error = function(e) {
                  if (e === void 0) {
                    e = void 0;
                  }
                  if (!IsWritableStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException$2("error");
                  }
                  var state = this._controlledWritableStream._state;
                  if (state !== "writable") {
                    return;
                  }
                  WritableStreamDefaultControllerError(this, e);
                };
                WritableStreamDefaultController2.prototype[AbortSteps] = function(reason) {
                  var result = this._abortAlgorithm(reason);
                  WritableStreamDefaultControllerClearAlgorithms(this);
                  return result;
                };
                WritableStreamDefaultController2.prototype[ErrorSteps] = function() {
                  ResetQueue(this);
                };
                return WritableStreamDefaultController2;
              }();
              Object.defineProperties(WritableStreamDefaultController.prototype, {
                abortReason: { enumerable: true },
                signal: { enumerable: true },
                error: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
                  value: "WritableStreamDefaultController",
                  configurable: true
                });
              }
              function IsWritableStreamDefaultController(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_controlledWritableStream")) {
                  return false;
                }
                return x instanceof WritableStreamDefaultController;
              }
              function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
                controller._controlledWritableStream = stream;
                stream._writableStreamController = controller;
                controller._queue = void 0;
                controller._queueTotalSize = void 0;
                ResetQueue(controller);
                controller._abortReason = void 0;
                controller._abortController = createAbortController();
                controller._started = false;
                controller._strategySizeAlgorithm = sizeAlgorithm;
                controller._strategyHWM = highWaterMark;
                controller._writeAlgorithm = writeAlgorithm;
                controller._closeAlgorithm = closeAlgorithm;
                controller._abortAlgorithm = abortAlgorithm;
                var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                WritableStreamUpdateBackpressure(stream, backpressure);
                var startResult = startAlgorithm();
                var startPromise = promiseResolvedWith(startResult);
                uponPromise(startPromise, function() {
                  controller._started = true;
                  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                }, function(r) {
                  controller._started = true;
                  WritableStreamDealWithRejection(stream, r);
                });
              }
              function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
                var controller = Object.create(WritableStreamDefaultController.prototype);
                var startAlgorithm = function() {
                  return void 0;
                };
                var writeAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                var closeAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                var abortAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                if (underlyingSink.start !== void 0) {
                  startAlgorithm = function() {
                    return underlyingSink.start(controller);
                  };
                }
                if (underlyingSink.write !== void 0) {
                  writeAlgorithm = function(chunk) {
                    return underlyingSink.write(chunk, controller);
                  };
                }
                if (underlyingSink.close !== void 0) {
                  closeAlgorithm = function() {
                    return underlyingSink.close();
                  };
                }
                if (underlyingSink.abort !== void 0) {
                  abortAlgorithm = function(reason) {
                    return underlyingSink.abort(reason);
                  };
                }
                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
              }
              function WritableStreamDefaultControllerClearAlgorithms(controller) {
                controller._writeAlgorithm = void 0;
                controller._closeAlgorithm = void 0;
                controller._abortAlgorithm = void 0;
                controller._strategySizeAlgorithm = void 0;
              }
              function WritableStreamDefaultControllerClose(controller) {
                EnqueueValueWithSize(controller, closeSentinel, 0);
                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
              }
              function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
                try {
                  return controller._strategySizeAlgorithm(chunk);
                } catch (chunkSizeE) {
                  WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
                  return 1;
                }
              }
              function WritableStreamDefaultControllerGetDesiredSize(controller) {
                return controller._strategyHWM - controller._queueTotalSize;
              }
              function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
                try {
                  EnqueueValueWithSize(controller, chunk, chunkSize);
                } catch (enqueueE) {
                  WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
                  return;
                }
                var stream = controller._controlledWritableStream;
                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
                  var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                  WritableStreamUpdateBackpressure(stream, backpressure);
                }
                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
              }
              function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
                var stream = controller._controlledWritableStream;
                if (!controller._started) {
                  return;
                }
                if (stream._inFlightWriteRequest !== void 0) {
                  return;
                }
                var state = stream._state;
                if (state === "erroring") {
                  WritableStreamFinishErroring(stream);
                  return;
                }
                if (controller._queue.length === 0) {
                  return;
                }
                var value = PeekQueueValue(controller);
                if (value === closeSentinel) {
                  WritableStreamDefaultControllerProcessClose(controller);
                } else {
                  WritableStreamDefaultControllerProcessWrite(controller, value);
                }
              }
              function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
                if (controller._controlledWritableStream._state === "writable") {
                  WritableStreamDefaultControllerError(controller, error);
                }
              }
              function WritableStreamDefaultControllerProcessClose(controller) {
                var stream = controller._controlledWritableStream;
                WritableStreamMarkCloseRequestInFlight(stream);
                DequeueValue(controller);
                var sinkClosePromise = controller._closeAlgorithm();
                WritableStreamDefaultControllerClearAlgorithms(controller);
                uponPromise(sinkClosePromise, function() {
                  WritableStreamFinishInFlightClose(stream);
                }, function(reason) {
                  WritableStreamFinishInFlightCloseWithError(stream, reason);
                });
              }
              function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
                var stream = controller._controlledWritableStream;
                WritableStreamMarkFirstWriteRequestInFlight(stream);
                var sinkWritePromise = controller._writeAlgorithm(chunk);
                uponPromise(sinkWritePromise, function() {
                  WritableStreamFinishInFlightWrite(stream);
                  var state = stream._state;
                  DequeueValue(controller);
                  if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
                    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                    WritableStreamUpdateBackpressure(stream, backpressure);
                  }
                  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                }, function(reason) {
                  if (stream._state === "writable") {
                    WritableStreamDefaultControllerClearAlgorithms(controller);
                  }
                  WritableStreamFinishInFlightWriteWithError(stream, reason);
                });
              }
              function WritableStreamDefaultControllerGetBackpressure(controller) {
                var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
                return desiredSize <= 0;
              }
              function WritableStreamDefaultControllerError(controller, error) {
                var stream = controller._controlledWritableStream;
                WritableStreamDefaultControllerClearAlgorithms(controller);
                WritableStreamStartErroring(stream, error);
              }
              function streamBrandCheckException$2(name) {
                return new TypeError("WritableStream.prototype." + name + " can only be used on a WritableStream");
              }
              function defaultControllerBrandCheckException$2(name) {
                return new TypeError("WritableStreamDefaultController.prototype." + name + " can only be used on a WritableStreamDefaultController");
              }
              function defaultWriterBrandCheckException(name) {
                return new TypeError("WritableStreamDefaultWriter.prototype." + name + " can only be used on a WritableStreamDefaultWriter");
              }
              function defaultWriterLockException(name) {
                return new TypeError("Cannot " + name + " a stream using a released writer");
              }
              function defaultWriterClosedPromiseInitialize(writer) {
                writer._closedPromise = newPromise(function(resolve, reject) {
                  writer._closedPromise_resolve = resolve;
                  writer._closedPromise_reject = reject;
                  writer._closedPromiseState = "pending";
                });
              }
              function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
                defaultWriterClosedPromiseInitialize(writer);
                defaultWriterClosedPromiseReject(writer, reason);
              }
              function defaultWriterClosedPromiseInitializeAsResolved(writer) {
                defaultWriterClosedPromiseInitialize(writer);
                defaultWriterClosedPromiseResolve(writer);
              }
              function defaultWriterClosedPromiseReject(writer, reason) {
                if (writer._closedPromise_reject === void 0) {
                  return;
                }
                setPromiseIsHandledToTrue(writer._closedPromise);
                writer._closedPromise_reject(reason);
                writer._closedPromise_resolve = void 0;
                writer._closedPromise_reject = void 0;
                writer._closedPromiseState = "rejected";
              }
              function defaultWriterClosedPromiseResetToRejected(writer, reason) {
                defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
              }
              function defaultWriterClosedPromiseResolve(writer) {
                if (writer._closedPromise_resolve === void 0) {
                  return;
                }
                writer._closedPromise_resolve(void 0);
                writer._closedPromise_resolve = void 0;
                writer._closedPromise_reject = void 0;
                writer._closedPromiseState = "resolved";
              }
              function defaultWriterReadyPromiseInitialize(writer) {
                writer._readyPromise = newPromise(function(resolve, reject) {
                  writer._readyPromise_resolve = resolve;
                  writer._readyPromise_reject = reject;
                });
                writer._readyPromiseState = "pending";
              }
              function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
                defaultWriterReadyPromiseInitialize(writer);
                defaultWriterReadyPromiseReject(writer, reason);
              }
              function defaultWriterReadyPromiseInitializeAsResolved(writer) {
                defaultWriterReadyPromiseInitialize(writer);
                defaultWriterReadyPromiseResolve(writer);
              }
              function defaultWriterReadyPromiseReject(writer, reason) {
                if (writer._readyPromise_reject === void 0) {
                  return;
                }
                setPromiseIsHandledToTrue(writer._readyPromise);
                writer._readyPromise_reject(reason);
                writer._readyPromise_resolve = void 0;
                writer._readyPromise_reject = void 0;
                writer._readyPromiseState = "rejected";
              }
              function defaultWriterReadyPromiseReset(writer) {
                defaultWriterReadyPromiseInitialize(writer);
              }
              function defaultWriterReadyPromiseResetToRejected(writer, reason) {
                defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
              }
              function defaultWriterReadyPromiseResolve(writer) {
                if (writer._readyPromise_resolve === void 0) {
                  return;
                }
                writer._readyPromise_resolve(void 0);
                writer._readyPromise_resolve = void 0;
                writer._readyPromise_reject = void 0;
                writer._readyPromiseState = "fulfilled";
              }
              var NativeDOMException = typeof DOMException !== "undefined" ? DOMException : void 0;
              function isDOMExceptionConstructor(ctor) {
                if (!(typeof ctor === "function" || typeof ctor === "object")) {
                  return false;
                }
                try {
                  new ctor();
                  return true;
                } catch (_a2) {
                  return false;
                }
              }
              function createDOMExceptionPolyfill() {
                var ctor = function DOMException2(message, name) {
                  this.message = message || "";
                  this.name = name || "Error";
                  if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, this.constructor);
                  }
                };
                ctor.prototype = Object.create(Error.prototype);
                Object.defineProperty(ctor.prototype, "constructor", {
                  value: ctor,
                  writable: true,
                  configurable: true
                });
                return ctor;
              }
              var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();
              function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
                var reader = AcquireReadableStreamDefaultReader(source);
                var writer = AcquireWritableStreamDefaultWriter(dest);
                source._disturbed = true;
                var shuttingDown = false;
                var currentWrite = promiseResolvedWith(void 0);
                return newPromise(function(resolve, reject) {
                  var abortAlgorithm;
                  if (signal !== void 0) {
                    abortAlgorithm = function() {
                      var error = new DOMException$1("Aborted", "AbortError");
                      var actions = [];
                      if (!preventAbort) {
                        actions.push(function() {
                          if (dest._state === "writable") {
                            return WritableStreamAbort(dest, error);
                          }
                          return promiseResolvedWith(void 0);
                        });
                      }
                      if (!preventCancel) {
                        actions.push(function() {
                          if (source._state === "readable") {
                            return ReadableStreamCancel(source, error);
                          }
                          return promiseResolvedWith(void 0);
                        });
                      }
                      shutdownWithAction(function() {
                        return Promise.all(actions.map(function(action) {
                          return action();
                        }));
                      }, true, error);
                    };
                    if (signal.aborted) {
                      abortAlgorithm();
                      return;
                    }
                    signal.addEventListener("abort", abortAlgorithm);
                  }
                  function pipeLoop() {
                    return newPromise(function(resolveLoop, rejectLoop) {
                      function next(done) {
                        if (done) {
                          resolveLoop();
                        } else {
                          PerformPromiseThen(pipeStep(), next, rejectLoop);
                        }
                      }
                      next(false);
                    });
                  }
                  function pipeStep() {
                    if (shuttingDown) {
                      return promiseResolvedWith(true);
                    }
                    return PerformPromiseThen(writer._readyPromise, function() {
                      return newPromise(function(resolveRead, rejectRead) {
                        ReadableStreamDefaultReaderRead(reader, {
                          _chunkSteps: function(chunk) {
                            currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop);
                            resolveRead(false);
                          },
                          _closeSteps: function() {
                            return resolveRead(true);
                          },
                          _errorSteps: rejectRead
                        });
                      });
                    });
                  }
                  isOrBecomesErrored(source, reader._closedPromise, function(storedError) {
                    if (!preventAbort) {
                      shutdownWithAction(function() {
                        return WritableStreamAbort(dest, storedError);
                      }, true, storedError);
                    } else {
                      shutdown(true, storedError);
                    }
                  });
                  isOrBecomesErrored(dest, writer._closedPromise, function(storedError) {
                    if (!preventCancel) {
                      shutdownWithAction(function() {
                        return ReadableStreamCancel(source, storedError);
                      }, true, storedError);
                    } else {
                      shutdown(true, storedError);
                    }
                  });
                  isOrBecomesClosed(source, reader._closedPromise, function() {
                    if (!preventClose) {
                      shutdownWithAction(function() {
                        return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);
                      });
                    } else {
                      shutdown();
                    }
                  });
                  if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
                    var destClosed_1 = new TypeError("the destination writable stream closed before all data could be piped to it");
                    if (!preventCancel) {
                      shutdownWithAction(function() {
                        return ReadableStreamCancel(source, destClosed_1);
                      }, true, destClosed_1);
                    } else {
                      shutdown(true, destClosed_1);
                    }
                  }
                  setPromiseIsHandledToTrue(pipeLoop());
                  function waitForWritesToFinish() {
                    var oldCurrentWrite = currentWrite;
                    return PerformPromiseThen(currentWrite, function() {
                      return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0;
                    });
                  }
                  function isOrBecomesErrored(stream, promise, action) {
                    if (stream._state === "errored") {
                      action(stream._storedError);
                    } else {
                      uponRejection(promise, action);
                    }
                  }
                  function isOrBecomesClosed(stream, promise, action) {
                    if (stream._state === "closed") {
                      action();
                    } else {
                      uponFulfillment(promise, action);
                    }
                  }
                  function shutdownWithAction(action, originalIsError, originalError) {
                    if (shuttingDown) {
                      return;
                    }
                    shuttingDown = true;
                    if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
                      uponFulfillment(waitForWritesToFinish(), doTheRest);
                    } else {
                      doTheRest();
                    }
                    function doTheRest() {
                      uponPromise(action(), function() {
                        return finalize(originalIsError, originalError);
                      }, function(newError) {
                        return finalize(true, newError);
                      });
                    }
                  }
                  function shutdown(isError, error) {
                    if (shuttingDown) {
                      return;
                    }
                    shuttingDown = true;
                    if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
                      uponFulfillment(waitForWritesToFinish(), function() {
                        return finalize(isError, error);
                      });
                    } else {
                      finalize(isError, error);
                    }
                  }
                  function finalize(isError, error) {
                    WritableStreamDefaultWriterRelease(writer);
                    ReadableStreamReaderGenericRelease(reader);
                    if (signal !== void 0) {
                      signal.removeEventListener("abort", abortAlgorithm);
                    }
                    if (isError) {
                      reject(error);
                    } else {
                      resolve(void 0);
                    }
                  }
                });
              }
              var ReadableStreamDefaultController = function() {
                function ReadableStreamDefaultController2() {
                  throw new TypeError("Illegal constructor");
                }
                Object.defineProperty(ReadableStreamDefaultController2.prototype, "desiredSize", {
                  get: function() {
                    if (!IsReadableStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException$1("desiredSize");
                    }
                    return ReadableStreamDefaultControllerGetDesiredSize(this);
                  },
                  enumerable: false,
                  configurable: true
                });
                ReadableStreamDefaultController2.prototype.close = function() {
                  if (!IsReadableStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException$1("close");
                  }
                  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                    throw new TypeError("The stream is not in a state that permits close");
                  }
                  ReadableStreamDefaultControllerClose(this);
                };
                ReadableStreamDefaultController2.prototype.enqueue = function(chunk) {
                  if (chunk === void 0) {
                    chunk = void 0;
                  }
                  if (!IsReadableStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException$1("enqueue");
                  }
                  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                    throw new TypeError("The stream is not in a state that permits enqueue");
                  }
                  return ReadableStreamDefaultControllerEnqueue(this, chunk);
                };
                ReadableStreamDefaultController2.prototype.error = function(e) {
                  if (e === void 0) {
                    e = void 0;
                  }
                  if (!IsReadableStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException$1("error");
                  }
                  ReadableStreamDefaultControllerError(this, e);
                };
                ReadableStreamDefaultController2.prototype[CancelSteps] = function(reason) {
                  ResetQueue(this);
                  var result = this._cancelAlgorithm(reason);
                  ReadableStreamDefaultControllerClearAlgorithms(this);
                  return result;
                };
                ReadableStreamDefaultController2.prototype[PullSteps] = function(readRequest) {
                  var stream = this._controlledReadableStream;
                  if (this._queue.length > 0) {
                    var chunk = DequeueValue(this);
                    if (this._closeRequested && this._queue.length === 0) {
                      ReadableStreamDefaultControllerClearAlgorithms(this);
                      ReadableStreamClose(stream);
                    } else {
                      ReadableStreamDefaultControllerCallPullIfNeeded(this);
                    }
                    readRequest._chunkSteps(chunk);
                  } else {
                    ReadableStreamAddReadRequest(stream, readRequest);
                    ReadableStreamDefaultControllerCallPullIfNeeded(this);
                  }
                };
                return ReadableStreamDefaultController2;
              }();
              Object.defineProperties(ReadableStreamDefaultController.prototype, {
                close: { enumerable: true },
                enqueue: { enumerable: true },
                error: { enumerable: true },
                desiredSize: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
                  value: "ReadableStreamDefaultController",
                  configurable: true
                });
              }
              function IsReadableStreamDefaultController(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableStream")) {
                  return false;
                }
                return x instanceof ReadableStreamDefaultController;
              }
              function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
                var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
                if (!shouldPull) {
                  return;
                }
                if (controller._pulling) {
                  controller._pullAgain = true;
                  return;
                }
                controller._pulling = true;
                var pullPromise = controller._pullAlgorithm();
                uponPromise(pullPromise, function() {
                  controller._pulling = false;
                  if (controller._pullAgain) {
                    controller._pullAgain = false;
                    ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                  }
                }, function(e) {
                  ReadableStreamDefaultControllerError(controller, e);
                });
              }
              function ReadableStreamDefaultControllerShouldCallPull(controller) {
                var stream = controller._controlledReadableStream;
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                  return false;
                }
                if (!controller._started) {
                  return false;
                }
                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
                  return true;
                }
                var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
                if (desiredSize > 0) {
                  return true;
                }
                return false;
              }
              function ReadableStreamDefaultControllerClearAlgorithms(controller) {
                controller._pullAlgorithm = void 0;
                controller._cancelAlgorithm = void 0;
                controller._strategySizeAlgorithm = void 0;
              }
              function ReadableStreamDefaultControllerClose(controller) {
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                  return;
                }
                var stream = controller._controlledReadableStream;
                controller._closeRequested = true;
                if (controller._queue.length === 0) {
                  ReadableStreamDefaultControllerClearAlgorithms(controller);
                  ReadableStreamClose(stream);
                }
              }
              function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                  return;
                }
                var stream = controller._controlledReadableStream;
                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
                  ReadableStreamFulfillReadRequest(stream, chunk, false);
                } else {
                  var chunkSize = void 0;
                  try {
                    chunkSize = controller._strategySizeAlgorithm(chunk);
                  } catch (chunkSizeE) {
                    ReadableStreamDefaultControllerError(controller, chunkSizeE);
                    throw chunkSizeE;
                  }
                  try {
                    EnqueueValueWithSize(controller, chunk, chunkSize);
                  } catch (enqueueE) {
                    ReadableStreamDefaultControllerError(controller, enqueueE);
                    throw enqueueE;
                  }
                }
                ReadableStreamDefaultControllerCallPullIfNeeded(controller);
              }
              function ReadableStreamDefaultControllerError(controller, e) {
                var stream = controller._controlledReadableStream;
                if (stream._state !== "readable") {
                  return;
                }
                ResetQueue(controller);
                ReadableStreamDefaultControllerClearAlgorithms(controller);
                ReadableStreamError(stream, e);
              }
              function ReadableStreamDefaultControllerGetDesiredSize(controller) {
                var state = controller._controlledReadableStream._state;
                if (state === "errored") {
                  return null;
                }
                if (state === "closed") {
                  return 0;
                }
                return controller._strategyHWM - controller._queueTotalSize;
              }
              function ReadableStreamDefaultControllerHasBackpressure(controller) {
                if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
                  return false;
                }
                return true;
              }
              function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
                var state = controller._controlledReadableStream._state;
                if (!controller._closeRequested && state === "readable") {
                  return true;
                }
                return false;
              }
              function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
                controller._controlledReadableStream = stream;
                controller._queue = void 0;
                controller._queueTotalSize = void 0;
                ResetQueue(controller);
                controller._started = false;
                controller._closeRequested = false;
                controller._pullAgain = false;
                controller._pulling = false;
                controller._strategySizeAlgorithm = sizeAlgorithm;
                controller._strategyHWM = highWaterMark;
                controller._pullAlgorithm = pullAlgorithm;
                controller._cancelAlgorithm = cancelAlgorithm;
                stream._readableStreamController = controller;
                var startResult = startAlgorithm();
                uponPromise(promiseResolvedWith(startResult), function() {
                  controller._started = true;
                  ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                }, function(r) {
                  ReadableStreamDefaultControllerError(controller, r);
                });
              }
              function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
                var controller = Object.create(ReadableStreamDefaultController.prototype);
                var startAlgorithm = function() {
                  return void 0;
                };
                var pullAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                var cancelAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                if (underlyingSource.start !== void 0) {
                  startAlgorithm = function() {
                    return underlyingSource.start(controller);
                  };
                }
                if (underlyingSource.pull !== void 0) {
                  pullAlgorithm = function() {
                    return underlyingSource.pull(controller);
                  };
                }
                if (underlyingSource.cancel !== void 0) {
                  cancelAlgorithm = function(reason) {
                    return underlyingSource.cancel(reason);
                  };
                }
                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
              }
              function defaultControllerBrandCheckException$1(name) {
                return new TypeError("ReadableStreamDefaultController.prototype." + name + " can only be used on a ReadableStreamDefaultController");
              }
              function ReadableStreamTee(stream, cloneForBranch2) {
                if (IsReadableByteStreamController(stream._readableStreamController)) {
                  return ReadableByteStreamTee(stream);
                }
                return ReadableStreamDefaultTee(stream);
              }
              function ReadableStreamDefaultTee(stream, cloneForBranch2) {
                var reader = AcquireReadableStreamDefaultReader(stream);
                var reading = false;
                var readAgain = false;
                var canceled1 = false;
                var canceled2 = false;
                var reason1;
                var reason2;
                var branch1;
                var branch2;
                var resolveCancelPromise;
                var cancelPromise = newPromise(function(resolve) {
                  resolveCancelPromise = resolve;
                });
                function pullAlgorithm() {
                  if (reading) {
                    readAgain = true;
                    return promiseResolvedWith(void 0);
                  }
                  reading = true;
                  var readRequest = {
                    _chunkSteps: function(chunk) {
                      queueMicrotask(function() {
                        readAgain = false;
                        var chunk1 = chunk;
                        var chunk2 = chunk;
                        if (!canceled1) {
                          ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                          ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgain) {
                          pullAlgorithm();
                        }
                      });
                    },
                    _closeSteps: function() {
                      reading = false;
                      if (!canceled1) {
                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);
                      }
                      if (!canceled2) {
                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);
                      }
                      if (!canceled1 || !canceled2) {
                        resolveCancelPromise(void 0);
                      }
                    },
                    _errorSteps: function() {
                      reading = false;
                    }
                  };
                  ReadableStreamDefaultReaderRead(reader, readRequest);
                  return promiseResolvedWith(void 0);
                }
                function cancel1Algorithm(reason) {
                  canceled1 = true;
                  reason1 = reason;
                  if (canceled2) {
                    var compositeReason = CreateArrayFromList([
                      reason1,
                      reason2
                    ]);
                    var cancelResult = ReadableStreamCancel(stream, compositeReason);
                    resolveCancelPromise(cancelResult);
                  }
                  return cancelPromise;
                }
                function cancel2Algorithm(reason) {
                  canceled2 = true;
                  reason2 = reason;
                  if (canceled1) {
                    var compositeReason = CreateArrayFromList([
                      reason1,
                      reason2
                    ]);
                    var cancelResult = ReadableStreamCancel(stream, compositeReason);
                    resolveCancelPromise(cancelResult);
                  }
                  return cancelPromise;
                }
                function startAlgorithm() {
                }
                branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
                branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
                uponRejection(reader._closedPromise, function(r) {
                  ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
                  ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
                  if (!canceled1 || !canceled2) {
                    resolveCancelPromise(void 0);
                  }
                });
                return [
                  branch1,
                  branch2
                ];
              }
              function ReadableByteStreamTee(stream) {
                var reader = AcquireReadableStreamDefaultReader(stream);
                var reading = false;
                var readAgainForBranch1 = false;
                var readAgainForBranch2 = false;
                var canceled1 = false;
                var canceled2 = false;
                var reason1;
                var reason2;
                var branch1;
                var branch2;
                var resolveCancelPromise;
                var cancelPromise = newPromise(function(resolve) {
                  resolveCancelPromise = resolve;
                });
                function forwardReaderError(thisReader) {
                  uponRejection(thisReader._closedPromise, function(r) {
                    if (thisReader !== reader) {
                      return;
                    }
                    ReadableByteStreamControllerError(branch1._readableStreamController, r);
                    ReadableByteStreamControllerError(branch2._readableStreamController, r);
                    if (!canceled1 || !canceled2) {
                      resolveCancelPromise(void 0);
                    }
                  });
                }
                function pullWithDefaultReader() {
                  if (IsReadableStreamBYOBReader(reader)) {
                    ReadableStreamReaderGenericRelease(reader);
                    reader = AcquireReadableStreamDefaultReader(stream);
                    forwardReaderError(reader);
                  }
                  var readRequest = {
                    _chunkSteps: function(chunk) {
                      queueMicrotask(function() {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        var chunk1 = chunk;
                        var chunk2 = chunk;
                        if (!canceled1 && !canceled2) {
                          try {
                            chunk2 = CloneAsUint8Array(chunk);
                          } catch (cloneE) {
                            ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                            ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                            resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                            return;
                          }
                        }
                        if (!canceled1) {
                          ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                          ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                          pull1Algorithm();
                        } else if (readAgainForBranch2) {
                          pull2Algorithm();
                        }
                      });
                    },
                    _closeSteps: function() {
                      reading = false;
                      if (!canceled1) {
                        ReadableByteStreamControllerClose(branch1._readableStreamController);
                      }
                      if (!canceled2) {
                        ReadableByteStreamControllerClose(branch2._readableStreamController);
                      }
                      if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
                      }
                      if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
                      }
                      if (!canceled1 || !canceled2) {
                        resolveCancelPromise(void 0);
                      }
                    },
                    _errorSteps: function() {
                      reading = false;
                    }
                  };
                  ReadableStreamDefaultReaderRead(reader, readRequest);
                }
                function pullWithBYOBReader(view, forBranch2) {
                  if (IsReadableStreamDefaultReader(reader)) {
                    ReadableStreamReaderGenericRelease(reader);
                    reader = AcquireReadableStreamBYOBReader(stream);
                    forwardReaderError(reader);
                  }
                  var byobBranch = forBranch2 ? branch2 : branch1;
                  var otherBranch = forBranch2 ? branch1 : branch2;
                  var readIntoRequest = {
                    _chunkSteps: function(chunk) {
                      queueMicrotask(function() {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        var byobCanceled = forBranch2 ? canceled2 : canceled1;
                        var otherCanceled = forBranch2 ? canceled1 : canceled2;
                        if (!otherCanceled) {
                          var clonedChunk = void 0;
                          try {
                            clonedChunk = CloneAsUint8Array(chunk);
                          } catch (cloneE) {
                            ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                            ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                            resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                            return;
                          }
                          if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                          }
                          ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                        } else if (!byobCanceled) {
                          ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                          pull1Algorithm();
                        } else if (readAgainForBranch2) {
                          pull2Algorithm();
                        }
                      });
                    },
                    _closeSteps: function(chunk) {
                      reading = false;
                      var byobCanceled = forBranch2 ? canceled2 : canceled1;
                      var otherCanceled = forBranch2 ? canceled1 : canceled2;
                      if (!byobCanceled) {
                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);
                      }
                      if (!otherCanceled) {
                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);
                      }
                      if (chunk !== void 0) {
                        if (!byobCanceled) {
                          ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                          ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                        }
                      }
                      if (!byobCanceled || !otherCanceled) {
                        resolveCancelPromise(void 0);
                      }
                    },
                    _errorSteps: function() {
                      reading = false;
                    }
                  };
                  ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
                }
                function pull1Algorithm() {
                  if (reading) {
                    readAgainForBranch1 = true;
                    return promiseResolvedWith(void 0);
                  }
                  reading = true;
                  var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
                  if (byobRequest === null) {
                    pullWithDefaultReader();
                  } else {
                    pullWithBYOBReader(byobRequest._view, false);
                  }
                  return promiseResolvedWith(void 0);
                }
                function pull2Algorithm() {
                  if (reading) {
                    readAgainForBranch2 = true;
                    return promiseResolvedWith(void 0);
                  }
                  reading = true;
                  var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
                  if (byobRequest === null) {
                    pullWithDefaultReader();
                  } else {
                    pullWithBYOBReader(byobRequest._view, true);
                  }
                  return promiseResolvedWith(void 0);
                }
                function cancel1Algorithm(reason) {
                  canceled1 = true;
                  reason1 = reason;
                  if (canceled2) {
                    var compositeReason = CreateArrayFromList([
                      reason1,
                      reason2
                    ]);
                    var cancelResult = ReadableStreamCancel(stream, compositeReason);
                    resolveCancelPromise(cancelResult);
                  }
                  return cancelPromise;
                }
                function cancel2Algorithm(reason) {
                  canceled2 = true;
                  reason2 = reason;
                  if (canceled1) {
                    var compositeReason = CreateArrayFromList([
                      reason1,
                      reason2
                    ]);
                    var cancelResult = ReadableStreamCancel(stream, compositeReason);
                    resolveCancelPromise(cancelResult);
                  }
                  return cancelPromise;
                }
                function startAlgorithm() {
                }
                branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
                branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
                forwardReaderError(reader);
                return [
                  branch1,
                  branch2
                ];
              }
              function convertUnderlyingDefaultOrByteSource(source, context) {
                assertDictionary(source, context);
                var original = source;
                var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
                var cancel = original === null || original === void 0 ? void 0 : original.cancel;
                var pull = original === null || original === void 0 ? void 0 : original.pull;
                var start = original === null || original === void 0 ? void 0 : original.start;
                var type = original === null || original === void 0 ? void 0 : original.type;
                return {
                  autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + " has member 'autoAllocateChunkSize' that"),
                  cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, context + " has member 'cancel' that"),
                  pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, context + " has member 'pull' that"),
                  start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, context + " has member 'start' that"),
                  type: type === void 0 ? void 0 : convertReadableStreamType(type, context + " has member 'type' that")
                };
              }
              function convertUnderlyingSourceCancelCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(reason) {
                  return promiseCall(fn, original, [reason]);
                };
              }
              function convertUnderlyingSourcePullCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(controller) {
                  return promiseCall(fn, original, [controller]);
                };
              }
              function convertUnderlyingSourceStartCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(controller) {
                  return reflectCall(fn, original, [controller]);
                };
              }
              function convertReadableStreamType(type, context) {
                type = "" + type;
                if (type !== "bytes") {
                  throw new TypeError(context + " '" + type + "' is not a valid enumeration value for ReadableStreamType");
                }
                return type;
              }
              function convertReaderOptions(options, context) {
                assertDictionary(options, context);
                var mode = options === null || options === void 0 ? void 0 : options.mode;
                return { mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, context + " has member 'mode' that") };
              }
              function convertReadableStreamReaderMode(mode, context) {
                mode = "" + mode;
                if (mode !== "byob") {
                  throw new TypeError(context + " '" + mode + "' is not a valid enumeration value for ReadableStreamReaderMode");
                }
                return mode;
              }
              function convertIteratorOptions(options, context) {
                assertDictionary(options, context);
                var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
                return { preventCancel: Boolean(preventCancel) };
              }
              function convertPipeOptions(options, context) {
                assertDictionary(options, context);
                var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
                var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
                var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
                var signal = options === null || options === void 0 ? void 0 : options.signal;
                if (signal !== void 0) {
                  assertAbortSignal(signal, context + " has member 'signal' that");
                }
                return {
                  preventAbort: Boolean(preventAbort),
                  preventCancel: Boolean(preventCancel),
                  preventClose: Boolean(preventClose),
                  signal
                };
              }
              function assertAbortSignal(signal, context) {
                if (!isAbortSignal(signal)) {
                  throw new TypeError(context + " is not an AbortSignal.");
                }
              }
              function convertReadableWritablePair(pair, context) {
                assertDictionary(pair, context);
                var readable = pair === null || pair === void 0 ? void 0 : pair.readable;
                assertRequiredField(readable, "readable", "ReadableWritablePair");
                assertReadableStream(readable, context + " has member 'readable' that");
                var writable = pair === null || pair === void 0 ? void 0 : pair.writable;
                assertRequiredField(writable, "writable", "ReadableWritablePair");
                assertWritableStream(writable, context + " has member 'writable' that");
                return {
                  readable,
                  writable
                };
              }
              var ReadableStream2 = function() {
                function ReadableStream3(rawUnderlyingSource, rawStrategy) {
                  if (rawUnderlyingSource === void 0) {
                    rawUnderlyingSource = {};
                  }
                  if (rawStrategy === void 0) {
                    rawStrategy = {};
                  }
                  if (rawUnderlyingSource === void 0) {
                    rawUnderlyingSource = null;
                  } else {
                    assertObject(rawUnderlyingSource, "First parameter");
                  }
                  var strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
                  var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
                  InitializeReadableStream(this);
                  if (underlyingSource.type === "bytes") {
                    if (strategy.size !== void 0) {
                      throw new RangeError("The strategy for a byte stream cannot have a size function");
                    }
                    var highWaterMark = ExtractHighWaterMark(strategy, 0);
                    SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
                  } else {
                    var sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                    var highWaterMark = ExtractHighWaterMark(strategy, 1);
                    SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
                  }
                }
                Object.defineProperty(ReadableStream3.prototype, "locked", {
                  get: function() {
                    if (!IsReadableStream(this)) {
                      throw streamBrandCheckException$1("locked");
                    }
                    return IsReadableStreamLocked(this);
                  },
                  enumerable: false,
                  configurable: true
                });
                ReadableStream3.prototype.cancel = function(reason) {
                  if (reason === void 0) {
                    reason = void 0;
                  }
                  if (!IsReadableStream(this)) {
                    return promiseRejectedWith(streamBrandCheckException$1("cancel"));
                  }
                  if (IsReadableStreamLocked(this)) {
                    return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
                  }
                  return ReadableStreamCancel(this, reason);
                };
                ReadableStream3.prototype.getReader = function(rawOptions) {
                  if (rawOptions === void 0) {
                    rawOptions = void 0;
                  }
                  if (!IsReadableStream(this)) {
                    throw streamBrandCheckException$1("getReader");
                  }
                  var options = convertReaderOptions(rawOptions, "First parameter");
                  if (options.mode === void 0) {
                    return AcquireReadableStreamDefaultReader(this);
                  }
                  return AcquireReadableStreamBYOBReader(this);
                };
                ReadableStream3.prototype.pipeThrough = function(rawTransform, rawOptions) {
                  if (rawOptions === void 0) {
                    rawOptions = {};
                  }
                  if (!IsReadableStream(this)) {
                    throw streamBrandCheckException$1("pipeThrough");
                  }
                  assertRequiredArgument(rawTransform, 1, "pipeThrough");
                  var transform = convertReadableWritablePair(rawTransform, "First parameter");
                  var options = convertPipeOptions(rawOptions, "Second parameter");
                  if (IsReadableStreamLocked(this)) {
                    throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
                  }
                  if (IsWritableStreamLocked(transform.writable)) {
                    throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
                  }
                  var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
                  setPromiseIsHandledToTrue(promise);
                  return transform.readable;
                };
                ReadableStream3.prototype.pipeTo = function(destination, rawOptions) {
                  if (rawOptions === void 0) {
                    rawOptions = {};
                  }
                  if (!IsReadableStream(this)) {
                    return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
                  }
                  if (destination === void 0) {
                    return promiseRejectedWith("Parameter 1 is required in 'pipeTo'.");
                  }
                  if (!IsWritableStream(destination)) {
                    return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
                  }
                  var options;
                  try {
                    options = convertPipeOptions(rawOptions, "Second parameter");
                  } catch (e) {
                    return promiseRejectedWith(e);
                  }
                  if (IsReadableStreamLocked(this)) {
                    return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
                  }
                  if (IsWritableStreamLocked(destination)) {
                    return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
                  }
                  return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
                };
                ReadableStream3.prototype.tee = function() {
                  if (!IsReadableStream(this)) {
                    throw streamBrandCheckException$1("tee");
                  }
                  var branches = ReadableStreamTee(this);
                  return CreateArrayFromList(branches);
                };
                ReadableStream3.prototype.values = function(rawOptions) {
                  if (rawOptions === void 0) {
                    rawOptions = void 0;
                  }
                  if (!IsReadableStream(this)) {
                    throw streamBrandCheckException$1("values");
                  }
                  var options = convertIteratorOptions(rawOptions, "First parameter");
                  return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
                };
                return ReadableStream3;
              }();
              Object.defineProperties(ReadableStream2.prototype, {
                cancel: { enumerable: true },
                getReader: { enumerable: true },
                pipeThrough: { enumerable: true },
                pipeTo: { enumerable: true },
                tee: { enumerable: true },
                values: { enumerable: true },
                locked: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {
                  value: "ReadableStream",
                  configurable: true
                });
              }
              if (typeof SymbolPolyfill.asyncIterator === "symbol") {
                Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {
                  value: ReadableStream2.prototype.values,
                  writable: true,
                  configurable: true
                });
              }
              function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
                if (highWaterMark === void 0) {
                  highWaterMark = 1;
                }
                if (sizeAlgorithm === void 0) {
                  sizeAlgorithm = function() {
                    return 1;
                  };
                }
                var stream = Object.create(ReadableStream2.prototype);
                InitializeReadableStream(stream);
                var controller = Object.create(ReadableStreamDefaultController.prototype);
                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
                return stream;
              }
              function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
                var stream = Object.create(ReadableStream2.prototype);
                InitializeReadableStream(stream);
                var controller = Object.create(ReadableByteStreamController.prototype);
                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
                return stream;
              }
              function InitializeReadableStream(stream) {
                stream._state = "readable";
                stream._reader = void 0;
                stream._storedError = void 0;
                stream._disturbed = false;
              }
              function IsReadableStream(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_readableStreamController")) {
                  return false;
                }
                return x instanceof ReadableStream2;
              }
              function IsReadableStreamLocked(stream) {
                if (stream._reader === void 0) {
                  return false;
                }
                return true;
              }
              function ReadableStreamCancel(stream, reason) {
                stream._disturbed = true;
                if (stream._state === "closed") {
                  return promiseResolvedWith(void 0);
                }
                if (stream._state === "errored") {
                  return promiseRejectedWith(stream._storedError);
                }
                ReadableStreamClose(stream);
                var reader = stream._reader;
                if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
                  reader._readIntoRequests.forEach(function(readIntoRequest) {
                    readIntoRequest._closeSteps(void 0);
                  });
                  reader._readIntoRequests = new SimpleQueue();
                }
                var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
                return transformPromiseWith(sourceCancelPromise, noop);
              }
              function ReadableStreamClose(stream) {
                stream._state = "closed";
                var reader = stream._reader;
                if (reader === void 0) {
                  return;
                }
                defaultReaderClosedPromiseResolve(reader);
                if (IsReadableStreamDefaultReader(reader)) {
                  reader._readRequests.forEach(function(readRequest) {
                    readRequest._closeSteps();
                  });
                  reader._readRequests = new SimpleQueue();
                }
              }
              function ReadableStreamError(stream, e) {
                stream._state = "errored";
                stream._storedError = e;
                var reader = stream._reader;
                if (reader === void 0) {
                  return;
                }
                defaultReaderClosedPromiseReject(reader, e);
                if (IsReadableStreamDefaultReader(reader)) {
                  reader._readRequests.forEach(function(readRequest) {
                    readRequest._errorSteps(e);
                  });
                  reader._readRequests = new SimpleQueue();
                } else {
                  reader._readIntoRequests.forEach(function(readIntoRequest) {
                    readIntoRequest._errorSteps(e);
                  });
                  reader._readIntoRequests = new SimpleQueue();
                }
              }
              function streamBrandCheckException$1(name) {
                return new TypeError("ReadableStream.prototype." + name + " can only be used on a ReadableStream");
              }
              function convertQueuingStrategyInit(init, context) {
                assertDictionary(init, context);
                var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
                assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
                return { highWaterMark: convertUnrestrictedDouble(highWaterMark) };
              }
              var byteLengthSizeFunction = function(chunk) {
                return chunk.byteLength;
              };
              Object.defineProperty(byteLengthSizeFunction, "name", {
                value: "size",
                configurable: true
              });
              var ByteLengthQueuingStrategy = function() {
                function ByteLengthQueuingStrategy2(options) {
                  assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy");
                  options = convertQueuingStrategyInit(options, "First parameter");
                  this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
                }
                Object.defineProperty(ByteLengthQueuingStrategy2.prototype, "highWaterMark", {
                  get: function() {
                    if (!IsByteLengthQueuingStrategy(this)) {
                      throw byteLengthBrandCheckException("highWaterMark");
                    }
                    return this._byteLengthQueuingStrategyHighWaterMark;
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(ByteLengthQueuingStrategy2.prototype, "size", {
                  get: function() {
                    if (!IsByteLengthQueuingStrategy(this)) {
                      throw byteLengthBrandCheckException("size");
                    }
                    return byteLengthSizeFunction;
                  },
                  enumerable: false,
                  configurable: true
                });
                return ByteLengthQueuingStrategy2;
              }();
              Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
                highWaterMark: { enumerable: true },
                size: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
                  value: "ByteLengthQueuingStrategy",
                  configurable: true
                });
              }
              function byteLengthBrandCheckException(name) {
                return new TypeError("ByteLengthQueuingStrategy.prototype." + name + " can only be used on a ByteLengthQueuingStrategy");
              }
              function IsByteLengthQueuingStrategy(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_byteLengthQueuingStrategyHighWaterMark")) {
                  return false;
                }
                return x instanceof ByteLengthQueuingStrategy;
              }
              var countSizeFunction = function() {
                return 1;
              };
              Object.defineProperty(countSizeFunction, "name", {
                value: "size",
                configurable: true
              });
              var CountQueuingStrategy = function() {
                function CountQueuingStrategy2(options) {
                  assertRequiredArgument(options, 1, "CountQueuingStrategy");
                  options = convertQueuingStrategyInit(options, "First parameter");
                  this._countQueuingStrategyHighWaterMark = options.highWaterMark;
                }
                Object.defineProperty(CountQueuingStrategy2.prototype, "highWaterMark", {
                  get: function() {
                    if (!IsCountQueuingStrategy(this)) {
                      throw countBrandCheckException("highWaterMark");
                    }
                    return this._countQueuingStrategyHighWaterMark;
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(CountQueuingStrategy2.prototype, "size", {
                  get: function() {
                    if (!IsCountQueuingStrategy(this)) {
                      throw countBrandCheckException("size");
                    }
                    return countSizeFunction;
                  },
                  enumerable: false,
                  configurable: true
                });
                return CountQueuingStrategy2;
              }();
              Object.defineProperties(CountQueuingStrategy.prototype, {
                highWaterMark: { enumerable: true },
                size: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
                  value: "CountQueuingStrategy",
                  configurable: true
                });
              }
              function countBrandCheckException(name) {
                return new TypeError("CountQueuingStrategy.prototype." + name + " can only be used on a CountQueuingStrategy");
              }
              function IsCountQueuingStrategy(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_countQueuingStrategyHighWaterMark")) {
                  return false;
                }
                return x instanceof CountQueuingStrategy;
              }
              function convertTransformer(original, context) {
                assertDictionary(original, context);
                var flush = original === null || original === void 0 ? void 0 : original.flush;
                var readableType = original === null || original === void 0 ? void 0 : original.readableType;
                var start = original === null || original === void 0 ? void 0 : original.start;
                var transform = original === null || original === void 0 ? void 0 : original.transform;
                var writableType = original === null || original === void 0 ? void 0 : original.writableType;
                return {
                  flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, context + " has member 'flush' that"),
                  readableType,
                  start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, context + " has member 'start' that"),
                  transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, context + " has member 'transform' that"),
                  writableType
                };
              }
              function convertTransformerFlushCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(controller) {
                  return promiseCall(fn, original, [controller]);
                };
              }
              function convertTransformerStartCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(controller) {
                  return reflectCall(fn, original, [controller]);
                };
              }
              function convertTransformerTransformCallback(fn, original, context) {
                assertFunction(fn, context);
                return function(chunk, controller) {
                  return promiseCall(fn, original, [
                    chunk,
                    controller
                  ]);
                };
              }
              var TransformStream = function() {
                function TransformStream2(rawTransformer, rawWritableStrategy, rawReadableStrategy) {
                  if (rawTransformer === void 0) {
                    rawTransformer = {};
                  }
                  if (rawWritableStrategy === void 0) {
                    rawWritableStrategy = {};
                  }
                  if (rawReadableStrategy === void 0) {
                    rawReadableStrategy = {};
                  }
                  if (rawTransformer === void 0) {
                    rawTransformer = null;
                  }
                  var writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
                  var readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
                  var transformer = convertTransformer(rawTransformer, "First parameter");
                  if (transformer.readableType !== void 0) {
                    throw new RangeError("Invalid readableType specified");
                  }
                  if (transformer.writableType !== void 0) {
                    throw new RangeError("Invalid writableType specified");
                  }
                  var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
                  var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
                  var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
                  var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
                  var startPromise_resolve;
                  var startPromise = newPromise(function(resolve) {
                    startPromise_resolve = resolve;
                  });
                  InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
                  SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
                  if (transformer.start !== void 0) {
                    startPromise_resolve(transformer.start(this._transformStreamController));
                  } else {
                    startPromise_resolve(void 0);
                  }
                }
                Object.defineProperty(TransformStream2.prototype, "readable", {
                  get: function() {
                    if (!IsTransformStream(this)) {
                      throw streamBrandCheckException("readable");
                    }
                    return this._readable;
                  },
                  enumerable: false,
                  configurable: true
                });
                Object.defineProperty(TransformStream2.prototype, "writable", {
                  get: function() {
                    if (!IsTransformStream(this)) {
                      throw streamBrandCheckException("writable");
                    }
                    return this._writable;
                  },
                  enumerable: false,
                  configurable: true
                });
                return TransformStream2;
              }();
              Object.defineProperties(TransformStream.prototype, {
                readable: { enumerable: true },
                writable: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
                  value: "TransformStream",
                  configurable: true
                });
              }
              function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
                function startAlgorithm() {
                  return startPromise;
                }
                function writeAlgorithm(chunk) {
                  return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
                }
                function abortAlgorithm(reason) {
                  return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
                }
                function closeAlgorithm() {
                  return TransformStreamDefaultSinkCloseAlgorithm(stream);
                }
                stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
                function pullAlgorithm() {
                  return TransformStreamDefaultSourcePullAlgorithm(stream);
                }
                function cancelAlgorithm(reason) {
                  TransformStreamErrorWritableAndUnblockWrite(stream, reason);
                  return promiseResolvedWith(void 0);
                }
                stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
                stream._backpressure = void 0;
                stream._backpressureChangePromise = void 0;
                stream._backpressureChangePromise_resolve = void 0;
                TransformStreamSetBackpressure(stream, true);
                stream._transformStreamController = void 0;
              }
              function IsTransformStream(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_transformStreamController")) {
                  return false;
                }
                return x instanceof TransformStream;
              }
              function TransformStreamError(stream, e) {
                ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
                TransformStreamErrorWritableAndUnblockWrite(stream, e);
              }
              function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
                TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
                WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
                if (stream._backpressure) {
                  TransformStreamSetBackpressure(stream, false);
                }
              }
              function TransformStreamSetBackpressure(stream, backpressure) {
                if (stream._backpressureChangePromise !== void 0) {
                  stream._backpressureChangePromise_resolve();
                }
                stream._backpressureChangePromise = newPromise(function(resolve) {
                  stream._backpressureChangePromise_resolve = resolve;
                });
                stream._backpressure = backpressure;
              }
              var TransformStreamDefaultController = function() {
                function TransformStreamDefaultController2() {
                  throw new TypeError("Illegal constructor");
                }
                Object.defineProperty(TransformStreamDefaultController2.prototype, "desiredSize", {
                  get: function() {
                    if (!IsTransformStreamDefaultController(this)) {
                      throw defaultControllerBrandCheckException("desiredSize");
                    }
                    var readableController = this._controlledTransformStream._readable._readableStreamController;
                    return ReadableStreamDefaultControllerGetDesiredSize(readableController);
                  },
                  enumerable: false,
                  configurable: true
                });
                TransformStreamDefaultController2.prototype.enqueue = function(chunk) {
                  if (chunk === void 0) {
                    chunk = void 0;
                  }
                  if (!IsTransformStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException("enqueue");
                  }
                  TransformStreamDefaultControllerEnqueue(this, chunk);
                };
                TransformStreamDefaultController2.prototype.error = function(reason) {
                  if (reason === void 0) {
                    reason = void 0;
                  }
                  if (!IsTransformStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException("error");
                  }
                  TransformStreamDefaultControllerError(this, reason);
                };
                TransformStreamDefaultController2.prototype.terminate = function() {
                  if (!IsTransformStreamDefaultController(this)) {
                    throw defaultControllerBrandCheckException("terminate");
                  }
                  TransformStreamDefaultControllerTerminate(this);
                };
                return TransformStreamDefaultController2;
              }();
              Object.defineProperties(TransformStreamDefaultController.prototype, {
                enqueue: { enumerable: true },
                error: { enumerable: true },
                terminate: { enumerable: true },
                desiredSize: { enumerable: true }
              });
              if (typeof SymbolPolyfill.toStringTag === "symbol") {
                Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
                  value: "TransformStreamDefaultController",
                  configurable: true
                });
              }
              function IsTransformStreamDefaultController(x) {
                if (!typeIsObject(x)) {
                  return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream")) {
                  return false;
                }
                return x instanceof TransformStreamDefaultController;
              }
              function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
                controller._controlledTransformStream = stream;
                stream._transformStreamController = controller;
                controller._transformAlgorithm = transformAlgorithm;
                controller._flushAlgorithm = flushAlgorithm;
              }
              function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
                var controller = Object.create(TransformStreamDefaultController.prototype);
                var transformAlgorithm = function(chunk) {
                  try {
                    TransformStreamDefaultControllerEnqueue(controller, chunk);
                    return promiseResolvedWith(void 0);
                  } catch (transformResultE) {
                    return promiseRejectedWith(transformResultE);
                  }
                };
                var flushAlgorithm = function() {
                  return promiseResolvedWith(void 0);
                };
                if (transformer.transform !== void 0) {
                  transformAlgorithm = function(chunk) {
                    return transformer.transform(chunk, controller);
                  };
                }
                if (transformer.flush !== void 0) {
                  flushAlgorithm = function() {
                    return transformer.flush(controller);
                  };
                }
                SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
              }
              function TransformStreamDefaultControllerClearAlgorithms(controller) {
                controller._transformAlgorithm = void 0;
                controller._flushAlgorithm = void 0;
              }
              function TransformStreamDefaultControllerEnqueue(controller, chunk) {
                var stream = controller._controlledTransformStream;
                var readableController = stream._readable._readableStreamController;
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
                  throw new TypeError("Readable side is not in a state that permits enqueue");
                }
                try {
                  ReadableStreamDefaultControllerEnqueue(readableController, chunk);
                } catch (e) {
                  TransformStreamErrorWritableAndUnblockWrite(stream, e);
                  throw stream._readable._storedError;
                }
                var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
                if (backpressure !== stream._backpressure) {
                  TransformStreamSetBackpressure(stream, true);
                }
              }
              function TransformStreamDefaultControllerError(controller, e) {
                TransformStreamError(controller._controlledTransformStream, e);
              }
              function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
                var transformPromise = controller._transformAlgorithm(chunk);
                return transformPromiseWith(transformPromise, void 0, function(r) {
                  TransformStreamError(controller._controlledTransformStream, r);
                  throw r;
                });
              }
              function TransformStreamDefaultControllerTerminate(controller) {
                var stream = controller._controlledTransformStream;
                var readableController = stream._readable._readableStreamController;
                ReadableStreamDefaultControllerClose(readableController);
                var error = new TypeError("TransformStream terminated");
                TransformStreamErrorWritableAndUnblockWrite(stream, error);
              }
              function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
                var controller = stream._transformStreamController;
                if (stream._backpressure) {
                  var backpressureChangePromise = stream._backpressureChangePromise;
                  return transformPromiseWith(backpressureChangePromise, function() {
                    var writable = stream._writable;
                    var state = writable._state;
                    if (state === "erroring") {
                      throw writable._storedError;
                    }
                    return TransformStreamDefaultControllerPerformTransform(controller, chunk);
                  });
                }
                return TransformStreamDefaultControllerPerformTransform(controller, chunk);
              }
              function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
                TransformStreamError(stream, reason);
                return promiseResolvedWith(void 0);
              }
              function TransformStreamDefaultSinkCloseAlgorithm(stream) {
                var readable = stream._readable;
                var controller = stream._transformStreamController;
                var flushPromise = controller._flushAlgorithm();
                TransformStreamDefaultControllerClearAlgorithms(controller);
                return transformPromiseWith(flushPromise, function() {
                  if (readable._state === "errored") {
                    throw readable._storedError;
                  }
                  ReadableStreamDefaultControllerClose(readable._readableStreamController);
                }, function(r) {
                  TransformStreamError(stream, r);
                  throw readable._storedError;
                });
              }
              function TransformStreamDefaultSourcePullAlgorithm(stream) {
                TransformStreamSetBackpressure(stream, false);
                return stream._backpressureChangePromise;
              }
              function defaultControllerBrandCheckException(name) {
                return new TypeError("TransformStreamDefaultController.prototype." + name + " can only be used on a TransformStreamDefaultController");
              }
              function streamBrandCheckException(name) {
                return new TypeError("TransformStream.prototype." + name + " can only be used on a TransformStream");
              }
              exports3.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
              exports3.CountQueuingStrategy = CountQueuingStrategy;
              exports3.ReadableByteStreamController = ReadableByteStreamController;
              exports3.ReadableStream = ReadableStream2;
              exports3.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
              exports3.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
              exports3.ReadableStreamDefaultController = ReadableStreamDefaultController;
              exports3.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
              exports3.TransformStream = TransformStream;
              exports3.TransformStreamDefaultController = TransformStreamDefaultController;
              exports3.WritableStream = WritableStream;
              exports3.WritableStreamDefaultController = WritableStreamDefaultController;
              exports3.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
              Object.defineProperty(exports3, "__esModule", { value: true });
            });
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.BaseStandardFontDataFactory = exports2.BaseSVGFactory = exports2.BaseCanvasFactory = exports2.BaseCMapReaderFactory = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var BaseCanvasFactory = function() {
              function BaseCanvasFactory2() {
                _classCallCheck3(this, BaseCanvasFactory2);
                if (this.constructor === BaseCanvasFactory2) {
                  (0, _util2.unreachable)("Cannot initialize BaseCanvasFactory.");
                }
              }
              _createClass3(BaseCanvasFactory2, [{
                key: "create",
                value: function create(width, height) {
                  if (width <= 0 || height <= 0) {
                    throw new Error("Invalid canvas size");
                  }
                  var canvas = this._createCanvas(width, height);
                  return {
                    canvas,
                    context: canvas.getContext("2d")
                  };
                }
              }, {
                key: "reset",
                value: function reset(canvasAndContext, width, height) {
                  if (!canvasAndContext.canvas) {
                    throw new Error("Canvas is not specified");
                  }
                  if (width <= 0 || height <= 0) {
                    throw new Error("Invalid canvas size");
                  }
                  canvasAndContext.canvas.width = width;
                  canvasAndContext.canvas.height = height;
                }
              }, {
                key: "destroy",
                value: function destroy(canvasAndContext) {
                  if (!canvasAndContext.canvas) {
                    throw new Error("Canvas is not specified");
                  }
                  canvasAndContext.canvas.width = 0;
                  canvasAndContext.canvas.height = 0;
                  canvasAndContext.canvas = null;
                  canvasAndContext.context = null;
                }
              }, {
                key: "_createCanvas",
                value: function _createCanvas(width, height) {
                  (0, _util2.unreachable)("Abstract method `_createCanvas` called.");
                }
              }]);
              return BaseCanvasFactory2;
            }();
            exports2.BaseCanvasFactory = BaseCanvasFactory;
            var BaseCMapReaderFactory = function() {
              function BaseCMapReaderFactory2(_ref) {
                var _ref$baseUrl = _ref.baseUrl, baseUrl = _ref$baseUrl === void 0 ? null : _ref$baseUrl, _ref$isCompressed = _ref.isCompressed, isCompressed = _ref$isCompressed === void 0 ? false : _ref$isCompressed;
                _classCallCheck3(this, BaseCMapReaderFactory2);
                if (this.constructor === BaseCMapReaderFactory2) {
                  (0, _util2.unreachable)("Cannot initialize BaseCMapReaderFactory.");
                }
                this.baseUrl = baseUrl;
                this.isCompressed = isCompressed;
              }
              _createClass3(BaseCMapReaderFactory2, [{
                key: "fetch",
                value: function() {
                  var _fetch = _asyncToGenerator2(_regenerator2["default"].mark(function _callee(_ref2) {
                    var _this = this;
                    var name, url, compressionType;
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            name = _ref2.name;
                            if (this.baseUrl) {
                              _context.next = 3;
                              break;
                            }
                            throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');
                          case 3:
                            if (name) {
                              _context.next = 5;
                              break;
                            }
                            throw new Error("CMap name must be specified.");
                          case 5:
                            url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
                            compressionType = this.isCompressed ? _util2.CMapCompressionType.BINARY : _util2.CMapCompressionType.NONE;
                            return _context.abrupt("return", this._fetchData(url, compressionType)["catch"](function(reason) {
                              throw new Error("Unable to load ".concat(_this.isCompressed ? "binary " : "", "CMap at: ").concat(url));
                            }));
                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function fetch2(_x) {
                    return _fetch.apply(this, arguments);
                  }
                  return fetch2;
                }()
              }, {
                key: "_fetchData",
                value: function _fetchData(url, compressionType) {
                  (0, _util2.unreachable)("Abstract method `_fetchData` called.");
                }
              }]);
              return BaseCMapReaderFactory2;
            }();
            exports2.BaseCMapReaderFactory = BaseCMapReaderFactory;
            var BaseStandardFontDataFactory = function() {
              function BaseStandardFontDataFactory2(_ref3) {
                var _ref3$baseUrl = _ref3.baseUrl, baseUrl = _ref3$baseUrl === void 0 ? null : _ref3$baseUrl;
                _classCallCheck3(this, BaseStandardFontDataFactory2);
                if (this.constructor === BaseStandardFontDataFactory2) {
                  (0, _util2.unreachable)("Cannot initialize BaseStandardFontDataFactory.");
                }
                this.baseUrl = baseUrl;
              }
              _createClass3(BaseStandardFontDataFactory2, [{
                key: "fetch",
                value: function() {
                  var _fetch2 = _asyncToGenerator2(_regenerator2["default"].mark(function _callee2(_ref4) {
                    var filename, url;
                    return _regenerator2["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            filename = _ref4.filename;
                            if (this.baseUrl) {
                              _context2.next = 3;
                              break;
                            }
                            throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');
                          case 3:
                            if (filename) {
                              _context2.next = 5;
                              break;
                            }
                            throw new Error("Font filename must be specified.");
                          case 5:
                            url = "".concat(this.baseUrl).concat(filename);
                            return _context2.abrupt("return", this._fetchData(url)["catch"](function(reason) {
                              throw new Error("Unable to load font data at: ".concat(url));
                            }));
                          case 7:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));
                  function fetch2(_x2) {
                    return _fetch2.apply(this, arguments);
                  }
                  return fetch2;
                }()
              }, {
                key: "_fetchData",
                value: function _fetchData(url) {
                  (0, _util2.unreachable)("Abstract method `_fetchData` called.");
                }
              }]);
              return BaseStandardFontDataFactory2;
            }();
            exports2.BaseStandardFontDataFactory = BaseStandardFontDataFactory;
            var BaseSVGFactory = function() {
              function BaseSVGFactory2() {
                _classCallCheck3(this, BaseSVGFactory2);
                if (this.constructor === BaseSVGFactory2) {
                  (0, _util2.unreachable)("Cannot initialize BaseSVGFactory.");
                }
              }
              _createClass3(BaseSVGFactory2, [{
                key: "create",
                value: function create(width, height) {
                  if (width <= 0 || height <= 0) {
                    throw new Error("Invalid SVG dimensions");
                  }
                  var svg = this._createSVG("svg:svg");
                  svg.setAttribute("version", "1.1");
                  svg.setAttribute("width", "".concat(width, "px"));
                  svg.setAttribute("height", "".concat(height, "px"));
                  svg.setAttribute("preserveAspectRatio", "none");
                  svg.setAttribute("viewBox", "0 0 ".concat(width, " ").concat(height));
                  return svg;
                }
              }, {
                key: "createElement",
                value: function createElement(type) {
                  if (typeof type !== "string") {
                    throw new Error("Invalid SVG element type");
                  }
                  return this._createSVG(type);
                }
              }, {
                key: "_createSVG",
                value: function _createSVG(type) {
                  (0, _util2.unreachable)("Abstract method `_createSVG` called.");
                }
              }]);
              return BaseSVGFactory2;
            }();
            exports2.BaseSVGFactory = BaseSVGFactory;
          },
          (__unused_webpack_module, exports, __w_pdfjs_require__) => {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            exports.build = exports.RenderTask = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;
            exports.getDocument = getDocument;
            exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;
            exports.version = void 0;
            var _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));
            var _util = __w_pdfjs_require__(4);
            var _display_utils = __w_pdfjs_require__(1);
            var _font_loader = __w_pdfjs_require__(137);
            var _node_utils = __w_pdfjs_require__(138);
            var _annotation_storage = __w_pdfjs_require__(139);
            var _canvas = __w_pdfjs_require__(140);
            var _worker_options = __w_pdfjs_require__(142);
            var _is_node = __w_pdfjs_require__(6);
            var _message_handler = __w_pdfjs_require__(143);
            var _metadata = __w_pdfjs_require__(144);
            var _optional_content_config = __w_pdfjs_require__(145);
            var _transport_stream = __w_pdfjs_require__(146);
            var _xfa_text = __w_pdfjs_require__(147);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function _classPrivateFieldInitSpec(obj, privateMap, value) {
              _checkPrivateRedeclaration(obj, privateMap);
              privateMap.set(obj, value);
            }
            function _checkPrivateRedeclaration(obj, privateCollection) {
              if (privateCollection.has(obj)) {
                throw new TypeError("Cannot initialize the same private elements twice on an object");
              }
            }
            function _classPrivateFieldSet(receiver, privateMap, value) {
              var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
              _classApplyDescriptorSet(receiver, descriptor, value);
              return value;
            }
            function _classApplyDescriptorSet(receiver, descriptor, value) {
              if (descriptor.set) {
                descriptor.set.call(receiver, value);
              } else {
                if (!descriptor.writable) {
                  throw new TypeError("attempted to set read only private field");
                }
                descriptor.value = value;
              }
            }
            function _classPrivateFieldGet(receiver, privateMap) {
              var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
              return _classApplyDescriptorGet(receiver, descriptor);
            }
            function _classExtractFieldDescriptor(receiver, privateMap, action) {
              if (!privateMap.has(receiver)) {
                throw new TypeError("attempted to " + action + " private field on non-instance");
              }
              return privateMap.get(receiver);
            }
            function _classApplyDescriptorGet(receiver, descriptor) {
              if (descriptor.get) {
                return descriptor.get.call(receiver);
              }
              return descriptor.value;
            }
            function _toConsumableArray(arr) {
              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
            }
            function _nonIterableSpread() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArray(iter) {
              if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                return Array.from(iter);
            }
            function _arrayWithoutHoles(arr) {
              if (Array.isArray(arr))
                return _arrayLikeToArray(arr);
            }
            function _createForOfIteratorHelper(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e2) {
                    throw _e2;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e3) {
                didErr = true;
                err = _e3;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              return Constructor;
            }
            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _slicedToArray(arr, i) {
              return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
            }
            function _nonIterableRest() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray(o, minLen);
            }
            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _iterableToArrayLimit(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _typeof(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof = function _typeof3(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof = function _typeof3(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof(obj);
            }
            var DEFAULT_RANGE_CHUNK_SIZE = 65536;
            var RENDERING_CANCELLED_TIMEOUT = 100;
            var DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;
            exports.DefaultCanvasFactory = DefaultCanvasFactory;
            var DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;
            exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
            var DefaultStandardFontDataFactory = _is_node.isNodeJS ? _node_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;
            exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;
            var createPDFNetworkStream;
            function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {
              createPDFNetworkStream = pdfNetworkStreamFactory;
            }
            function getDocument(src) {
              var task = new PDFDocumentLoadingTask();
              var source;
              if (typeof src === "string" || src instanceof URL) {
                source = {
                  url: src
                };
              } else if ((0, _util.isArrayBuffer)(src)) {
                source = {
                  data: src
                };
              } else if (src instanceof PDFDataRangeTransport) {
                source = {
                  range: src
                };
              } else {
                if (_typeof(src) !== "object") {
                  throw new Error("Invalid parameter in getDocument, need either string, URL, Uint8Array, or parameter object.");
                }
                if (!src.url && !src.data && !src.range) {
                  throw new Error("Invalid parameter object: need either .data, .range or .url");
                }
                source = src;
              }
              var params = /* @__PURE__ */ Object.create(null);
              var rangeTransport = null, worker2 = null;
              for (var key in source) {
                var value = source[key];
                switch (key) {
                  case "url":
                    if (typeof window !== "undefined") {
                      try {
                        params[key] = new URL(value, window.location).href;
                        continue;
                      } catch (ex) {
                        (0, _util.warn)('Cannot create valid URL: "'.concat(ex, '".'));
                      }
                    } else if (typeof value === "string" || value instanceof URL) {
                      params[key] = value.toString();
                      continue;
                    }
                    throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
                  case "range":
                    rangeTransport = value;
                    continue;
                  case "worker":
                    worker2 = value;
                    continue;
                  case "data":
                    if (_is_node.isNodeJS && typeof Buffer !== "undefined" && value instanceof Buffer) {
                      params[key] = new Uint8Array(value);
                    } else if (value instanceof Uint8Array) {
                      break;
                    } else if (typeof value === "string") {
                      params[key] = (0, _util.stringToBytes)(value);
                    } else if (_typeof(value) === "object" && value !== null && !isNaN(value.length)) {
                      params[key] = new Uint8Array(value);
                    } else if ((0, _util.isArrayBuffer)(value)) {
                      params[key] = new Uint8Array(value);
                    } else {
                      throw new Error("Invalid PDF binary data: either typed array, string, or array-like object is expected in the data property.");
                    }
                    continue;
                }
                params[key] = value;
              }
              params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;
              params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;
              params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;
              params.ignoreErrors = params.stopAtErrors !== true;
              params.fontExtraProperties = params.fontExtraProperties === true;
              params.pdfBug = params.pdfBug === true;
              params.enableXfa = params.enableXfa === true;
              if (typeof params.docBaseUrl !== "string" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {
                params.docBaseUrl = null;
              }
              if (!Number.isInteger(params.maxImageSize)) {
                params.maxImageSize = -1;
              }
              if (typeof params.useWorkerFetch !== "boolean") {
                params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;
              }
              if (typeof params.isEvalSupported !== "boolean") {
                params.isEvalSupported = true;
              }
              if (typeof params.disableFontFace !== "boolean") {
                params.disableFontFace = _is_node.isNodeJS;
              }
              if (typeof params.useSystemFonts !== "boolean") {
                params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;
              }
              if (typeof params.ownerDocument === "undefined") {
                params.ownerDocument = globalThis.document;
              }
              if (typeof params.disableRange !== "boolean") {
                params.disableRange = false;
              }
              if (typeof params.disableStream !== "boolean") {
                params.disableStream = false;
              }
              if (typeof params.disableAutoFetch !== "boolean") {
                params.disableAutoFetch = false;
              }
              (0, _util.setVerbosityLevel)(params.verbosity);
              if (!worker2) {
                var workerParams = {
                  verbosity: params.verbosity,
                  port: _worker_options.GlobalWorkerOptions.workerPort
                };
                worker2 = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
                task._worker = worker2;
              }
              var docId = task.docId;
              worker2.promise.then(function() {
                if (task.destroyed) {
                  throw new Error("Loading aborted");
                }
                var workerIdPromise = _fetchDocument(worker2, params, rangeTransport, docId);
                var networkStreamPromise = new Promise(function(resolve) {
                  var networkStream;
                  if (rangeTransport) {
                    networkStream = new _transport_stream.PDFDataTransportStream({
                      length: params.length,
                      initialData: params.initialData,
                      progressiveDone: params.progressiveDone,
                      contentDispositionFilename: params.contentDispositionFilename,
                      disableRange: params.disableRange,
                      disableStream: params.disableStream
                    }, rangeTransport);
                  } else if (!params.data) {
                    networkStream = createPDFNetworkStream({
                      url: params.url,
                      length: params.length,
                      httpHeaders: params.httpHeaders,
                      withCredentials: params.withCredentials,
                      rangeChunkSize: params.rangeChunkSize,
                      disableRange: params.disableRange,
                      disableStream: params.disableStream
                    });
                  }
                  resolve(networkStream);
                });
                return Promise.all([workerIdPromise, networkStreamPromise]).then(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), workerId = _ref2[0], networkStream = _ref2[1];
                  if (task.destroyed) {
                    throw new Error("Loading aborted");
                  }
                  var messageHandler = new _message_handler.MessageHandler(docId, workerId, worker2.port);
                  var transport = new WorkerTransport(messageHandler, task, networkStream, params);
                  task._transport = transport;
                  messageHandler.send("Ready", null);
                });
              })["catch"](task._capability.reject);
              return task;
            }
            function _fetchDocument(_x, _x2, _x3, _x4) {
              return _fetchDocument2.apply(this, arguments);
            }
            function _fetchDocument2() {
              _fetchDocument2 = _asyncToGenerator(_regenerator["default"].mark(function _callee7(worker2, source, pdfDataRangeTransport, docId) {
                var workerId;
                return _regenerator["default"].wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        if (!worker2.destroyed) {
                          _context7.next = 2;
                          break;
                        }
                        throw new Error("Worker was destroyed");
                      case 2:
                        if (pdfDataRangeTransport) {
                          source.length = pdfDataRangeTransport.length;
                          source.initialData = pdfDataRangeTransport.initialData;
                          source.progressiveDone = pdfDataRangeTransport.progressiveDone;
                          source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;
                        }
                        _context7.next = 5;
                        return worker2.messageHandler.sendWithPromise("GetDocRequest", {
                          docId,
                          apiVersion: "2.12.313",
                          source: {
                            data: source.data,
                            url: source.url,
                            password: source.password,
                            disableAutoFetch: source.disableAutoFetch,
                            rangeChunkSize: source.rangeChunkSize,
                            length: source.length
                          },
                          maxImageSize: source.maxImageSize,
                          disableFontFace: source.disableFontFace,
                          docBaseUrl: source.docBaseUrl,
                          ignoreErrors: source.ignoreErrors,
                          isEvalSupported: source.isEvalSupported,
                          fontExtraProperties: source.fontExtraProperties,
                          enableXfa: source.enableXfa,
                          useSystemFonts: source.useSystemFonts,
                          cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,
                          standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null
                        });
                      case 5:
                        workerId = _context7.sent;
                        if (!worker2.destroyed) {
                          _context7.next = 8;
                          break;
                        }
                        throw new Error("Worker was destroyed");
                      case 8:
                        return _context7.abrupt("return", workerId);
                      case 9:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7);
              }));
              return _fetchDocument2.apply(this, arguments);
            }
            var PDFDocumentLoadingTask = function() {
              function PDFDocumentLoadingTask2() {
                _classCallCheck(this, PDFDocumentLoadingTask2);
                this._capability = (0, _util.createPromiseCapability)();
                this._transport = null;
                this._worker = null;
                this.docId = "d".concat(PDFDocumentLoadingTask2.idCounters.doc++);
                this.destroyed = false;
                this.onPassword = null;
                this.onProgress = null;
                this.onUnsupportedFeature = null;
              }
              _createClass(PDFDocumentLoadingTask2, [{
                key: "promise",
                get: function get2() {
                  return this._capability.promise;
                }
              }, {
                key: "destroy",
                value: function() {
                  var _destroy = _asyncToGenerator(_regenerator["default"].mark(function _callee() {
                    var _this$_transport;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            this.destroyed = true;
                            _context.next = 3;
                            return (_this$_transport = this._transport) === null || _this$_transport === void 0 ? void 0 : _this$_transport.destroy();
                          case 3:
                            this._transport = null;
                            if (this._worker) {
                              this._worker.destroy();
                              this._worker = null;
                            }
                          case 5:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function destroy() {
                    return _destroy.apply(this, arguments);
                  }
                  return destroy;
                }()
              }], [{
                key: "idCounters",
                get: function get2() {
                  return (0, _util.shadow)(this, "idCounters", {
                    doc: 0
                  });
                }
              }]);
              return PDFDocumentLoadingTask2;
            }();
            exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;
            var PDFDataRangeTransport = function() {
              function PDFDataRangeTransport4(length, initialData) {
                var progressiveDone = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                var contentDispositionFilename = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
                _classCallCheck(this, PDFDataRangeTransport4);
                this.length = length;
                this.initialData = initialData;
                this.progressiveDone = progressiveDone;
                this.contentDispositionFilename = contentDispositionFilename;
                this._rangeListeners = [];
                this._progressListeners = [];
                this._progressiveReadListeners = [];
                this._progressiveDoneListeners = [];
                this._readyCapability = (0, _util.createPromiseCapability)();
              }
              _createClass(PDFDataRangeTransport4, [{
                key: "addRangeListener",
                value: function addRangeListener(listener) {
                  this._rangeListeners.push(listener);
                }
              }, {
                key: "addProgressListener",
                value: function addProgressListener(listener) {
                  this._progressListeners.push(listener);
                }
              }, {
                key: "addProgressiveReadListener",
                value: function addProgressiveReadListener(listener) {
                  this._progressiveReadListeners.push(listener);
                }
              }, {
                key: "addProgressiveDoneListener",
                value: function addProgressiveDoneListener(listener) {
                  this._progressiveDoneListeners.push(listener);
                }
              }, {
                key: "onDataRange",
                value: function onDataRange(begin, chunk) {
                  var _iterator = _createForOfIteratorHelper(this._rangeListeners), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var listener = _step.value;
                      listener(begin, chunk);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                }
              }, {
                key: "onDataProgress",
                value: function onDataProgress(loaded, total) {
                  var _this = this;
                  this._readyCapability.promise.then(function() {
                    var _iterator2 = _createForOfIteratorHelper(_this._progressListeners), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var listener = _step2.value;
                        listener(loaded, total);
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                  });
                }
              }, {
                key: "onDataProgressiveRead",
                value: function onDataProgressiveRead(chunk) {
                  var _this2 = this;
                  this._readyCapability.promise.then(function() {
                    var _iterator3 = _createForOfIteratorHelper(_this2._progressiveReadListeners), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var listener = _step3.value;
                        listener(chunk);
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                  });
                }
              }, {
                key: "onDataProgressiveDone",
                value: function onDataProgressiveDone() {
                  var _this3 = this;
                  this._readyCapability.promise.then(function() {
                    var _iterator4 = _createForOfIteratorHelper(_this3._progressiveDoneListeners), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var listener = _step4.value;
                        listener();
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                  });
                }
              }, {
                key: "transportReady",
                value: function transportReady() {
                  this._readyCapability.resolve();
                }
              }, {
                key: "requestDataRange",
                value: function requestDataRange(begin, end) {
                  (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
                }
              }, {
                key: "abort",
                value: function abort() {
                }
              }]);
              return PDFDataRangeTransport4;
            }();
            exports.PDFDataRangeTransport = PDFDataRangeTransport;
            var PDFDocumentProxy = function() {
              function PDFDocumentProxy2(pdfInfo, transport) {
                var _this4 = this;
                _classCallCheck(this, PDFDocumentProxy2);
                this._pdfInfo = pdfInfo;
                this._transport = transport;
                Object.defineProperty(this, "fingerprint", {
                  get: function get2() {
                    (0, _display_utils.deprecated)("`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead.");
                    return this.fingerprints[0];
                  }
                });
                Object.defineProperty(this, "getStats", {
                  value: function() {
                    var _value = _asyncToGenerator(_regenerator["default"].mark(function _callee2() {
                      return _regenerator["default"].wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              (0, _display_utils.deprecated)("`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead.");
                              return _context2.abrupt("return", _this4.stats || {
                                streamTypes: {},
                                fontTypes: {}
                              });
                            case 2:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));
                    function value() {
                      return _value.apply(this, arguments);
                    }
                    return value;
                  }()
                });
              }
              _createClass(PDFDocumentProxy2, [{
                key: "annotationStorage",
                get: function get2() {
                  return this._transport.annotationStorage;
                }
              }, {
                key: "numPages",
                get: function get2() {
                  return this._pdfInfo.numPages;
                }
              }, {
                key: "fingerprints",
                get: function get2() {
                  return this._pdfInfo.fingerprints;
                }
              }, {
                key: "stats",
                get: function get2() {
                  return this._transport.stats;
                }
              }, {
                key: "isPureXfa",
                get: function get2() {
                  return !!this._transport._htmlForXfa;
                }
              }, {
                key: "allXfaHtml",
                get: function get2() {
                  return this._transport._htmlForXfa;
                }
              }, {
                key: "getPage",
                value: function getPage(pageNumber) {
                  return this._transport.getPage(pageNumber);
                }
              }, {
                key: "getPageIndex",
                value: function getPageIndex(ref) {
                  return this._transport.getPageIndex(ref);
                }
              }, {
                key: "getDestinations",
                value: function getDestinations() {
                  return this._transport.getDestinations();
                }
              }, {
                key: "getDestination",
                value: function getDestination(id) {
                  return this._transport.getDestination(id);
                }
              }, {
                key: "getPageLabels",
                value: function getPageLabels() {
                  return this._transport.getPageLabels();
                }
              }, {
                key: "getPageLayout",
                value: function getPageLayout() {
                  return this._transport.getPageLayout();
                }
              }, {
                key: "getPageMode",
                value: function getPageMode() {
                  return this._transport.getPageMode();
                }
              }, {
                key: "getViewerPreferences",
                value: function getViewerPreferences() {
                  return this._transport.getViewerPreferences();
                }
              }, {
                key: "getOpenAction",
                value: function getOpenAction() {
                  return this._transport.getOpenAction();
                }
              }, {
                key: "getAttachments",
                value: function getAttachments() {
                  return this._transport.getAttachments();
                }
              }, {
                key: "getJavaScript",
                value: function getJavaScript() {
                  return this._transport.getJavaScript();
                }
              }, {
                key: "getJSActions",
                value: function getJSActions() {
                  return this._transport.getDocJSActions();
                }
              }, {
                key: "getOutline",
                value: function getOutline() {
                  return this._transport.getOutline();
                }
              }, {
                key: "getOptionalContentConfig",
                value: function getOptionalContentConfig() {
                  return this._transport.getOptionalContentConfig();
                }
              }, {
                key: "getPermissions",
                value: function getPermissions() {
                  return this._transport.getPermissions();
                }
              }, {
                key: "getMetadata",
                value: function getMetadata() {
                  return this._transport.getMetadata();
                }
              }, {
                key: "getMarkInfo",
                value: function getMarkInfo() {
                  return this._transport.getMarkInfo();
                }
              }, {
                key: "getData",
                value: function getData() {
                  return this._transport.getData();
                }
              }, {
                key: "getDownloadInfo",
                value: function getDownloadInfo() {
                  return this._transport.downloadInfoCapability.promise;
                }
              }, {
                key: "cleanup",
                value: function cleanup() {
                  var keepLoadedFonts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
                }
              }, {
                key: "destroy",
                value: function destroy() {
                  return this.loadingTask.destroy();
                }
              }, {
                key: "loadingParams",
                get: function get2() {
                  return this._transport.loadingParams;
                }
              }, {
                key: "loadingTask",
                get: function get2() {
                  return this._transport.loadingTask;
                }
              }, {
                key: "saveDocument",
                value: function saveDocument() {
                  if (this._transport.annotationStorage.size <= 0) {
                    (0, _display_utils.deprecated)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
                  }
                  return this._transport.saveDocument();
                }
              }, {
                key: "getFieldObjects",
                value: function getFieldObjects() {
                  return this._transport.getFieldObjects();
                }
              }, {
                key: "hasJSActions",
                value: function hasJSActions() {
                  return this._transport.hasJSActions();
                }
              }, {
                key: "getCalculationOrderIds",
                value: function getCalculationOrderIds() {
                  return this._transport.getCalculationOrderIds();
                }
              }]);
              return PDFDocumentProxy2;
            }();
            exports.PDFDocumentProxy = PDFDocumentProxy;
            var PDFPageProxy = function() {
              function PDFPageProxy2(pageIndex, pageInfo, transport, ownerDocument) {
                var pdfBug = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
                _classCallCheck(this, PDFPageProxy2);
                this._pageIndex = pageIndex;
                this._pageInfo = pageInfo;
                this._ownerDocument = ownerDocument;
                this._transport = transport;
                this._stats = pdfBug ? new _display_utils.StatTimer() : null;
                this._pdfBug = pdfBug;
                this.commonObjs = transport.commonObjs;
                this.objs = new PDFObjects();
                this.cleanupAfterRender = false;
                this.pendingCleanup = false;
                this._intentStates = /* @__PURE__ */ new Map();
                this._annotationPromises = /* @__PURE__ */ new Map();
                this.destroyed = false;
              }
              _createClass(PDFPageProxy2, [{
                key: "pageNumber",
                get: function get2() {
                  return this._pageIndex + 1;
                }
              }, {
                key: "rotate",
                get: function get2() {
                  return this._pageInfo.rotate;
                }
              }, {
                key: "ref",
                get: function get2() {
                  return this._pageInfo.ref;
                }
              }, {
                key: "userUnit",
                get: function get2() {
                  return this._pageInfo.userUnit;
                }
              }, {
                key: "view",
                get: function get2() {
                  return this._pageInfo.view;
                }
              }, {
                key: "getViewport",
                value: function getViewport() {
                  var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, scale = _ref3.scale, _ref3$rotation = _ref3.rotation, rotation = _ref3$rotation === void 0 ? this.rotate : _ref3$rotation, _ref3$offsetX = _ref3.offsetX, offsetX = _ref3$offsetX === void 0 ? 0 : _ref3$offsetX, _ref3$offsetY = _ref3.offsetY, offsetY = _ref3$offsetY === void 0 ? 0 : _ref3$offsetY, _ref3$dontFlip = _ref3.dontFlip, dontFlip = _ref3$dontFlip === void 0 ? false : _ref3$dontFlip;
                  return new _display_utils.PageViewport({
                    viewBox: this.view,
                    scale,
                    rotation,
                    offsetX,
                    offsetY,
                    dontFlip
                  });
                }
              }, {
                key: "getAnnotations",
                value: function getAnnotations() {
                  var _ref4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref4$intent = _ref4.intent, intent = _ref4$intent === void 0 ? "display" : _ref4$intent;
                  var intentArgs = this._transport.getRenderingIntent(intent);
                  var promise = this._annotationPromises.get(intentArgs.cacheKey);
                  if (!promise) {
                    promise = this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);
                    this._annotationPromises.set(intentArgs.cacheKey, promise);
                    promise = promise.then(function(annotations) {
                      var _iterator5 = _createForOfIteratorHelper(annotations), _step5;
                      try {
                        var _loop = function _loop2() {
                          var annotation = _step5.value;
                          if (annotation.titleObj !== void 0) {
                            Object.defineProperty(annotation, "title", {
                              get: function get2() {
                                (0, _display_utils.deprecated)("`title`-property on annotation, please use `titleObj` instead.");
                                return annotation.titleObj.str;
                              }
                            });
                          }
                          if (annotation.contentsObj !== void 0) {
                            Object.defineProperty(annotation, "contents", {
                              get: function get2() {
                                (0, _display_utils.deprecated)("`contents`-property on annotation, please use `contentsObj` instead.");
                                return annotation.contentsObj.str;
                              }
                            });
                          }
                        };
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          _loop();
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                      return annotations;
                    });
                  }
                  return promise;
                }
              }, {
                key: "getJSActions",
                value: function getJSActions() {
                  return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));
                }
              }, {
                key: "getXfa",
                value: function() {
                  var _getXfa = _asyncToGenerator(_regenerator["default"].mark(function _callee3() {
                    var _this$_transport$_htm;
                    return _regenerator["default"].wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            return _context3.abrupt("return", ((_this$_transport$_htm = this._transport._htmlForXfa) === null || _this$_transport$_htm === void 0 ? void 0 : _this$_transport$_htm.children[this._pageIndex]) || null);
                          case 1:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3, this);
                  }));
                  function getXfa() {
                    return _getXfa.apply(this, arguments);
                  }
                  return getXfa;
                }()
              }, {
                key: "render",
                value: function render(_ref5) {
                  var _arguments$, _arguments$2, _this5 = this, _intentState;
                  var canvasContext = _ref5.canvasContext, viewport = _ref5.viewport, _ref5$intent = _ref5.intent, intent = _ref5$intent === void 0 ? "display" : _ref5$intent, _ref5$annotationMode = _ref5.annotationMode, annotationMode = _ref5$annotationMode === void 0 ? _util.AnnotationMode.ENABLE : _ref5$annotationMode, _ref5$transform = _ref5.transform, transform = _ref5$transform === void 0 ? null : _ref5$transform, _ref5$imageLayer = _ref5.imageLayer, imageLayer = _ref5$imageLayer === void 0 ? null : _ref5$imageLayer, _ref5$canvasFactory = _ref5.canvasFactory, canvasFactory = _ref5$canvasFactory === void 0 ? null : _ref5$canvasFactory, _ref5$background = _ref5.background, background = _ref5$background === void 0 ? null : _ref5$background, _ref5$optionalContent = _ref5.optionalContentConfigPromise, optionalContentConfigPromise = _ref5$optionalContent === void 0 ? null : _ref5$optionalContent, _ref5$annotationCanva = _ref5.annotationCanvasMap, annotationCanvasMap = _ref5$annotationCanva === void 0 ? null : _ref5$annotationCanva;
                  if (((_arguments$ = arguments[0]) === null || _arguments$ === void 0 ? void 0 : _arguments$.renderInteractiveForms) !== void 0) {
                    (0, _display_utils.deprecated)("render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead.");
                    if (arguments[0].renderInteractiveForms === true && annotationMode === _util.AnnotationMode.ENABLE) {
                      annotationMode = _util.AnnotationMode.ENABLE_FORMS;
                    }
                  }
                  if (((_arguments$2 = arguments[0]) === null || _arguments$2 === void 0 ? void 0 : _arguments$2.includeAnnotationStorage) !== void 0) {
                    (0, _display_utils.deprecated)("render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead.");
                    if (arguments[0].includeAnnotationStorage === true && annotationMode === _util.AnnotationMode.ENABLE) {
                      annotationMode = _util.AnnotationMode.ENABLE_STORAGE;
                    }
                  }
                  if (this._stats) {
                    this._stats.time("Overall");
                  }
                  var intentArgs = this._transport.getRenderingIntent(intent, annotationMode);
                  this.pendingCleanup = false;
                  if (!optionalContentConfigPromise) {
                    optionalContentConfigPromise = this._transport.getOptionalContentConfig();
                  }
                  var intentState = this._intentStates.get(intentArgs.cacheKey);
                  if (!intentState) {
                    intentState = /* @__PURE__ */ Object.create(null);
                    this._intentStates.set(intentArgs.cacheKey, intentState);
                  }
                  if (intentState.streamReaderCancelTimeout) {
                    clearTimeout(intentState.streamReaderCancelTimeout);
                    intentState.streamReaderCancelTimeout = null;
                  }
                  var canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({
                    ownerDocument: this._ownerDocument
                  });
                  var intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);
                  if (!intentState.displayReadyCapability) {
                    intentState.displayReadyCapability = (0, _util.createPromiseCapability)();
                    intentState.operatorList = {
                      fnArray: [],
                      argsArray: [],
                      lastChunk: false
                    };
                    if (this._stats) {
                      this._stats.time("Page Request");
                    }
                    this._pumpOperatorList(intentArgs);
                  }
                  var complete = function complete2(error) {
                    intentState.renderTasks["delete"](internalRenderTask);
                    if (_this5.cleanupAfterRender || intentPrint) {
                      _this5.pendingCleanup = true;
                    }
                    _this5._tryCleanup();
                    if (error) {
                      internalRenderTask.capability.reject(error);
                      _this5._abortOperatorList({
                        intentState,
                        reason: error instanceof Error ? error : new Error(error)
                      });
                    } else {
                      internalRenderTask.capability.resolve();
                    }
                    if (_this5._stats) {
                      _this5._stats.timeEnd("Rendering");
                      _this5._stats.timeEnd("Overall");
                    }
                  };
                  var internalRenderTask = new InternalRenderTask({
                    callback: complete,
                    params: {
                      canvasContext,
                      viewport,
                      transform,
                      imageLayer,
                      background
                    },
                    objs: this.objs,
                    commonObjs: this.commonObjs,
                    annotationCanvasMap,
                    operatorList: intentState.operatorList,
                    pageIndex: this._pageIndex,
                    canvasFactory: canvasFactoryInstance,
                    useRequestAnimationFrame: !intentPrint,
                    pdfBug: this._pdfBug
                  });
                  ((_intentState = intentState).renderTasks || (_intentState.renderTasks = /* @__PURE__ */ new Set())).add(internalRenderTask);
                  var renderTask = internalRenderTask.task;
                  Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(function(_ref6) {
                    var _ref7 = _slicedToArray(_ref6, 2), transparency = _ref7[0], optionalContentConfig = _ref7[1];
                    if (_this5.pendingCleanup) {
                      complete();
                      return;
                    }
                    if (_this5._stats) {
                      _this5._stats.time("Rendering");
                    }
                    internalRenderTask.initializeGraphics({
                      transparency,
                      optionalContentConfig
                    });
                    internalRenderTask.operatorListChanged();
                  })["catch"](complete);
                  return renderTask;
                }
              }, {
                key: "getOperatorList",
                value: function getOperatorList() {
                  var _ref8 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref8$intent = _ref8.intent, intent = _ref8$intent === void 0 ? "display" : _ref8$intent, _ref8$annotationMode = _ref8.annotationMode, annotationMode = _ref8$annotationMode === void 0 ? _util.AnnotationMode.ENABLE : _ref8$annotationMode;
                  function operatorListChanged() {
                    if (intentState.operatorList.lastChunk) {
                      intentState.opListReadCapability.resolve(intentState.operatorList);
                      intentState.renderTasks["delete"](opListTask);
                    }
                  }
                  var intentArgs = this._transport.getRenderingIntent(intent, annotationMode, true);
                  var intentState = this._intentStates.get(intentArgs.cacheKey);
                  if (!intentState) {
                    intentState = /* @__PURE__ */ Object.create(null);
                    this._intentStates.set(intentArgs.cacheKey, intentState);
                  }
                  var opListTask;
                  if (!intentState.opListReadCapability) {
                    var _intentState2;
                    opListTask = /* @__PURE__ */ Object.create(null);
                    opListTask.operatorListChanged = operatorListChanged;
                    intentState.opListReadCapability = (0, _util.createPromiseCapability)();
                    ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = /* @__PURE__ */ new Set())).add(opListTask);
                    intentState.operatorList = {
                      fnArray: [],
                      argsArray: [],
                      lastChunk: false
                    };
                    if (this._stats) {
                      this._stats.time("Page Request");
                    }
                    this._pumpOperatorList(intentArgs);
                  }
                  return intentState.opListReadCapability.promise;
                }
              }, {
                key: "streamTextContent",
                value: function streamTextContent() {
                  var _ref9 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref9$normalizeWhites = _ref9.normalizeWhitespace, normalizeWhitespace = _ref9$normalizeWhites === void 0 ? false : _ref9$normalizeWhites, _ref9$disableCombineT = _ref9.disableCombineTextItems, disableCombineTextItems = _ref9$disableCombineT === void 0 ? false : _ref9$disableCombineT, _ref9$includeMarkedCo = _ref9.includeMarkedContent, includeMarkedContent = _ref9$includeMarkedCo === void 0 ? false : _ref9$includeMarkedCo;
                  var TEXT_CONTENT_CHUNK_SIZE = 100;
                  return this._transport.messageHandler.sendWithStream("GetTextContent", {
                    pageIndex: this._pageIndex,
                    normalizeWhitespace: normalizeWhitespace === true,
                    combineTextItems: disableCombineTextItems !== true,
                    includeMarkedContent: includeMarkedContent === true
                  }, {
                    highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
                    size: function size(textContent) {
                      return textContent.items.length;
                    }
                  });
                }
              }, {
                key: "getTextContent",
                value: function getTextContent() {
                  var params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                  if (this._transport._htmlForXfa) {
                    return this.getXfa().then(function(xfa) {
                      return _xfa_text.XfaText.textContent(xfa);
                    });
                  }
                  var readableStream = this.streamTextContent(params);
                  return new Promise(function(resolve, reject) {
                    function pump() {
                      reader.read().then(function(_ref10) {
                        var _textContent$items;
                        var value = _ref10.value, done = _ref10.done;
                        if (done) {
                          resolve(textContent);
                          return;
                        }
                        Object.assign(textContent.styles, value.styles);
                        (_textContent$items = textContent.items).push.apply(_textContent$items, _toConsumableArray(value.items));
                        pump();
                      }, reject);
                    }
                    var reader = readableStream.getReader();
                    var textContent = {
                      items: [],
                      styles: /* @__PURE__ */ Object.create(null)
                    };
                    pump();
                  });
                }
              }, {
                key: "getStructTree",
                value: function getStructTree() {
                  return this._structTreePromise || (this._structTreePromise = this._transport.getStructTree(this._pageIndex));
                }
              }, {
                key: "_destroy",
                value: function _destroy() {
                  this.destroyed = true;
                  var waitOn = [];
                  var _iterator6 = _createForOfIteratorHelper(this._intentStates.values()), _step6;
                  try {
                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                      var intentState = _step6.value;
                      this._abortOperatorList({
                        intentState,
                        reason: new Error("Page was destroyed."),
                        force: true
                      });
                      if (intentState.opListReadCapability) {
                        continue;
                      }
                      var _iterator7 = _createForOfIteratorHelper(intentState.renderTasks), _step7;
                      try {
                        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                          var internalRenderTask = _step7.value;
                          waitOn.push(internalRenderTask.completed);
                          internalRenderTask.cancel();
                        }
                      } catch (err) {
                        _iterator7.e(err);
                      } finally {
                        _iterator7.f();
                      }
                    }
                  } catch (err) {
                    _iterator6.e(err);
                  } finally {
                    _iterator6.f();
                  }
                  this.objs.clear();
                  this._annotationPromises.clear();
                  this._jsActionsPromise = null;
                  this._structTreePromise = null;
                  this.pendingCleanup = false;
                  return Promise.all(waitOn);
                }
              }, {
                key: "cleanup",
                value: function cleanup() {
                  var resetStats = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  this.pendingCleanup = true;
                  return this._tryCleanup(resetStats);
                }
              }, {
                key: "_tryCleanup",
                value: function _tryCleanup() {
                  var resetStats = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  if (!this.pendingCleanup) {
                    return false;
                  }
                  var _iterator8 = _createForOfIteratorHelper(this._intentStates.values()), _step8;
                  try {
                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                      var _step8$value = _step8.value, renderTasks = _step8$value.renderTasks, operatorList = _step8$value.operatorList;
                      if (renderTasks.size > 0 || !operatorList.lastChunk) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator8.e(err);
                  } finally {
                    _iterator8.f();
                  }
                  this._intentStates.clear();
                  this.objs.clear();
                  this._annotationPromises.clear();
                  this._jsActionsPromise = null;
                  this._structTreePromise = null;
                  if (resetStats && this._stats) {
                    this._stats = new _display_utils.StatTimer();
                  }
                  this.pendingCleanup = false;
                  return true;
                }
              }, {
                key: "_startRenderPage",
                value: function _startRenderPage(transparency, cacheKey) {
                  var intentState = this._intentStates.get(cacheKey);
                  if (!intentState) {
                    return;
                  }
                  if (this._stats) {
                    this._stats.timeEnd("Page Request");
                  }
                  if (intentState.displayReadyCapability) {
                    intentState.displayReadyCapability.resolve(transparency);
                  }
                }
              }, {
                key: "_renderPageChunk",
                value: function _renderPageChunk(operatorListChunk, intentState) {
                  for (var i = 0, ii = operatorListChunk.length; i < ii; i++) {
                    intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
                    intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
                  }
                  intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
                  var _iterator9 = _createForOfIteratorHelper(intentState.renderTasks), _step9;
                  try {
                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                      var internalRenderTask = _step9.value;
                      internalRenderTask.operatorListChanged();
                    }
                  } catch (err) {
                    _iterator9.e(err);
                  } finally {
                    _iterator9.f();
                  }
                  if (operatorListChunk.lastChunk) {
                    this._tryCleanup();
                  }
                }
              }, {
                key: "_pumpOperatorList",
                value: function _pumpOperatorList(_ref11) {
                  var _this6 = this;
                  var renderingIntent = _ref11.renderingIntent, cacheKey = _ref11.cacheKey;
                  var readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", {
                    pageIndex: this._pageIndex,
                    intent: renderingIntent,
                    cacheKey,
                    annotationStorage: renderingIntent & _util.RenderingIntentFlag.ANNOTATIONS_STORAGE ? this._transport.annotationStorage.serializable : null
                  });
                  var reader = readableStream.getReader();
                  var intentState = this._intentStates.get(cacheKey);
                  intentState.streamReader = reader;
                  var pump = function pump2() {
                    reader.read().then(function(_ref12) {
                      var value = _ref12.value, done = _ref12.done;
                      if (done) {
                        intentState.streamReader = null;
                        return;
                      }
                      if (_this6._transport.destroyed) {
                        return;
                      }
                      _this6._renderPageChunk(value, intentState);
                      pump2();
                    }, function(reason) {
                      intentState.streamReader = null;
                      if (_this6._transport.destroyed) {
                        return;
                      }
                      if (intentState.operatorList) {
                        intentState.operatorList.lastChunk = true;
                        var _iterator10 = _createForOfIteratorHelper(intentState.renderTasks), _step10;
                        try {
                          for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                            var internalRenderTask = _step10.value;
                            internalRenderTask.operatorListChanged();
                          }
                        } catch (err) {
                          _iterator10.e(err);
                        } finally {
                          _iterator10.f();
                        }
                        _this6._tryCleanup();
                      }
                      if (intentState.displayReadyCapability) {
                        intentState.displayReadyCapability.reject(reason);
                      } else if (intentState.opListReadCapability) {
                        intentState.opListReadCapability.reject(reason);
                      } else {
                        throw reason;
                      }
                    });
                  };
                  pump();
                }
              }, {
                key: "_abortOperatorList",
                value: function _abortOperatorList(_ref13) {
                  var _this7 = this;
                  var intentState = _ref13.intentState, reason = _ref13.reason, _ref13$force = _ref13.force, force = _ref13$force === void 0 ? false : _ref13$force;
                  if (!intentState.streamReader) {
                    return;
                  }
                  if (!force) {
                    if (intentState.renderTasks.size > 0) {
                      return;
                    }
                    if (reason instanceof _display_utils.RenderingCancelledException) {
                      intentState.streamReaderCancelTimeout = setTimeout(function() {
                        _this7._abortOperatorList({
                          intentState,
                          reason,
                          force: true
                        });
                        intentState.streamReaderCancelTimeout = null;
                      }, RENDERING_CANCELLED_TIMEOUT);
                      return;
                    }
                  }
                  intentState.streamReader.cancel(new _util.AbortException(reason.message))["catch"](function() {
                  });
                  intentState.streamReader = null;
                  if (this._transport.destroyed) {
                    return;
                  }
                  var _iterator11 = _createForOfIteratorHelper(this._intentStates), _step11;
                  try {
                    for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                      var _step11$value = _slicedToArray(_step11.value, 2), curCacheKey = _step11$value[0], curIntentState = _step11$value[1];
                      if (curIntentState === intentState) {
                        this._intentStates["delete"](curCacheKey);
                        break;
                      }
                    }
                  } catch (err) {
                    _iterator11.e(err);
                  } finally {
                    _iterator11.f();
                  }
                  this.cleanup();
                }
              }, {
                key: "stats",
                get: function get2() {
                  return this._stats;
                }
              }]);
              return PDFPageProxy2;
            }();
            exports.PDFPageProxy = PDFPageProxy;
            var LoopbackPort = function() {
              function LoopbackPort2() {
                _classCallCheck(this, LoopbackPort2);
                this._listeners = [];
                this._deferred = Promise.resolve();
              }
              _createClass(LoopbackPort2, [{
                key: "postMessage",
                value: function postMessage(obj, transfers) {
                  var _this8 = this;
                  function cloneValue(object) {
                    if (globalThis.structuredClone) {
                      return globalThis.structuredClone(object, transfers);
                    }
                    function fallbackCloneValue(value) {
                      if (typeof value === "function" || _typeof(value) === "symbol" || value instanceof URL) {
                        throw new Error("LoopbackPort.postMessage - cannot clone: ".concat(value === null || value === void 0 ? void 0 : value.toString()));
                      }
                      if (_typeof(value) !== "object" || value === null) {
                        return value;
                      }
                      if (cloned.has(value)) {
                        return cloned.get(value);
                      }
                      var buffer, result;
                      if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {
                        if (transfers !== null && transfers !== void 0 && transfers.includes(buffer)) {
                          result = new value.constructor(buffer, value.byteOffset, value.byteLength);
                        } else {
                          result = new value.constructor(value);
                        }
                        cloned.set(value, result);
                        return result;
                      }
                      if (value instanceof Map) {
                        result = /* @__PURE__ */ new Map();
                        cloned.set(value, result);
                        var _iterator12 = _createForOfIteratorHelper(value), _step12;
                        try {
                          for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                            var _step12$value = _slicedToArray(_step12.value, 2), key = _step12$value[0], val = _step12$value[1];
                            result.set(key, fallbackCloneValue(val));
                          }
                        } catch (err) {
                          _iterator12.e(err);
                        } finally {
                          _iterator12.f();
                        }
                        return result;
                      }
                      if (value instanceof Set) {
                        result = /* @__PURE__ */ new Set();
                        cloned.set(value, result);
                        var _iterator13 = _createForOfIteratorHelper(value), _step13;
                        try {
                          for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                            var _val = _step13.value;
                            result.add(fallbackCloneValue(_val));
                          }
                        } catch (err) {
                          _iterator13.e(err);
                        } finally {
                          _iterator13.f();
                        }
                        return result;
                      }
                      result = Array.isArray(value) ? [] : /* @__PURE__ */ Object.create(null);
                      cloned.set(value, result);
                      for (var i in value) {
                        var _value$hasOwnProperty;
                        var desc = void 0, p = value;
                        while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {
                          p = Object.getPrototypeOf(p);
                        }
                        if (typeof desc.value === "undefined") {
                          continue;
                        }
                        if (typeof desc.value === "function" && !((_value$hasOwnProperty = value.hasOwnProperty) !== null && _value$hasOwnProperty !== void 0 && _value$hasOwnProperty.call(value, i))) {
                          continue;
                        }
                        result[i] = fallbackCloneValue(desc.value);
                      }
                      return result;
                    }
                    var cloned = /* @__PURE__ */ new WeakMap();
                    return fallbackCloneValue(object);
                  }
                  var event = {
                    data: cloneValue(obj)
                  };
                  this._deferred.then(function() {
                    var _iterator14 = _createForOfIteratorHelper(_this8._listeners), _step14;
                    try {
                      for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                        var listener = _step14.value;
                        listener.call(_this8, event);
                      }
                    } catch (err) {
                      _iterator14.e(err);
                    } finally {
                      _iterator14.f();
                    }
                  });
                }
              }, {
                key: "addEventListener",
                value: function addEventListener(name, listener) {
                  this._listeners.push(listener);
                }
              }, {
                key: "removeEventListener",
                value: function removeEventListener(name, listener) {
                  var i = this._listeners.indexOf(listener);
                  this._listeners.splice(i, 1);
                }
              }, {
                key: "terminate",
                value: function terminate() {
                  this._listeners.length = 0;
                }
              }]);
              return LoopbackPort2;
            }();
            exports.LoopbackPort = LoopbackPort;
            var PDFWorkerUtil = {
              isWorkerDisabled: false,
              fallbackWorkerSrc: null,
              fakeWorkerId: 0
            };
            {
              if (_is_node.isNodeJS && typeof __require === "function") {
                PDFWorkerUtil.isWorkerDisabled = true;
                PDFWorkerUtil.fallbackWorkerSrc = "./pdf.worker.js";
              } else if ((typeof document === "undefined" ? "undefined" : _typeof(document)) === "object") {
                var _document, _document$currentScri;
                var pdfjsFilePath = (_document = document) === null || _document === void 0 ? void 0 : (_document$currentScri = _document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;
                if (pdfjsFilePath) {
                  PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
                }
              }
              PDFWorkerUtil.createCDNWrapper = function(url) {
                var wrapper = 'importScripts("'.concat(url, '");');
                return URL.createObjectURL(new Blob([wrapper]));
              };
            }
            var PDFWorker = function() {
              function PDFWorker() {
                var _ref14 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref14$name = _ref14.name, name = _ref14$name === void 0 ? null : _ref14$name, _ref14$port = _ref14.port, port = _ref14$port === void 0 ? null : _ref14$port, _ref14$verbosity = _ref14.verbosity, verbosity = _ref14$verbosity === void 0 ? (0, _util.getVerbosityLevel)() : _ref14$verbosity;
                _classCallCheck(this, PDFWorker);
                if (port && PDFWorker._workerPorts.has(port)) {
                  throw new Error("Cannot use more than one PDFWorker per port.");
                }
                this.name = name;
                this.destroyed = false;
                this.verbosity = verbosity;
                this._readyCapability = (0, _util.createPromiseCapability)();
                this._port = null;
                this._webWorker = null;
                this._messageHandler = null;
                if (port) {
                  PDFWorker._workerPorts.set(port, this);
                  this._initializeFromPort(port);
                  return;
                }
                this._initialize();
              }
              _createClass(PDFWorker, [{
                key: "promise",
                get: function get2() {
                  return this._readyCapability.promise;
                }
              }, {
                key: "port",
                get: function get2() {
                  return this._port;
                }
              }, {
                key: "messageHandler",
                get: function get2() {
                  return this._messageHandler;
                }
              }, {
                key: "_initializeFromPort",
                value: function _initializeFromPort(port) {
                  this._port = port;
                  this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);
                  this._messageHandler.on("ready", function() {
                  });
                  this._readyCapability.resolve();
                }
              }, {
                key: "_initialize",
                value: function _initialize() {
                  var _this9 = this;
                  if (typeof Worker !== "undefined" && !PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {
                    var workerSrc = PDFWorker.workerSrc;
                    try {
                      if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {
                        workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);
                      }
                      var worker2 = new Worker(workerSrc);
                      var messageHandler = new _message_handler.MessageHandler("main", "worker", worker2);
                      var terminateEarly = function terminateEarly2() {
                        worker2.removeEventListener("error", onWorkerError);
                        messageHandler.destroy();
                        worker2.terminate();
                        if (_this9.destroyed) {
                          _this9._readyCapability.reject(new Error("Worker was destroyed"));
                        } else {
                          _this9._setupFakeWorker();
                        }
                      };
                      var onWorkerError = function onWorkerError2() {
                        if (!_this9._webWorker) {
                          terminateEarly();
                        }
                      };
                      worker2.addEventListener("error", onWorkerError);
                      messageHandler.on("test", function(data) {
                        worker2.removeEventListener("error", onWorkerError);
                        if (_this9.destroyed) {
                          terminateEarly();
                          return;
                        }
                        if (data) {
                          _this9._messageHandler = messageHandler;
                          _this9._port = worker2;
                          _this9._webWorker = worker2;
                          _this9._readyCapability.resolve();
                          messageHandler.send("configure", {
                            verbosity: _this9.verbosity
                          });
                        } else {
                          _this9._setupFakeWorker();
                          messageHandler.destroy();
                          worker2.terminate();
                        }
                      });
                      messageHandler.on("ready", function(data) {
                        worker2.removeEventListener("error", onWorkerError);
                        if (_this9.destroyed) {
                          terminateEarly();
                          return;
                        }
                        try {
                          sendTest();
                        } catch (e) {
                          _this9._setupFakeWorker();
                        }
                      });
                      var sendTest = function sendTest2() {
                        var testObj = new Uint8Array([255]);
                        try {
                          messageHandler.send("test", testObj, [testObj.buffer]);
                        } catch (ex) {
                          (0, _util.warn)("Cannot use postMessage transfers.");
                          testObj[0] = 0;
                          messageHandler.send("test", testObj);
                        }
                      };
                      sendTest();
                      return;
                    } catch (e) {
                      (0, _util.info)("The worker has been disabled.");
                    }
                  }
                  this._setupFakeWorker();
                }
              }, {
                key: "_setupFakeWorker",
                value: function _setupFakeWorker() {
                  var _this10 = this;
                  if (!PDFWorkerUtil.isWorkerDisabled) {
                    (0, _util.warn)("Setting up fake worker.");
                    PDFWorkerUtil.isWorkerDisabled = true;
                  }
                  PDFWorker._setupFakeWorkerGlobal.then(function(WorkerMessageHandler) {
                    if (_this10.destroyed) {
                      _this10._readyCapability.reject(new Error("Worker was destroyed"));
                      return;
                    }
                    var port = new LoopbackPort();
                    _this10._port = port;
                    var id = "fake".concat(PDFWorkerUtil.fakeWorkerId++);
                    var workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
                    WorkerMessageHandler.setup(workerHandler, port);
                    var messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
                    _this10._messageHandler = messageHandler;
                    _this10._readyCapability.resolve();
                    messageHandler.send("configure", {
                      verbosity: _this10.verbosity
                    });
                  })["catch"](function(reason) {
                    _this10._readyCapability.reject(new Error('Setting up fake worker failed: "'.concat(reason.message, '".')));
                  });
                }
              }, {
                key: "destroy",
                value: function destroy() {
                  this.destroyed = true;
                  if (this._webWorker) {
                    this._webWorker.terminate();
                    this._webWorker = null;
                  }
                  PDFWorker._workerPorts["delete"](this._port);
                  this._port = null;
                  if (this._messageHandler) {
                    this._messageHandler.destroy();
                    this._messageHandler = null;
                  }
                }
              }], [{
                key: "_workerPorts",
                get: function get2() {
                  return (0, _util.shadow)(this, "_workerPorts", /* @__PURE__ */ new WeakMap());
                }
              }, {
                key: "fromPort",
                value: function fromPort(params) {
                  if (!(params !== null && params !== void 0 && params.port)) {
                    throw new Error("PDFWorker.fromPort - invalid method signature.");
                  }
                  if (this._workerPorts.has(params.port)) {
                    return this._workerPorts.get(params.port);
                  }
                  return new PDFWorker(params);
                }
              }, {
                key: "workerSrc",
                get: function get2() {
                  if (_worker_options.GlobalWorkerOptions.workerSrc) {
                    return _worker_options.GlobalWorkerOptions.workerSrc;
                  }
                  if (PDFWorkerUtil.fallbackWorkerSrc !== null) {
                    if (!_is_node.isNodeJS) {
                      (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.');
                    }
                    return PDFWorkerUtil.fallbackWorkerSrc;
                  }
                  throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
                }
              }, {
                key: "_mainThreadWorkerMessageHandler",
                get: function get2() {
                  try {
                    var _globalThis$pdfjsWork;
                    return ((_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler) || null;
                  } catch (ex) {
                    return null;
                  }
                }
              }, {
                key: "_setupFakeWorkerGlobal",
                get: function get() {
                  var _this11 = this;
                  var loader = function() {
                    var _ref15 = _asyncToGenerator(_regenerator["default"].mark(function _callee4() {
                      var mainWorkerMessageHandler, worker;
                      return _regenerator["default"].wrap(function _callee4$(_context4) {
                        while (1) {
                          switch (_context4.prev = _context4.next) {
                            case 0:
                              mainWorkerMessageHandler = _this11._mainThreadWorkerMessageHandler;
                              if (!mainWorkerMessageHandler) {
                                _context4.next = 3;
                                break;
                              }
                              return _context4.abrupt("return", mainWorkerMessageHandler);
                            case 3:
                              if (!(_is_node.isNodeJS && typeof __require === "function")) {
                                _context4.next = 6;
                                break;
                              }
                              worker = eval("require")(_this11.workerSrc);
                              return _context4.abrupt("return", worker.WorkerMessageHandler);
                            case 6:
                              _context4.next = 8;
                              return (0, _display_utils.loadScript)(_this11.workerSrc);
                            case 8:
                              return _context4.abrupt("return", window.pdfjsWorker.WorkerMessageHandler);
                            case 9:
                            case "end":
                              return _context4.stop();
                          }
                        }
                      }, _callee4);
                    }));
                    return function loader2() {
                      return _ref15.apply(this, arguments);
                    };
                  }();
                  return (0, _util.shadow)(this, "_setupFakeWorkerGlobal", loader());
                }
              }]);
              return PDFWorker;
            }();
            exports.PDFWorker = PDFWorker;
            {
              PDFWorker.getWorkerSrc = function() {
                (0, _display_utils.deprecated)("`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.");
                return this.workerSrc;
              };
            }
            var _docStats = /* @__PURE__ */ new WeakMap();
            var _pageCache = /* @__PURE__ */ new WeakMap();
            var _pagePromises = /* @__PURE__ */ new WeakMap();
            var _metadataPromise = /* @__PURE__ */ new WeakMap();
            var WorkerTransport = function() {
              function WorkerTransport2(messageHandler, loadingTask, networkStream, params) {
                _classCallCheck(this, WorkerTransport2);
                _classPrivateFieldInitSpec(this, _docStats, {
                  writable: true,
                  value: null
                });
                _classPrivateFieldInitSpec(this, _pageCache, {
                  writable: true,
                  value: /* @__PURE__ */ new Map()
                });
                _classPrivateFieldInitSpec(this, _pagePromises, {
                  writable: true,
                  value: /* @__PURE__ */ new Map()
                });
                _classPrivateFieldInitSpec(this, _metadataPromise, {
                  writable: true,
                  value: null
                });
                this.messageHandler = messageHandler;
                this.loadingTask = loadingTask;
                this.commonObjs = new PDFObjects();
                this.fontLoader = new _font_loader.FontLoader({
                  docId: loadingTask.docId,
                  onUnsupportedFeature: this._onUnsupportedFeature.bind(this),
                  ownerDocument: params.ownerDocument,
                  styleElement: params.styleElement
                });
                this._params = params;
                if (!params.useWorkerFetch) {
                  this.CMapReaderFactory = new params.CMapReaderFactory({
                    baseUrl: params.cMapUrl,
                    isCompressed: params.cMapPacked
                  });
                  this.StandardFontDataFactory = new params.StandardFontDataFactory({
                    baseUrl: params.standardFontDataUrl
                  });
                }
                this.destroyed = false;
                this.destroyCapability = null;
                this._passwordCapability = null;
                this._networkStream = networkStream;
                this._fullReader = null;
                this._lastProgress = null;
                this.downloadInfoCapability = (0, _util.createPromiseCapability)();
                this.setupMessageHandler();
              }
              _createClass(WorkerTransport2, [{
                key: "annotationStorage",
                get: function get2() {
                  return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
                }
              }, {
                key: "stats",
                get: function get2() {
                  return _classPrivateFieldGet(this, _docStats);
                }
              }, {
                key: "getRenderingIntent",
                value: function getRenderingIntent(intent) {
                  var annotationMode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _util.AnnotationMode.ENABLE;
                  var isOpList = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                  var renderingIntent = _util.RenderingIntentFlag.DISPLAY;
                  var lastModified = "";
                  switch (intent) {
                    case "any":
                      renderingIntent = _util.RenderingIntentFlag.ANY;
                      break;
                    case "display":
                      break;
                    case "print":
                      renderingIntent = _util.RenderingIntentFlag.PRINT;
                      break;
                    default:
                      (0, _util.warn)("getRenderingIntent - invalid intent: ".concat(intent));
                  }
                  switch (annotationMode) {
                    case _util.AnnotationMode.DISABLE:
                      renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                      break;
                    case _util.AnnotationMode.ENABLE:
                      break;
                    case _util.AnnotationMode.ENABLE_FORMS:
                      renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                      break;
                    case _util.AnnotationMode.ENABLE_STORAGE:
                      renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;
                      lastModified = this.annotationStorage.lastModified;
                      break;
                    default:
                      (0, _util.warn)("getRenderingIntent - invalid annotationMode: ".concat(annotationMode));
                  }
                  if (isOpList) {
                    renderingIntent += _util.RenderingIntentFlag.OPLIST;
                  }
                  return {
                    renderingIntent,
                    cacheKey: "".concat(renderingIntent, "_").concat(lastModified)
                  };
                }
              }, {
                key: "destroy",
                value: function destroy() {
                  var _this12 = this;
                  if (this.destroyCapability) {
                    return this.destroyCapability.promise;
                  }
                  this.destroyed = true;
                  this.destroyCapability = (0, _util.createPromiseCapability)();
                  if (this._passwordCapability) {
                    this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
                  }
                  var waitOn = [];
                  var _iterator15 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _pageCache).values()), _step15;
                  try {
                    for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
                      var page = _step15.value;
                      waitOn.push(page._destroy());
                    }
                  } catch (err) {
                    _iterator15.e(err);
                  } finally {
                    _iterator15.f();
                  }
                  _classPrivateFieldGet(this, _pageCache).clear();
                  _classPrivateFieldGet(this, _pagePromises).clear();
                  if (this.hasOwnProperty("annotationStorage")) {
                    this.annotationStorage.resetModified();
                  }
                  var terminated = this.messageHandler.sendWithPromise("Terminate", null);
                  waitOn.push(terminated);
                  Promise.all(waitOn).then(function() {
                    _this12.commonObjs.clear();
                    _this12.fontLoader.clear();
                    _classPrivateFieldSet(_this12, _metadataPromise, null);
                    _this12._getFieldObjectsPromise = null;
                    _this12._hasJSActionsPromise = null;
                    if (_this12._networkStream) {
                      _this12._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated."));
                    }
                    if (_this12.messageHandler) {
                      _this12.messageHandler.destroy();
                      _this12.messageHandler = null;
                    }
                    _this12.destroyCapability.resolve();
                  }, this.destroyCapability.reject);
                  return this.destroyCapability.promise;
                }
              }, {
                key: "setupMessageHandler",
                value: function setupMessageHandler() {
                  var _this13 = this;
                  var messageHandler = this.messageHandler, loadingTask = this.loadingTask;
                  messageHandler.on("GetReader", function(data, sink) {
                    (0, _util.assert)(_this13._networkStream, "GetReader - no `IPDFStream` instance available.");
                    _this13._fullReader = _this13._networkStream.getFullReader();
                    _this13._fullReader.onProgress = function(evt) {
                      _this13._lastProgress = {
                        loaded: evt.loaded,
                        total: evt.total
                      };
                    };
                    sink.onPull = function() {
                      _this13._fullReader.read().then(function(_ref16) {
                        var value = _ref16.value, done = _ref16.done;
                        if (done) {
                          sink.close();
                          return;
                        }
                        (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetReader - expected an ArrayBuffer.");
                        sink.enqueue(new Uint8Array(value), 1, [value]);
                      })["catch"](function(reason) {
                        sink.error(reason);
                      });
                    };
                    sink.onCancel = function(reason) {
                      _this13._fullReader.cancel(reason);
                      sink.ready["catch"](function(readyReason) {
                        if (_this13.destroyed) {
                          return;
                        }
                        throw readyReason;
                      });
                    };
                  });
                  messageHandler.on("ReaderHeadersReady", function(data) {
                    var headersCapability = (0, _util.createPromiseCapability)();
                    var fullReader = _this13._fullReader;
                    fullReader.headersReady.then(function() {
                      if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                        if (_this13._lastProgress) {
                          var _loadingTask$onProgre;
                          (_loadingTask$onProgre = loadingTask.onProgress) === null || _loadingTask$onProgre === void 0 ? void 0 : _loadingTask$onProgre.call(loadingTask, _this13._lastProgress);
                        }
                        fullReader.onProgress = function(evt) {
                          var _loadingTask$onProgre2;
                          (_loadingTask$onProgre2 = loadingTask.onProgress) === null || _loadingTask$onProgre2 === void 0 ? void 0 : _loadingTask$onProgre2.call(loadingTask, {
                            loaded: evt.loaded,
                            total: evt.total
                          });
                        };
                      }
                      headersCapability.resolve({
                        isStreamingSupported: fullReader.isStreamingSupported,
                        isRangeSupported: fullReader.isRangeSupported,
                        contentLength: fullReader.contentLength
                      });
                    }, headersCapability.reject);
                    return headersCapability.promise;
                  });
                  messageHandler.on("GetRangeReader", function(data, sink) {
                    (0, _util.assert)(_this13._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
                    var rangeReader = _this13._networkStream.getRangeReader(data.begin, data.end);
                    if (!rangeReader) {
                      sink.close();
                      return;
                    }
                    sink.onPull = function() {
                      rangeReader.read().then(function(_ref17) {
                        var value = _ref17.value, done = _ref17.done;
                        if (done) {
                          sink.close();
                          return;
                        }
                        (0, _util.assert)((0, _util.isArrayBuffer)(value), "GetRangeReader - expected an ArrayBuffer.");
                        sink.enqueue(new Uint8Array(value), 1, [value]);
                      })["catch"](function(reason) {
                        sink.error(reason);
                      });
                    };
                    sink.onCancel = function(reason) {
                      rangeReader.cancel(reason);
                      sink.ready["catch"](function(readyReason) {
                        if (_this13.destroyed) {
                          return;
                        }
                        throw readyReason;
                      });
                    };
                  });
                  messageHandler.on("GetDoc", function(_ref18) {
                    var pdfInfo = _ref18.pdfInfo;
                    _this13._numPages = pdfInfo.numPages;
                    _this13._htmlForXfa = pdfInfo.htmlForXfa;
                    delete pdfInfo.htmlForXfa;
                    loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, _this13));
                  });
                  messageHandler.on("DocException", function(ex) {
                    var reason;
                    switch (ex.name) {
                      case "PasswordException":
                        reason = new _util.PasswordException(ex.message, ex.code);
                        break;
                      case "InvalidPDFException":
                        reason = new _util.InvalidPDFException(ex.message);
                        break;
                      case "MissingPDFException":
                        reason = new _util.MissingPDFException(ex.message);
                        break;
                      case "UnexpectedResponseException":
                        reason = new _util.UnexpectedResponseException(ex.message, ex.status);
                        break;
                      case "UnknownErrorException":
                        reason = new _util.UnknownErrorException(ex.message, ex.details);
                        break;
                      default:
                        (0, _util.unreachable)("DocException - expected a valid Error.");
                    }
                    loadingTask._capability.reject(reason);
                  });
                  messageHandler.on("PasswordRequest", function(exception) {
                    _this13._passwordCapability = (0, _util.createPromiseCapability)();
                    if (loadingTask.onPassword) {
                      var updatePassword = function updatePassword2(password) {
                        _this13._passwordCapability.resolve({
                          password
                        });
                      };
                      try {
                        loadingTask.onPassword(updatePassword, exception.code);
                      } catch (ex) {
                        _this13._passwordCapability.reject(ex);
                      }
                    } else {
                      _this13._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
                    }
                    return _this13._passwordCapability.promise;
                  });
                  messageHandler.on("DataLoaded", function(data) {
                    var _loadingTask$onProgre3;
                    (_loadingTask$onProgre3 = loadingTask.onProgress) === null || _loadingTask$onProgre3 === void 0 ? void 0 : _loadingTask$onProgre3.call(loadingTask, {
                      loaded: data.length,
                      total: data.length
                    });
                    _this13.downloadInfoCapability.resolve(data);
                  });
                  messageHandler.on("StartRenderPage", function(data) {
                    if (_this13.destroyed) {
                      return;
                    }
                    var page = _classPrivateFieldGet(_this13, _pageCache).get(data.pageIndex);
                    page._startRenderPage(data.transparency, data.cacheKey);
                  });
                  messageHandler.on("commonobj", function(_ref19) {
                    var _globalThis$FontInspe;
                    var _ref20 = _slicedToArray(_ref19, 3), id = _ref20[0], type = _ref20[1], exportedData = _ref20[2];
                    if (_this13.destroyed) {
                      return;
                    }
                    if (_this13.commonObjs.has(id)) {
                      return;
                    }
                    switch (type) {
                      case "Font":
                        var params = _this13._params;
                        if ("error" in exportedData) {
                          var exportedError = exportedData.error;
                          (0, _util.warn)("Error during font loading: ".concat(exportedError));
                          _this13.commonObjs.resolve(id, exportedError);
                          break;
                        }
                        var fontRegistry = null;
                        if (params.pdfBug && (_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled) {
                          fontRegistry = {
                            registerFont: function registerFont(font2, url) {
                              globalThis.FontInspector.fontAdded(font2, url);
                            }
                          };
                        }
                        var font = new _font_loader.FontFaceObject(exportedData, {
                          isEvalSupported: params.isEvalSupported,
                          disableFontFace: params.disableFontFace,
                          ignoreErrors: params.ignoreErrors,
                          onUnsupportedFeature: _this13._onUnsupportedFeature.bind(_this13),
                          fontRegistry
                        });
                        _this13.fontLoader.bind(font)["catch"](function(reason) {
                          return messageHandler.sendWithPromise("FontFallback", {
                            id
                          });
                        })["finally"](function() {
                          if (!params.fontExtraProperties && font.data) {
                            font.data = null;
                          }
                          _this13.commonObjs.resolve(id, font);
                        });
                        break;
                      case "FontPath":
                      case "Image":
                        _this13.commonObjs.resolve(id, exportedData);
                        break;
                      default:
                        throw new Error("Got unknown common object type ".concat(type));
                    }
                  });
                  messageHandler.on("obj", function(_ref21) {
                    var _imageData$data;
                    var _ref22 = _slicedToArray(_ref21, 4), id = _ref22[0], pageIndex = _ref22[1], type = _ref22[2], imageData = _ref22[3];
                    if (_this13.destroyed) {
                      return;
                    }
                    var pageProxy = _classPrivateFieldGet(_this13, _pageCache).get(pageIndex);
                    if (pageProxy.objs.has(id)) {
                      return;
                    }
                    switch (type) {
                      case "Image":
                        pageProxy.objs.resolve(id, imageData);
                        var MAX_IMAGE_SIZE_TO_STORE = 8e6;
                        if ((imageData === null || imageData === void 0 ? void 0 : (_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.length) > MAX_IMAGE_SIZE_TO_STORE) {
                          pageProxy.cleanupAfterRender = true;
                        }
                        break;
                      case "Pattern":
                        pageProxy.objs.resolve(id, imageData);
                        break;
                      default:
                        throw new Error("Got unknown object type ".concat(type));
                    }
                  });
                  messageHandler.on("DocProgress", function(data) {
                    var _loadingTask$onProgre4;
                    if (_this13.destroyed) {
                      return;
                    }
                    (_loadingTask$onProgre4 = loadingTask.onProgress) === null || _loadingTask$onProgre4 === void 0 ? void 0 : _loadingTask$onProgre4.call(loadingTask, {
                      loaded: data.loaded,
                      total: data.total
                    });
                  });
                  messageHandler.on("DocStats", function(data) {
                    if (_this13.destroyed) {
                      return;
                    }
                    _classPrivateFieldSet(_this13, _docStats, Object.freeze({
                      streamTypes: Object.freeze(data.streamTypes),
                      fontTypes: Object.freeze(data.fontTypes)
                    }));
                  });
                  messageHandler.on("UnsupportedFeature", this._onUnsupportedFeature.bind(this));
                  messageHandler.on("FetchBuiltInCMap", function(data) {
                    if (_this13.destroyed) {
                      return Promise.reject(new Error("Worker was destroyed."));
                    }
                    if (!_this13.CMapReaderFactory) {
                      return Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."));
                    }
                    return _this13.CMapReaderFactory.fetch(data);
                  });
                  messageHandler.on("FetchStandardFontData", function(data) {
                    if (_this13.destroyed) {
                      return Promise.reject(new Error("Worker was destroyed."));
                    }
                    if (!_this13.StandardFontDataFactory) {
                      return Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."));
                    }
                    return _this13.StandardFontDataFactory.fetch(data);
                  });
                }
              }, {
                key: "_onUnsupportedFeature",
                value: function _onUnsupportedFeature(_ref23) {
                  var _this$loadingTask$onU, _this$loadingTask;
                  var featureId = _ref23.featureId;
                  if (this.destroyed) {
                    return;
                  }
                  (_this$loadingTask$onU = (_this$loadingTask = this.loadingTask).onUnsupportedFeature) === null || _this$loadingTask$onU === void 0 ? void 0 : _this$loadingTask$onU.call(_this$loadingTask, featureId);
                }
              }, {
                key: "getData",
                value: function getData() {
                  return this.messageHandler.sendWithPromise("GetData", null);
                }
              }, {
                key: "getPage",
                value: function getPage(pageNumber) {
                  var _this14 = this;
                  if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
                    return Promise.reject(new Error("Invalid page request"));
                  }
                  var pageIndex = pageNumber - 1, cachedPromise = _classPrivateFieldGet(this, _pagePromises).get(pageIndex);
                  if (cachedPromise) {
                    return cachedPromise;
                  }
                  var promise = this.messageHandler.sendWithPromise("GetPage", {
                    pageIndex
                  }).then(function(pageInfo) {
                    if (_this14.destroyed) {
                      throw new Error("Transport destroyed");
                    }
                    var page = new PDFPageProxy(pageIndex, pageInfo, _this14, _this14._params.ownerDocument, _this14._params.pdfBug);
                    _classPrivateFieldGet(_this14, _pageCache).set(pageIndex, page);
                    return page;
                  });
                  _classPrivateFieldGet(this, _pagePromises).set(pageIndex, promise);
                  return promise;
                }
              }, {
                key: "getPageIndex",
                value: function getPageIndex(ref) {
                  return this.messageHandler.sendWithPromise("GetPageIndex", {
                    ref
                  });
                }
              }, {
                key: "getAnnotations",
                value: function getAnnotations(pageIndex, intent) {
                  return this.messageHandler.sendWithPromise("GetAnnotations", {
                    pageIndex,
                    intent
                  });
                }
              }, {
                key: "saveDocument",
                value: function saveDocument() {
                  var _this$_fullReader$fil, _this$_fullReader, _this15 = this;
                  return this.messageHandler.sendWithPromise("SaveDocument", {
                    isPureXfa: !!this._htmlForXfa,
                    numPages: this._numPages,
                    annotationStorage: this.annotationStorage.serializable,
                    filename: (_this$_fullReader$fil = (_this$_fullReader = this._fullReader) === null || _this$_fullReader === void 0 ? void 0 : _this$_fullReader.filename) !== null && _this$_fullReader$fil !== void 0 ? _this$_fullReader$fil : null
                  })["finally"](function() {
                    _this15.annotationStorage.resetModified();
                  });
                }
              }, {
                key: "getFieldObjects",
                value: function getFieldObjects() {
                  return this._getFieldObjectsPromise || (this._getFieldObjectsPromise = this.messageHandler.sendWithPromise("GetFieldObjects", null));
                }
              }, {
                key: "hasJSActions",
                value: function hasJSActions() {
                  return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise("HasJSActions", null));
                }
              }, {
                key: "getCalculationOrderIds",
                value: function getCalculationOrderIds() {
                  return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
                }
              }, {
                key: "getDestinations",
                value: function getDestinations() {
                  return this.messageHandler.sendWithPromise("GetDestinations", null);
                }
              }, {
                key: "getDestination",
                value: function getDestination(id) {
                  if (typeof id !== "string") {
                    return Promise.reject(new Error("Invalid destination request."));
                  }
                  return this.messageHandler.sendWithPromise("GetDestination", {
                    id
                  });
                }
              }, {
                key: "getPageLabels",
                value: function getPageLabels() {
                  return this.messageHandler.sendWithPromise("GetPageLabels", null);
                }
              }, {
                key: "getPageLayout",
                value: function getPageLayout() {
                  return this.messageHandler.sendWithPromise("GetPageLayout", null);
                }
              }, {
                key: "getPageMode",
                value: function getPageMode() {
                  return this.messageHandler.sendWithPromise("GetPageMode", null);
                }
              }, {
                key: "getViewerPreferences",
                value: function getViewerPreferences() {
                  return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
                }
              }, {
                key: "getOpenAction",
                value: function getOpenAction() {
                  return this.messageHandler.sendWithPromise("GetOpenAction", null);
                }
              }, {
                key: "getAttachments",
                value: function getAttachments() {
                  return this.messageHandler.sendWithPromise("GetAttachments", null);
                }
              }, {
                key: "getJavaScript",
                value: function getJavaScript() {
                  return this.messageHandler.sendWithPromise("GetJavaScript", null);
                }
              }, {
                key: "getDocJSActions",
                value: function getDocJSActions() {
                  return this.messageHandler.sendWithPromise("GetDocJSActions", null);
                }
              }, {
                key: "getPageJSActions",
                value: function getPageJSActions(pageIndex) {
                  return this.messageHandler.sendWithPromise("GetPageJSActions", {
                    pageIndex
                  });
                }
              }, {
                key: "getStructTree",
                value: function getStructTree(pageIndex) {
                  return this.messageHandler.sendWithPromise("GetStructTree", {
                    pageIndex
                  });
                }
              }, {
                key: "getOutline",
                value: function getOutline() {
                  return this.messageHandler.sendWithPromise("GetOutline", null);
                }
              }, {
                key: "getOptionalContentConfig",
                value: function getOptionalContentConfig() {
                  return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(function(results) {
                    return new _optional_content_config.OptionalContentConfig(results);
                  });
                }
              }, {
                key: "getPermissions",
                value: function getPermissions() {
                  return this.messageHandler.sendWithPromise("GetPermissions", null);
                }
              }, {
                key: "getMetadata",
                value: function getMetadata() {
                  var _this16 = this;
                  return _classPrivateFieldGet(this, _metadataPromise) || _classPrivateFieldSet(this, _metadataPromise, this.messageHandler.sendWithPromise("GetMetadata", null).then(function(results) {
                    var _this16$_fullReader$f, _this16$_fullReader, _this16$_fullReader$c, _this16$_fullReader2;
                    return {
                      info: results[0],
                      metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                      contentDispositionFilename: (_this16$_fullReader$f = (_this16$_fullReader = _this16._fullReader) === null || _this16$_fullReader === void 0 ? void 0 : _this16$_fullReader.filename) !== null && _this16$_fullReader$f !== void 0 ? _this16$_fullReader$f : null,
                      contentLength: (_this16$_fullReader$c = (_this16$_fullReader2 = _this16._fullReader) === null || _this16$_fullReader2 === void 0 ? void 0 : _this16$_fullReader2.contentLength) !== null && _this16$_fullReader$c !== void 0 ? _this16$_fullReader$c : null
                    };
                  }));
                }
              }, {
                key: "getMarkInfo",
                value: function getMarkInfo() {
                  return this.messageHandler.sendWithPromise("GetMarkInfo", null);
                }
              }, {
                key: "startCleanup",
                value: function() {
                  var _startCleanup = _asyncToGenerator(_regenerator["default"].mark(function _callee5() {
                    var keepLoadedFonts, _iterator16, _step16, page, cleanupSuccessful, _args5 = arguments;
                    return _regenerator["default"].wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            keepLoadedFonts = _args5.length > 0 && _args5[0] !== void 0 ? _args5[0] : false;
                            _context5.next = 3;
                            return this.messageHandler.sendWithPromise("Cleanup", null);
                          case 3:
                            if (!this.destroyed) {
                              _context5.next = 5;
                              break;
                            }
                            return _context5.abrupt("return");
                          case 5:
                            _iterator16 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _pageCache).values());
                            _context5.prev = 6;
                            _iterator16.s();
                          case 8:
                            if ((_step16 = _iterator16.n()).done) {
                              _context5.next = 15;
                              break;
                            }
                            page = _step16.value;
                            cleanupSuccessful = page.cleanup();
                            if (cleanupSuccessful) {
                              _context5.next = 13;
                              break;
                            }
                            throw new Error("startCleanup: Page ".concat(page.pageNumber, " is currently rendering."));
                          case 13:
                            _context5.next = 8;
                            break;
                          case 15:
                            _context5.next = 20;
                            break;
                          case 17:
                            _context5.prev = 17;
                            _context5.t0 = _context5["catch"](6);
                            _iterator16.e(_context5.t0);
                          case 20:
                            _context5.prev = 20;
                            _iterator16.f();
                            return _context5.finish(20);
                          case 23:
                            this.commonObjs.clear();
                            if (!keepLoadedFonts) {
                              this.fontLoader.clear();
                            }
                            _classPrivateFieldSet(this, _metadataPromise, null);
                            this._getFieldObjectsPromise = null;
                            this._hasJSActionsPromise = null;
                          case 28:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5, this, [[6, 17, 20, 23]]);
                  }));
                  function startCleanup() {
                    return _startCleanup.apply(this, arguments);
                  }
                  return startCleanup;
                }()
              }, {
                key: "loadingParams",
                get: function get2() {
                  var params = this._params;
                  return (0, _util.shadow)(this, "loadingParams", {
                    disableAutoFetch: params.disableAutoFetch,
                    enableXfa: params.enableXfa
                  });
                }
              }]);
              return WorkerTransport2;
            }();
            var PDFObjects = function() {
              function PDFObjects2() {
                _classCallCheck(this, PDFObjects2);
                this._objs = /* @__PURE__ */ Object.create(null);
              }
              _createClass(PDFObjects2, [{
                key: "_ensureObj",
                value: function _ensureObj(objId) {
                  if (this._objs[objId]) {
                    return this._objs[objId];
                  }
                  return this._objs[objId] = {
                    capability: (0, _util.createPromiseCapability)(),
                    data: null,
                    resolved: false
                  };
                }
              }, {
                key: "get",
                value: function get2(objId) {
                  var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  if (callback) {
                    this._ensureObj(objId).capability.promise.then(callback);
                    return null;
                  }
                  var obj = this._objs[objId];
                  if (!obj || !obj.resolved) {
                    throw new Error("Requesting object that isn't resolved yet ".concat(objId, "."));
                  }
                  return obj.data;
                }
              }, {
                key: "has",
                value: function has(objId) {
                  var obj = this._objs[objId];
                  return (obj === null || obj === void 0 ? void 0 : obj.resolved) || false;
                }
              }, {
                key: "resolve",
                value: function resolve(objId, data) {
                  var obj = this._ensureObj(objId);
                  obj.resolved = true;
                  obj.data = data;
                  obj.capability.resolve(data);
                }
              }, {
                key: "clear",
                value: function clear() {
                  this._objs = /* @__PURE__ */ Object.create(null);
                }
              }]);
              return PDFObjects2;
            }();
            var RenderTask = function() {
              function RenderTask2(internalRenderTask) {
                _classCallCheck(this, RenderTask2);
                this._internalRenderTask = internalRenderTask;
                this.onContinue = null;
              }
              _createClass(RenderTask2, [{
                key: "promise",
                get: function get2() {
                  return this._internalRenderTask.capability.promise;
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  this._internalRenderTask.cancel();
                }
              }]);
              return RenderTask2;
            }();
            exports.RenderTask = RenderTask;
            var InternalRenderTask = function() {
              function InternalRenderTask2(_ref24) {
                var callback = _ref24.callback, params = _ref24.params, objs = _ref24.objs, commonObjs = _ref24.commonObjs, annotationCanvasMap = _ref24.annotationCanvasMap, operatorList = _ref24.operatorList, pageIndex = _ref24.pageIndex, canvasFactory = _ref24.canvasFactory, _ref24$useRequestAnim = _ref24.useRequestAnimationFrame, useRequestAnimationFrame = _ref24$useRequestAnim === void 0 ? false : _ref24$useRequestAnim, _ref24$pdfBug = _ref24.pdfBug, pdfBug = _ref24$pdfBug === void 0 ? false : _ref24$pdfBug;
                _classCallCheck(this, InternalRenderTask2);
                this.callback = callback;
                this.params = params;
                this.objs = objs;
                this.commonObjs = commonObjs;
                this.annotationCanvasMap = annotationCanvasMap;
                this.operatorListIdx = null;
                this.operatorList = operatorList;
                this._pageIndex = pageIndex;
                this.canvasFactory = canvasFactory;
                this._pdfBug = pdfBug;
                this.running = false;
                this.graphicsReadyCallback = null;
                this.graphicsReady = false;
                this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
                this.cancelled = false;
                this.capability = (0, _util.createPromiseCapability)();
                this.task = new RenderTask(this);
                this._cancelBound = this.cancel.bind(this);
                this._continueBound = this._continue.bind(this);
                this._scheduleNextBound = this._scheduleNext.bind(this);
                this._nextBound = this._next.bind(this);
                this._canvas = params.canvasContext.canvas;
              }
              _createClass(InternalRenderTask2, [{
                key: "completed",
                get: function get2() {
                  return this.capability.promise["catch"](function() {
                  });
                }
              }, {
                key: "initializeGraphics",
                value: function initializeGraphics(_ref25) {
                  var _globalThis$StepperMa;
                  var _ref25$transparency = _ref25.transparency, transparency = _ref25$transparency === void 0 ? false : _ref25$transparency, optionalContentConfig = _ref25.optionalContentConfig;
                  if (this.cancelled) {
                    return;
                  }
                  if (this._canvas) {
                    if (InternalRenderTask2.canvasInUse.has(this._canvas)) {
                      throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
                    }
                    InternalRenderTask2.canvasInUse.add(this._canvas);
                  }
                  if (this._pdfBug && (_globalThis$StepperMa = globalThis.StepperManager) !== null && _globalThis$StepperMa !== void 0 && _globalThis$StepperMa.enabled) {
                    this.stepper = globalThis.StepperManager.create(this._pageIndex);
                    this.stepper.init(this.operatorList);
                    this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
                  }
                  var _this$params = this.params, canvasContext = _this$params.canvasContext, viewport = _this$params.viewport, transform = _this$params.transform, imageLayer = _this$params.imageLayer, background = _this$params.background;
                  this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig, this.annotationCanvasMap);
                  this.gfx.beginDrawing({
                    transform,
                    viewport,
                    transparency,
                    background
                  });
                  this.operatorListIdx = 0;
                  this.graphicsReady = true;
                  if (this.graphicsReadyCallback) {
                    this.graphicsReadyCallback();
                  }
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  var error = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
                  this.running = false;
                  this.cancelled = true;
                  if (this.gfx) {
                    this.gfx.endDrawing();
                  }
                  if (this._canvas) {
                    InternalRenderTask2.canvasInUse["delete"](this._canvas);
                  }
                  this.callback(error || new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this._pageIndex + 1), "canvas"));
                }
              }, {
                key: "operatorListChanged",
                value: function operatorListChanged() {
                  if (!this.graphicsReady) {
                    if (!this.graphicsReadyCallback) {
                      this.graphicsReadyCallback = this._continueBound;
                    }
                    return;
                  }
                  if (this.stepper) {
                    this.stepper.updateOperatorList(this.operatorList);
                  }
                  if (this.running) {
                    return;
                  }
                  this._continue();
                }
              }, {
                key: "_continue",
                value: function _continue() {
                  this.running = true;
                  if (this.cancelled) {
                    return;
                  }
                  if (this.task.onContinue) {
                    this.task.onContinue(this._scheduleNextBound);
                  } else {
                    this._scheduleNext();
                  }
                }
              }, {
                key: "_scheduleNext",
                value: function _scheduleNext() {
                  var _this17 = this;
                  if (this._useRequestAnimationFrame) {
                    window.requestAnimationFrame(function() {
                      _this17._nextBound()["catch"](_this17._cancelBound);
                    });
                  } else {
                    Promise.resolve().then(this._nextBound)["catch"](this._cancelBound);
                  }
                }
              }, {
                key: "_next",
                value: function() {
                  var _next2 = _asyncToGenerator(_regenerator["default"].mark(function _callee6() {
                    return _regenerator["default"].wrap(function _callee6$(_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            if (!this.cancelled) {
                              _context6.next = 2;
                              break;
                            }
                            return _context6.abrupt("return");
                          case 2:
                            this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
                            if (this.operatorListIdx === this.operatorList.argsArray.length) {
                              this.running = false;
                              if (this.operatorList.lastChunk) {
                                this.gfx.endDrawing();
                                if (this._canvas) {
                                  InternalRenderTask2.canvasInUse["delete"](this._canvas);
                                }
                                this.callback();
                              }
                            }
                          case 4:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, _callee6, this);
                  }));
                  function _next() {
                    return _next2.apply(this, arguments);
                  }
                  return _next;
                }()
              }], [{
                key: "canvasInUse",
                get: function get2() {
                  return (0, _util.shadow)(this, "canvasInUse", /* @__PURE__ */ new WeakSet());
                }
              }]);
              return InternalRenderTask2;
            }();
            var version = "2.12.313";
            exports.version = version;
            var build = "a2ae56f39";
            exports.build = build;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.FontLoader = exports2.FontFaceObject = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var BaseFontLoader = function() {
              function BaseFontLoader2(_ref) {
                var docId = _ref.docId, onUnsupportedFeature = _ref.onUnsupportedFeature, _ref$ownerDocument = _ref.ownerDocument, ownerDocument = _ref$ownerDocument === void 0 ? globalThis.document : _ref$ownerDocument, _ref$styleElement = _ref.styleElement, styleElement = _ref$styleElement === void 0 ? null : _ref$styleElement;
                _classCallCheck3(this, BaseFontLoader2);
                if (this.constructor === BaseFontLoader2) {
                  (0, _util2.unreachable)("Cannot initialize BaseFontLoader.");
                }
                this.docId = docId;
                this._onUnsupportedFeature = onUnsupportedFeature;
                this._document = ownerDocument;
                this.nativeFontFaces = [];
                this.styleElement = null;
              }
              _createClass3(BaseFontLoader2, [{
                key: "addNativeFontFace",
                value: function addNativeFontFace(nativeFontFace) {
                  this.nativeFontFaces.push(nativeFontFace);
                  this._document.fonts.add(nativeFontFace);
                }
              }, {
                key: "insertRule",
                value: function insertRule(rule) {
                  var styleElement = this.styleElement;
                  if (!styleElement) {
                    styleElement = this.styleElement = this._document.createElement("style");
                    styleElement.id = "PDFJS_FONT_STYLE_TAG_".concat(this.docId);
                    this._document.documentElement.getElementsByTagName("head")[0].appendChild(styleElement);
                  }
                  var styleSheet = styleElement.sheet;
                  styleSheet.insertRule(rule, styleSheet.cssRules.length);
                }
              }, {
                key: "clear",
                value: function clear() {
                  var _iterator = _createForOfIteratorHelper2(this.nativeFontFaces), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var nativeFontFace = _step.value;
                      this._document.fonts["delete"](nativeFontFace);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  this.nativeFontFaces.length = 0;
                  if (this.styleElement) {
                    this.styleElement.remove();
                    this.styleElement = null;
                  }
                }
              }, {
                key: "bind",
                value: function() {
                  var _bind = _asyncToGenerator2(_regenerator2["default"].mark(function _callee(font) {
                    var _this = this;
                    var nativeFontFace, rule;
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!(font.attached || font.missingFile)) {
                              _context.next = 2;
                              break;
                            }
                            return _context.abrupt("return");
                          case 2:
                            font.attached = true;
                            if (!this.isFontLoadingAPISupported) {
                              _context.next = 19;
                              break;
                            }
                            nativeFontFace = font.createNativeFontFace();
                            if (!nativeFontFace) {
                              _context.next = 18;
                              break;
                            }
                            this.addNativeFontFace(nativeFontFace);
                            _context.prev = 7;
                            _context.next = 10;
                            return nativeFontFace.loaded;
                          case 10:
                            _context.next = 18;
                            break;
                          case 12:
                            _context.prev = 12;
                            _context.t0 = _context["catch"](7);
                            this._onUnsupportedFeature({
                              featureId: _util2.UNSUPPORTED_FEATURES.errorFontLoadNative
                            });
                            (0, _util2.warn)("Failed to load font '".concat(nativeFontFace.family, "': '").concat(_context.t0, "'."));
                            font.disableFontFace = true;
                            throw _context.t0;
                          case 18:
                            return _context.abrupt("return");
                          case 19:
                            rule = font.createFontFaceRule();
                            if (!rule) {
                              _context.next = 26;
                              break;
                            }
                            this.insertRule(rule);
                            if (!this.isSyncFontLoadingSupported) {
                              _context.next = 24;
                              break;
                            }
                            return _context.abrupt("return");
                          case 24:
                            _context.next = 26;
                            return new Promise(function(resolve) {
                              var request = _this._queueLoadingCallback(resolve);
                              _this._prepareFontLoadEvent([rule], [font], request);
                            });
                          case 26:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this, [[7, 12]]);
                  }));
                  function bind(_x) {
                    return _bind.apply(this, arguments);
                  }
                  return bind;
                }()
              }, {
                key: "_queueLoadingCallback",
                value: function _queueLoadingCallback(callback) {
                  (0, _util2.unreachable)("Abstract method `_queueLoadingCallback`.");
                }
              }, {
                key: "isFontLoadingAPISupported",
                get: function get2() {
                  var _this$_document;
                  var hasFonts = !!((_this$_document = this._document) !== null && _this$_document !== void 0 && _this$_document.fonts);
                  return (0, _util2.shadow)(this, "isFontLoadingAPISupported", hasFonts);
                }
              }, {
                key: "isSyncFontLoadingSupported",
                get: function get2() {
                  (0, _util2.unreachable)("Abstract method `isSyncFontLoadingSupported`.");
                }
              }, {
                key: "_loadTestFont",
                get: function get2() {
                  (0, _util2.unreachable)("Abstract method `_loadTestFont`.");
                }
              }, {
                key: "_prepareFontLoadEvent",
                value: function _prepareFontLoadEvent(rules, fontsToLoad, request) {
                  (0, _util2.unreachable)("Abstract method `_prepareFontLoadEvent`.");
                }
              }]);
              return BaseFontLoader2;
            }();
            var FontLoader;
            exports2.FontLoader = FontLoader;
            {
              exports2.FontLoader = FontLoader = function(_BaseFontLoader) {
                _inherits2(GenericFontLoader, _BaseFontLoader);
                var _super = _createSuper10(GenericFontLoader);
                function GenericFontLoader(params) {
                  var _this2;
                  _classCallCheck3(this, GenericFontLoader);
                  _this2 = _super.call(this, params);
                  _this2.loadingContext = {
                    requests: [],
                    nextRequestId: 0
                  };
                  _this2.loadTestFontId = 0;
                  return _this2;
                }
                _createClass3(GenericFontLoader, [{
                  key: "isSyncFontLoadingSupported",
                  get: function get2() {
                    var supported = false;
                    if (typeof navigator === "undefined") {
                      supported = true;
                    } else {
                      var m = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);
                      if ((m === null || m === void 0 ? void 0 : m[1]) >= 14) {
                        supported = true;
                      }
                    }
                    return (0, _util2.shadow)(this, "isSyncFontLoadingSupported", supported);
                  }
                }, {
                  key: "_queueLoadingCallback",
                  value: function _queueLoadingCallback(callback) {
                    function completeRequest() {
                      (0, _util2.assert)(!request.done, "completeRequest() cannot be called twice.");
                      request.done = true;
                      while (context.requests.length > 0 && context.requests[0].done) {
                        var otherRequest = context.requests.shift();
                        setTimeout(otherRequest.callback, 0);
                      }
                    }
                    var context = this.loadingContext;
                    var request = {
                      id: "pdfjs-font-loading-".concat(context.nextRequestId++),
                      done: false,
                      complete: completeRequest,
                      callback
                    };
                    context.requests.push(request);
                    return request;
                  }
                }, {
                  key: "_loadTestFont",
                  get: function get2() {
                    var getLoadTestFont = function getLoadTestFont2() {
                      return atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
                    };
                    return (0, _util2.shadow)(this, "_loadTestFont", getLoadTestFont());
                  }
                }, {
                  key: "_prepareFontLoadEvent",
                  value: function _prepareFontLoadEvent(rules, fonts, request) {
                    function int32(data2, offset) {
                      return data2.charCodeAt(offset) << 24 | data2.charCodeAt(offset + 1) << 16 | data2.charCodeAt(offset + 2) << 8 | data2.charCodeAt(offset + 3) & 255;
                    }
                    function spliceString(s, offset, remove, insert) {
                      var chunk1 = s.substring(0, offset);
                      var chunk2 = s.substring(offset + remove);
                      return chunk1 + insert + chunk2;
                    }
                    var i, ii;
                    var canvas = this._document.createElement("canvas");
                    canvas.width = 1;
                    canvas.height = 1;
                    var ctx = canvas.getContext("2d");
                    var called = 0;
                    function isFontReady(name2, callback) {
                      called++;
                      if (called > 30) {
                        (0, _util2.warn)("Load test font never loaded.");
                        callback();
                        return;
                      }
                      ctx.font = "30px " + name2;
                      ctx.fillText(".", 0, 20);
                      var imageData = ctx.getImageData(0, 0, 1, 1);
                      if (imageData.data[3] > 0) {
                        callback();
                        return;
                      }
                      setTimeout(isFontReady.bind(null, name2, callback));
                    }
                    var loadTestFontId = "lt".concat(Date.now()).concat(this.loadTestFontId++);
                    var data = this._loadTestFont;
                    var COMMENT_OFFSET = 976;
                    data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
                    var CFF_CHECKSUM_OFFSET = 16;
                    var XXXX_VALUE = 1482184792;
                    var checksum = int32(data, CFF_CHECKSUM_OFFSET);
                    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                      checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
                    }
                    if (i < loadTestFontId.length) {
                      checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
                    }
                    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util2.string32)(checksum));
                    var url = "url(data:font/opentype;base64,".concat(btoa(data), ");");
                    var rule = '@font-face {font-family:"'.concat(loadTestFontId, '";src:').concat(url, "}");
                    this.insertRule(rule);
                    var names = [];
                    var _iterator2 = _createForOfIteratorHelper2(fonts), _step2;
                    try {
                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                        var font = _step2.value;
                        names.push(font.loadedName);
                      }
                    } catch (err) {
                      _iterator2.e(err);
                    } finally {
                      _iterator2.f();
                    }
                    names.push(loadTestFontId);
                    var div = this._document.createElement("div");
                    div.style.visibility = "hidden";
                    div.style.width = div.style.height = "10px";
                    div.style.position = "absolute";
                    div.style.top = div.style.left = "0px";
                    for (var _i = 0, _names = names; _i < _names.length; _i++) {
                      var name = _names[_i];
                      var span = this._document.createElement("span");
                      span.textContent = "Hi";
                      span.style.fontFamily = name;
                      div.appendChild(span);
                    }
                    this._document.body.appendChild(div);
                    isFontReady(loadTestFontId, function() {
                      div.remove();
                      request.complete();
                    });
                  }
                }]);
                return GenericFontLoader;
              }(BaseFontLoader);
            }
            var FontFaceObject = function() {
              function FontFaceObject2(translatedData, _ref2) {
                var _ref2$isEvalSupported = _ref2.isEvalSupported, isEvalSupported = _ref2$isEvalSupported === void 0 ? true : _ref2$isEvalSupported, _ref2$disableFontFace = _ref2.disableFontFace, disableFontFace = _ref2$disableFontFace === void 0 ? false : _ref2$disableFontFace, _ref2$ignoreErrors = _ref2.ignoreErrors, ignoreErrors = _ref2$ignoreErrors === void 0 ? false : _ref2$ignoreErrors, onUnsupportedFeature = _ref2.onUnsupportedFeature, _ref2$fontRegistry = _ref2.fontRegistry, fontRegistry = _ref2$fontRegistry === void 0 ? null : _ref2$fontRegistry;
                _classCallCheck3(this, FontFaceObject2);
                this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
                for (var i in translatedData) {
                  this[i] = translatedData[i];
                }
                this.isEvalSupported = isEvalSupported !== false;
                this.disableFontFace = disableFontFace === true;
                this.ignoreErrors = ignoreErrors === true;
                this._onUnsupportedFeature = onUnsupportedFeature;
                this.fontRegistry = fontRegistry;
              }
              _createClass3(FontFaceObject2, [{
                key: "createNativeFontFace",
                value: function createNativeFontFace() {
                  if (!this.data || this.disableFontFace) {
                    return null;
                  }
                  var nativeFontFace;
                  if (!this.cssFontInfo) {
                    nativeFontFace = new FontFace(this.loadedName, this.data, {});
                  } else {
                    var css = {
                      weight: this.cssFontInfo.fontWeight
                    };
                    if (this.cssFontInfo.italicAngle) {
                      css.style = "oblique ".concat(this.cssFontInfo.italicAngle, "deg");
                    }
                    nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);
                  }
                  if (this.fontRegistry) {
                    this.fontRegistry.registerFont(this);
                  }
                  return nativeFontFace;
                }
              }, {
                key: "createFontFaceRule",
                value: function createFontFaceRule() {
                  if (!this.data || this.disableFontFace) {
                    return null;
                  }
                  var data = (0, _util2.bytesToString)(this.data);
                  var url = "url(data:".concat(this.mimetype, ";base64,").concat(btoa(data), ");");
                  var rule;
                  if (!this.cssFontInfo) {
                    rule = '@font-face {font-family:"'.concat(this.loadedName, '";src:').concat(url, "}");
                  } else {
                    var css = "font-weight: ".concat(this.cssFontInfo.fontWeight, ";");
                    if (this.cssFontInfo.italicAngle) {
                      css += "font-style: oblique ".concat(this.cssFontInfo.italicAngle, "deg;");
                    }
                    rule = '@font-face {font-family:"'.concat(this.cssFontInfo.fontFamily, '";').concat(css, "src:").concat(url, "}");
                  }
                  if (this.fontRegistry) {
                    this.fontRegistry.registerFont(this, url);
                  }
                  return rule;
                }
              }, {
                key: "getPathGenerator",
                value: function getPathGenerator(objs, character) {
                  if (this.compiledGlyphs[character] !== void 0) {
                    return this.compiledGlyphs[character];
                  }
                  var cmds;
                  try {
                    cmds = objs.get(this.loadedName + "_path_" + character);
                  } catch (ex) {
                    if (!this.ignoreErrors) {
                      throw ex;
                    }
                    this._onUnsupportedFeature({
                      featureId: _util2.UNSUPPORTED_FEATURES.errorFontGetPath
                    });
                    (0, _util2.warn)('getPathGenerator - ignoring character: "'.concat(ex, '".'));
                    return this.compiledGlyphs[character] = function(c, size) {
                    };
                  }
                  if (this.isEvalSupported && _util2.IsEvalSupportedCached.value) {
                    var jsBuf = [];
                    var _iterator3 = _createForOfIteratorHelper2(cmds), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var current = _step3.value;
                        var args = current.args !== void 0 ? current.args.join(",") : "";
                        jsBuf.push("c.", current.cmd, "(", args, ");\n");
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                    return this.compiledGlyphs[character] = new Function("c", "size", jsBuf.join(""));
                  }
                  return this.compiledGlyphs[character] = function(c, size) {
                    var _iterator4 = _createForOfIteratorHelper2(cmds), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var _current = _step4.value;
                        if (_current.cmd === "scale") {
                          _current.args = [size, -size];
                        }
                        c[_current.cmd].apply(c, _current.args);
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                  };
                }
              }]);
              return FontFaceObject2;
            }();
            exports2.FontFaceObject = FontFaceObject;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.NodeStandardFontDataFactory = exports2.NodeCanvasFactory = exports2.NodeCMapReaderFactory = void 0;
            var _base_factory = __w_pdfjs_require__2(135);
            var _is_node2 = __w_pdfjs_require__2(6);
            var _util2 = __w_pdfjs_require__2(4);
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var NodeCanvasFactory = function NodeCanvasFactory2() {
              _classCallCheck3(this, NodeCanvasFactory2);
              (0, _util2.unreachable)("Not implemented: NodeCanvasFactory");
            };
            exports2.NodeCanvasFactory = NodeCanvasFactory;
            var NodeCMapReaderFactory = function NodeCMapReaderFactory2() {
              _classCallCheck3(this, NodeCMapReaderFactory2);
              (0, _util2.unreachable)("Not implemented: NodeCMapReaderFactory");
            };
            exports2.NodeCMapReaderFactory = NodeCMapReaderFactory;
            var NodeStandardFontDataFactory = function NodeStandardFontDataFactory2() {
              _classCallCheck3(this, NodeStandardFontDataFactory2);
              (0, _util2.unreachable)("Not implemented: NodeStandardFontDataFactory");
            };
            exports2.NodeStandardFontDataFactory = NodeStandardFontDataFactory;
            if (_is_node2.isNodeJS) {
              var fetchData = function fetchData2(url) {
                return new Promise(function(resolve, reject) {
                  var fs = require_fs();
                  fs.readFile(url, function(error, data) {
                    if (error || !data) {
                      reject(new Error(error));
                      return;
                    }
                    resolve(new Uint8Array(data));
                  });
                });
              };
              exports2.NodeCanvasFactory = NodeCanvasFactory = function(_BaseCanvasFactory) {
                _inherits2(NodeCanvasFactory2, _BaseCanvasFactory);
                var _super = _createSuper10(NodeCanvasFactory2);
                function NodeCanvasFactory2() {
                  _classCallCheck3(this, NodeCanvasFactory2);
                  return _super.apply(this, arguments);
                }
                _createClass3(NodeCanvasFactory2, [{
                  key: "_createCanvas",
                  value: function _createCanvas(width, height) {
                    var Canvas = require_canvas();
                    return Canvas.createCanvas(width, height);
                  }
                }]);
                return NodeCanvasFactory2;
              }(_base_factory.BaseCanvasFactory);
              exports2.NodeCMapReaderFactory = NodeCMapReaderFactory = function(_BaseCMapReaderFactor) {
                _inherits2(NodeCMapReaderFactory2, _BaseCMapReaderFactor);
                var _super2 = _createSuper10(NodeCMapReaderFactory2);
                function NodeCMapReaderFactory2() {
                  _classCallCheck3(this, NodeCMapReaderFactory2);
                  return _super2.apply(this, arguments);
                }
                _createClass3(NodeCMapReaderFactory2, [{
                  key: "_fetchData",
                  value: function _fetchData(url, compressionType) {
                    return fetchData(url).then(function(data) {
                      return {
                        cMapData: data,
                        compressionType
                      };
                    });
                  }
                }]);
                return NodeCMapReaderFactory2;
              }(_base_factory.BaseCMapReaderFactory);
              exports2.NodeStandardFontDataFactory = NodeStandardFontDataFactory = function(_BaseStandardFontData) {
                _inherits2(NodeStandardFontDataFactory2, _BaseStandardFontData);
                var _super3 = _createSuper10(NodeStandardFontDataFactory2);
                function NodeStandardFontDataFactory2() {
                  _classCallCheck3(this, NodeStandardFontDataFactory2);
                  return _super3.apply(this, arguments);
                }
                _createClass3(NodeStandardFontDataFactory2, [{
                  key: "_fetchData",
                  value: function _fetchData(url) {
                    return fetchData(url);
                  }
                }]);
                return NodeStandardFontDataFactory2;
              }(_base_factory.BaseStandardFontDataFactory);
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.AnnotationStorage = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var AnnotationStorage = function() {
              function AnnotationStorage2() {
                _classCallCheck3(this, AnnotationStorage2);
                this._storage = /* @__PURE__ */ new Map();
                this._timeStamp = Date.now();
                this._modified = false;
                this.onSetModified = null;
                this.onResetModified = null;
              }
              _createClass3(AnnotationStorage2, [{
                key: "getValue",
                value: function getValue(key, defaultValue) {
                  var value = this._storage.get(key);
                  if (value === void 0) {
                    return defaultValue;
                  }
                  return Object.assign(defaultValue, value);
                }
              }, {
                key: "setValue",
                value: function setValue(key, value) {
                  var obj = this._storage.get(key);
                  var modified = false;
                  if (obj !== void 0) {
                    for (var _i = 0, _Object$entries = Object.entries(value); _i < _Object$entries.length; _i++) {
                      var _Object$entries$_i = _slicedToArray3(_Object$entries[_i], 2), entry = _Object$entries$_i[0], val = _Object$entries$_i[1];
                      if (obj[entry] !== val) {
                        modified = true;
                        obj[entry] = val;
                      }
                    }
                  } else {
                    modified = true;
                    this._storage.set(key, value);
                  }
                  if (modified) {
                    this._timeStamp = Date.now();
                    this._setModified();
                  }
                }
              }, {
                key: "getAll",
                value: function getAll() {
                  return this._storage.size > 0 ? (0, _util2.objectFromMap)(this._storage) : null;
                }
              }, {
                key: "size",
                get: function get2() {
                  return this._storage.size;
                }
              }, {
                key: "_setModified",
                value: function _setModified() {
                  if (!this._modified) {
                    this._modified = true;
                    if (typeof this.onSetModified === "function") {
                      this.onSetModified();
                    }
                  }
                }
              }, {
                key: "resetModified",
                value: function resetModified() {
                  if (this._modified) {
                    this._modified = false;
                    if (typeof this.onResetModified === "function") {
                      this.onResetModified();
                    }
                  }
                }
              }, {
                key: "serializable",
                get: function get2() {
                  return this._storage.size > 0 ? this._storage : null;
                }
              }, {
                key: "lastModified",
                get: function get2() {
                  return this._timeStamp.toString();
                }
              }]);
              return AnnotationStorage2;
            }();
            exports2.AnnotationStorage = AnnotationStorage;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.CanvasGraphics = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            var _pattern_helper = __w_pdfjs_require__2(141);
            var _display_utils2 = __w_pdfjs_require__2(1);
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e2) {
                    throw _e2;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e3) {
                didErr = true;
                err = _e3;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            var MIN_FONT_SIZE = 16;
            var MAX_FONT_SIZE = 100;
            var MAX_GROUP_SIZE = 4096;
            var EXECUTION_TIME = 15;
            var EXECUTION_STEPS = 10;
            var COMPILE_TYPE3_GLYPHS = true;
            var MAX_SIZE_TO_COMPILE = 1e3;
            var FULL_CHUNK_HEIGHT = 16;
            var LINEWIDTH_SCALE_FACTOR = 1.000001;
            function mirrorContextOperations(ctx, destCtx) {
              if (ctx._removeMirroring) {
                throw new Error("Context is already forwarding operations.");
              }
              ctx.__originalSave = ctx.save;
              ctx.__originalRestore = ctx.restore;
              ctx.__originalRotate = ctx.rotate;
              ctx.__originalScale = ctx.scale;
              ctx.__originalTranslate = ctx.translate;
              ctx.__originalTransform = ctx.transform;
              ctx.__originalSetTransform = ctx.setTransform;
              ctx.__originalResetTransform = ctx.resetTransform;
              ctx.__originalClip = ctx.clip;
              ctx.__originalMoveTo = ctx.moveTo;
              ctx.__originalLineTo = ctx.lineTo;
              ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
              ctx.__originalRect = ctx.rect;
              ctx.__originalClosePath = ctx.closePath;
              ctx.__originalBeginPath = ctx.beginPath;
              ctx._removeMirroring = function() {
                ctx.save = ctx.__originalSave;
                ctx.restore = ctx.__originalRestore;
                ctx.rotate = ctx.__originalRotate;
                ctx.scale = ctx.__originalScale;
                ctx.translate = ctx.__originalTranslate;
                ctx.transform = ctx.__originalTransform;
                ctx.setTransform = ctx.__originalSetTransform;
                ctx.resetTransform = ctx.__originalResetTransform;
                ctx.clip = ctx.__originalClip;
                ctx.moveTo = ctx.__originalMoveTo;
                ctx.lineTo = ctx.__originalLineTo;
                ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
                ctx.rect = ctx.__originalRect;
                ctx.closePath = ctx.__originalClosePath;
                ctx.beginPath = ctx.__originalBeginPath;
                delete ctx._removeMirroring;
              };
              ctx.save = function ctxSave() {
                destCtx.save();
                this.__originalSave();
              };
              ctx.restore = function ctxRestore() {
                destCtx.restore();
                this.__originalRestore();
              };
              ctx.translate = function ctxTranslate(x, y) {
                destCtx.translate(x, y);
                this.__originalTranslate(x, y);
              };
              ctx.scale = function ctxScale(x, y) {
                destCtx.scale(x, y);
                this.__originalScale(x, y);
              };
              ctx.transform = function ctxTransform(a, b, c, d, e, f) {
                destCtx.transform(a, b, c, d, e, f);
                this.__originalTransform(a, b, c, d, e, f);
              };
              ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
                destCtx.setTransform(a, b, c, d, e, f);
                this.__originalSetTransform(a, b, c, d, e, f);
              };
              ctx.resetTransform = function ctxResetTransform() {
                destCtx.resetTransform();
                this.__originalResetTransform();
              };
              ctx.rotate = function ctxRotate(angle) {
                destCtx.rotate(angle);
                this.__originalRotate(angle);
              };
              ctx.clip = function ctxRotate(rule) {
                destCtx.clip(rule);
                this.__originalClip(rule);
              };
              ctx.moveTo = function(x, y) {
                destCtx.moveTo(x, y);
                this.__originalMoveTo(x, y);
              };
              ctx.lineTo = function(x, y) {
                destCtx.lineTo(x, y);
                this.__originalLineTo(x, y);
              };
              ctx.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
                destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
                this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
              };
              ctx.rect = function(x, y, width, height) {
                destCtx.rect(x, y, width, height);
                this.__originalRect(x, y, width, height);
              };
              ctx.closePath = function() {
                destCtx.closePath();
                this.__originalClosePath();
              };
              ctx.beginPath = function() {
                destCtx.beginPath();
                this.__originalBeginPath();
              };
            }
            function addContextCurrentTransform(ctx) {
              if (ctx.mozCurrentTransform) {
                return;
              }
              ctx._originalSave = ctx.save;
              ctx._originalRestore = ctx.restore;
              ctx._originalRotate = ctx.rotate;
              ctx._originalScale = ctx.scale;
              ctx._originalTranslate = ctx.translate;
              ctx._originalTransform = ctx.transform;
              ctx._originalSetTransform = ctx.setTransform;
              ctx._originalResetTransform = ctx.resetTransform;
              ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];
              ctx._transformStack = [];
              try {
                var desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), "lineWidth");
                ctx._setLineWidth = desc.set;
                ctx._getLineWidth = desc.get;
                Object.defineProperty(ctx, "lineWidth", {
                  set: function setLineWidth(width) {
                    this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);
                  },
                  get: function getLineWidth() {
                    return this._getLineWidth();
                  }
                });
              } catch (_) {
              }
              Object.defineProperty(ctx, "mozCurrentTransform", {
                get: function getCurrentTransform() {
                  return this._transformMatrix;
                }
              });
              Object.defineProperty(ctx, "mozCurrentTransformInverse", {
                get: function getCurrentTransformInverse() {
                  var _this$_transformMatri = _slicedToArray3(this._transformMatrix, 6), a = _this$_transformMatri[0], b = _this$_transformMatri[1], c = _this$_transformMatri[2], d = _this$_transformMatri[3], e = _this$_transformMatri[4], f = _this$_transformMatri[5];
                  var ad_bc = a * d - b * c;
                  var bc_ad = b * c - a * d;
                  return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];
                }
              });
              ctx.save = function ctxSave() {
                var old = this._transformMatrix;
                this._transformStack.push(old);
                this._transformMatrix = old.slice(0, 6);
                this._originalSave();
              };
              ctx.restore = function ctxRestore() {
                var prev = this._transformStack.pop();
                if (prev) {
                  this._transformMatrix = prev;
                  this._originalRestore();
                }
              };
              ctx.translate = function ctxTranslate(x, y) {
                var m = this._transformMatrix;
                m[4] = m[0] * x + m[2] * y + m[4];
                m[5] = m[1] * x + m[3] * y + m[5];
                this._originalTranslate(x, y);
              };
              ctx.scale = function ctxScale(x, y) {
                var m = this._transformMatrix;
                m[0] *= x;
                m[1] *= x;
                m[2] *= y;
                m[3] *= y;
                this._originalScale(x, y);
              };
              ctx.transform = function ctxTransform(a, b, c, d, e, f) {
                var m = this._transformMatrix;
                this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];
                ctx._originalTransform(a, b, c, d, e, f);
              };
              ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
                this._transformMatrix = [a, b, c, d, e, f];
                ctx._originalSetTransform(a, b, c, d, e, f);
              };
              ctx.resetTransform = function ctxResetTransform() {
                this._transformMatrix = [1, 0, 0, 1, 0, 0];
                ctx._originalResetTransform();
              };
              ctx.rotate = function ctxRotate(angle) {
                var cosValue = Math.cos(angle);
                var sinValue = Math.sin(angle);
                var m = this._transformMatrix;
                this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];
                this._originalRotate(angle);
              };
            }
            var CachedCanvases = function() {
              function CachedCanvases2(canvasFactory) {
                _classCallCheck3(this, CachedCanvases2);
                this.canvasFactory = canvasFactory;
                this.cache = /* @__PURE__ */ Object.create(null);
              }
              _createClass3(CachedCanvases2, [{
                key: "getCanvas",
                value: function getCanvas(id, width, height, trackTransform) {
                  var canvasEntry;
                  if (this.cache[id] !== void 0) {
                    canvasEntry = this.cache[id];
                    this.canvasFactory.reset(canvasEntry, width, height);
                    canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);
                  } else {
                    canvasEntry = this.canvasFactory.create(width, height);
                    this.cache[id] = canvasEntry;
                  }
                  if (trackTransform) {
                    addContextCurrentTransform(canvasEntry.context);
                  }
                  return canvasEntry;
                }
              }, {
                key: "clear",
                value: function clear() {
                  for (var id in this.cache) {
                    var canvasEntry = this.cache[id];
                    this.canvasFactory.destroy(canvasEntry);
                    delete this.cache[id];
                  }
                }
              }]);
              return CachedCanvases2;
            }();
            function compileType3Glyph(imgData) {
              var POINT_TO_PROCESS_LIMIT = 1e3;
              var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
              var width = imgData.width, height = imgData.height, width1 = width + 1;
              var i, ii, j, j0;
              var points = new Uint8Array(width1 * (height + 1));
              var lineSize = width + 7 & ~7, data0 = imgData.data;
              var data = new Uint8Array(lineSize * height);
              var pos = 0;
              for (i = 0, ii = data0.length; i < ii; i++) {
                var elem = data0[i];
                var mask = 128;
                while (mask > 0) {
                  data[pos++] = elem & mask ? 0 : 255;
                  mask >>= 1;
                }
              }
              var count = 0;
              pos = 0;
              if (data[pos] !== 0) {
                points[0] = 1;
                ++count;
              }
              for (j = 1; j < width; j++) {
                if (data[pos] !== data[pos + 1]) {
                  points[j] = data[pos] ? 2 : 1;
                  ++count;
                }
                pos++;
              }
              if (data[pos] !== 0) {
                points[j] = 2;
                ++count;
              }
              for (i = 1; i < height; i++) {
                pos = i * lineSize;
                j0 = i * width1;
                if (data[pos - lineSize] !== data[pos]) {
                  points[j0] = data[pos] ? 1 : 8;
                  ++count;
                }
                var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
                for (j = 1; j < width; j++) {
                  sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);
                  if (POINT_TYPES[sum]) {
                    points[j0 + j] = POINT_TYPES[sum];
                    ++count;
                  }
                  pos++;
                }
                if (data[pos - lineSize] !== data[pos]) {
                  points[j0 + j] = data[pos] ? 2 : 4;
                  ++count;
                }
                if (count > POINT_TO_PROCESS_LIMIT) {
                  return null;
                }
              }
              pos = lineSize * (height - 1);
              j0 = i * width1;
              if (data[pos] !== 0) {
                points[j0] = 8;
                ++count;
              }
              for (j = 1; j < width; j++) {
                if (data[pos] !== data[pos + 1]) {
                  points[j0 + j] = data[pos] ? 4 : 8;
                  ++count;
                }
                pos++;
              }
              if (data[pos] !== 0) {
                points[j0 + j] = 4;
                ++count;
              }
              if (count > POINT_TO_PROCESS_LIMIT) {
                return null;
              }
              var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
              var outlines = [];
              for (i = 0; count && i <= height; i++) {
                var p = i * width1;
                var end = p + width;
                while (p < end && !points[p]) {
                  p++;
                }
                if (p === end) {
                  continue;
                }
                var coords = [p % width1, i];
                var p0 = p;
                var type = points[p];
                do {
                  var step = steps[type];
                  do {
                    p += step;
                  } while (!points[p]);
                  var pp = points[p];
                  if (pp !== 5 && pp !== 10) {
                    type = pp;
                    points[p] = 0;
                  } else {
                    type = pp & 51 * type >> 4;
                    points[p] &= type >> 2 | type << 2;
                  }
                  coords.push(p % width1, p / width1 | 0);
                  if (!points[p]) {
                    --count;
                  }
                } while (p0 !== p);
                outlines.push(coords);
                --i;
              }
              var drawOutline = function drawOutline2(c) {
                c.save();
                c.scale(1 / width, -1 / height);
                c.translate(0, -height);
                c.beginPath();
                for (var k = 0, kk = outlines.length; k < kk; k++) {
                  var o = outlines[k];
                  c.moveTo(o[0], o[1]);
                  for (var l = 2, ll = o.length; l < ll; l += 2) {
                    c.lineTo(o[l], o[l + 1]);
                  }
                }
                c.fill();
                c.beginPath();
                c.restore();
              };
              return drawOutline;
            }
            var CanvasExtraState = function() {
              function CanvasExtraState2(width, height) {
                _classCallCheck3(this, CanvasExtraState2);
                this.alphaIsShape = false;
                this.fontSize = 0;
                this.fontSizeScale = 1;
                this.textMatrix = _util2.IDENTITY_MATRIX;
                this.textMatrixScale = 1;
                this.fontMatrix = _util2.FONT_IDENTITY_MATRIX;
                this.leading = 0;
                this.x = 0;
                this.y = 0;
                this.lineX = 0;
                this.lineY = 0;
                this.charSpacing = 0;
                this.wordSpacing = 0;
                this.textHScale = 1;
                this.textRenderingMode = _util2.TextRenderingMode.FILL;
                this.textRise = 0;
                this.fillColor = "#000000";
                this.strokeColor = "#000000";
                this.patternFill = false;
                this.fillAlpha = 1;
                this.strokeAlpha = 1;
                this.lineWidth = 1;
                this.activeSMask = null;
                this.transferMaps = null;
                this.startNewPathAndClipBox([0, 0, width, height]);
              }
              _createClass3(CanvasExtraState2, [{
                key: "clone",
                value: function clone() {
                  var clone2 = Object.create(this);
                  clone2.clipBox = this.clipBox.slice();
                  return clone2;
                }
              }, {
                key: "setCurrentPoint",
                value: function setCurrentPoint(x, y) {
                  this.x = x;
                  this.y = y;
                }
              }, {
                key: "updatePathMinMax",
                value: function updatePathMinMax(transform, x, y) {
                  var _Util$applyTransform = _util2.Util.applyTransform([x, y], transform);
                  var _Util$applyTransform2 = _slicedToArray3(_Util$applyTransform, 2);
                  x = _Util$applyTransform2[0];
                  y = _Util$applyTransform2[1];
                  this.minX = Math.min(this.minX, x);
                  this.minY = Math.min(this.minY, y);
                  this.maxX = Math.max(this.maxX, x);
                  this.maxY = Math.max(this.maxY, y);
                }
              }, {
                key: "updateCurvePathMinMax",
                value: function updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3) {
                  var box = _util2.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);
                  this.updatePathMinMax(transform, box[0], box[1]);
                  this.updatePathMinMax(transform, box[2], box[3]);
                }
              }, {
                key: "getPathBoundingBox",
                value: function getPathBoundingBox() {
                  var pathType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _pattern_helper.PathType.FILL;
                  var transform = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  var box = [this.minX, this.minY, this.maxX, this.maxY];
                  if (pathType === _pattern_helper.PathType.STROKE) {
                    if (!transform) {
                      (0, _util2.unreachable)("Stroke bounding box must include transform.");
                    }
                    var scale = _util2.Util.singularValueDecompose2dScale(transform);
                    var xStrokePad = scale[0] * this.lineWidth / 2;
                    var yStrokePad = scale[1] * this.lineWidth / 2;
                    box[0] -= xStrokePad;
                    box[1] -= yStrokePad;
                    box[2] += xStrokePad;
                    box[3] += yStrokePad;
                  }
                  return box;
                }
              }, {
                key: "updateClipFromPath",
                value: function updateClipFromPath() {
                  var intersect = _util2.Util.intersect(this.clipBox, this.getPathBoundingBox());
                  this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
                }
              }, {
                key: "startNewPathAndClipBox",
                value: function startNewPathAndClipBox(box) {
                  this.clipBox = box;
                  this.minX = Infinity;
                  this.minY = Infinity;
                  this.maxX = 0;
                  this.maxY = 0;
                }
              }, {
                key: "getClippedPathBoundingBox",
                value: function getClippedPathBoundingBox() {
                  var pathType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _pattern_helper.PathType.FILL;
                  var transform = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  return _util2.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));
                }
              }]);
              return CanvasExtraState2;
            }();
            function putBinaryImageData(ctx, imgData) {
              var transferMaps = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
                ctx.putImageData(imgData, 0, 0);
                return;
              }
              var height = imgData.height, width = imgData.width;
              var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
              var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
              var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
              var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
              var srcPos = 0, destPos;
              var src = imgData.data;
              var dest = chunkImgData.data;
              var i, j, thisChunkHeight, elemsInThisChunk;
              var transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;
              if (transferMaps) {
                switch (transferMaps.length) {
                  case 1:
                    transferMapRed = transferMaps[0];
                    transferMapGreen = transferMaps[0];
                    transferMapBlue = transferMaps[0];
                    transferMapGray = transferMaps[0];
                    break;
                  case 4:
                    transferMapRed = transferMaps[0];
                    transferMapGreen = transferMaps[1];
                    transferMapBlue = transferMaps[2];
                    transferMapGray = transferMaps[3];
                    break;
                }
              }
              if (imgData.kind === _util2.ImageKind.GRAYSCALE_1BPP) {
                var srcLength = src.byteLength;
                var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
                var dest32DataLength = dest32.length;
                var fullSrcDiff = width + 7 >> 3;
                var white = 4294967295;
                var black = _util2.IsLittleEndianCached.value ? 4278190080 : 255;
                if (transferMapGray) {
                  if (transferMapGray[0] === 255 && transferMapGray[255] === 0) {
                    var _ref = [black, white];
                    white = _ref[0];
                    black = _ref[1];
                  }
                }
                for (i = 0; i < totalChunks; i++) {
                  thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                  destPos = 0;
                  for (j = 0; j < thisChunkHeight; j++) {
                    var srcDiff = srcLength - srcPos;
                    var k = 0;
                    var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                    var kEndUnrolled = kEnd & ~7;
                    var mask = 0;
                    var srcByte = 0;
                    for (; k < kEndUnrolled; k += 8) {
                      srcByte = src[srcPos++];
                      dest32[destPos++] = srcByte & 128 ? white : black;
                      dest32[destPos++] = srcByte & 64 ? white : black;
                      dest32[destPos++] = srcByte & 32 ? white : black;
                      dest32[destPos++] = srcByte & 16 ? white : black;
                      dest32[destPos++] = srcByte & 8 ? white : black;
                      dest32[destPos++] = srcByte & 4 ? white : black;
                      dest32[destPos++] = srcByte & 2 ? white : black;
                      dest32[destPos++] = srcByte & 1 ? white : black;
                    }
                    for (; k < kEnd; k++) {
                      if (mask === 0) {
                        srcByte = src[srcPos++];
                        mask = 128;
                      }
                      dest32[destPos++] = srcByte & mask ? white : black;
                      mask >>= 1;
                    }
                  }
                  while (destPos < dest32DataLength) {
                    dest32[destPos++] = 0;
                  }
                  ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                }
              } else if (imgData.kind === _util2.ImageKind.RGBA_32BPP) {
                var hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);
                j = 0;
                elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
                for (i = 0; i < fullChunks; i++) {
                  dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                  srcPos += elemsInThisChunk;
                  if (hasTransferMaps) {
                    for (var _k = 0; _k < elemsInThisChunk; _k += 4) {
                      if (transferMapRed) {
                        dest[_k + 0] = transferMapRed[dest[_k + 0]];
                      }
                      if (transferMapGreen) {
                        dest[_k + 1] = transferMapGreen[dest[_k + 1]];
                      }
                      if (transferMapBlue) {
                        dest[_k + 2] = transferMapBlue[dest[_k + 2]];
                      }
                    }
                  }
                  ctx.putImageData(chunkImgData, 0, j);
                  j += FULL_CHUNK_HEIGHT;
                }
                if (i < totalChunks) {
                  elemsInThisChunk = width * partialChunkHeight * 4;
                  dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                  if (hasTransferMaps) {
                    for (var _k2 = 0; _k2 < elemsInThisChunk; _k2 += 4) {
                      if (transferMapRed) {
                        dest[_k2 + 0] = transferMapRed[dest[_k2 + 0]];
                      }
                      if (transferMapGreen) {
                        dest[_k2 + 1] = transferMapGreen[dest[_k2 + 1]];
                      }
                      if (transferMapBlue) {
                        dest[_k2 + 2] = transferMapBlue[dest[_k2 + 2]];
                      }
                    }
                  }
                  ctx.putImageData(chunkImgData, 0, j);
                }
              } else if (imgData.kind === _util2.ImageKind.RGB_24BPP) {
                var _hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);
                thisChunkHeight = FULL_CHUNK_HEIGHT;
                elemsInThisChunk = width * thisChunkHeight;
                for (i = 0; i < totalChunks; i++) {
                  if (i >= fullChunks) {
                    thisChunkHeight = partialChunkHeight;
                    elemsInThisChunk = width * thisChunkHeight;
                  }
                  destPos = 0;
                  for (j = elemsInThisChunk; j--; ) {
                    dest[destPos++] = src[srcPos++];
                    dest[destPos++] = src[srcPos++];
                    dest[destPos++] = src[srcPos++];
                    dest[destPos++] = 255;
                  }
                  if (_hasTransferMaps) {
                    for (var _k3 = 0; _k3 < destPos; _k3 += 4) {
                      if (transferMapRed) {
                        dest[_k3 + 0] = transferMapRed[dest[_k3 + 0]];
                      }
                      if (transferMapGreen) {
                        dest[_k3 + 1] = transferMapGreen[dest[_k3 + 1]];
                      }
                      if (transferMapBlue) {
                        dest[_k3 + 2] = transferMapBlue[dest[_k3 + 2]];
                      }
                    }
                  }
                  ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                }
              } else {
                throw new Error("bad image kind: ".concat(imgData.kind));
              }
            }
            function putBinaryImageMask(ctx, imgData) {
              var height = imgData.height, width = imgData.width;
              var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
              var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
              var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
              var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
              var srcPos = 0;
              var src = imgData.data;
              var dest = chunkImgData.data;
              for (var i = 0; i < totalChunks; i++) {
                var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                var destPos = 3;
                for (var j = 0; j < thisChunkHeight; j++) {
                  var elem = void 0, mask = 0;
                  for (var k = 0; k < width; k++) {
                    if (!mask) {
                      elem = src[srcPos++];
                      mask = 128;
                    }
                    dest[destPos] = elem & mask ? 0 : 255;
                    destPos += 4;
                    mask >>= 1;
                  }
                }
                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
              }
            }
            function copyCtxState(sourceCtx, destCtx) {
              var properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"];
              for (var i = 0, ii = properties.length; i < ii; i++) {
                var property = properties[i];
                if (sourceCtx[property] !== void 0) {
                  destCtx[property] = sourceCtx[property];
                }
              }
              if (sourceCtx.setLineDash !== void 0) {
                destCtx.setLineDash(sourceCtx.getLineDash());
                destCtx.lineDashOffset = sourceCtx.lineDashOffset;
              }
            }
            function resetCtxToDefault(ctx) {
              ctx.strokeStyle = "#000000";
              ctx.fillStyle = "#000000";
              ctx.fillRule = "nonzero";
              ctx.globalAlpha = 1;
              ctx.lineWidth = 1;
              ctx.lineCap = "butt";
              ctx.lineJoin = "miter";
              ctx.miterLimit = 10;
              ctx.globalCompositeOperation = "source-over";
              ctx.font = "10px sans-serif";
              if (ctx.setLineDash !== void 0) {
                ctx.setLineDash([]);
                ctx.lineDashOffset = 0;
              }
            }
            function composeSMaskBackdrop(bytes, r0, g0, b0) {
              var length = bytes.length;
              for (var i = 3; i < length; i += 4) {
                var alpha = bytes[i];
                if (alpha === 0) {
                  bytes[i - 3] = r0;
                  bytes[i - 2] = g0;
                  bytes[i - 1] = b0;
                } else if (alpha < 255) {
                  var alpha_ = 255 - alpha;
                  bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
                  bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
                  bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
                }
              }
            }
            function composeSMaskAlpha(maskData, layerData, transferMap) {
              var length = maskData.length;
              var scale = 1 / 255;
              for (var i = 3; i < length; i += 4) {
                var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
                layerData[i] = layerData[i] * alpha * scale | 0;
              }
            }
            function composeSMaskLuminosity(maskData, layerData, transferMap) {
              var length = maskData.length;
              for (var i = 3; i < length; i += 4) {
                var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
                layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
              }
            }
            function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {
              var hasBackdrop = !!backdrop;
              var r0 = hasBackdrop ? backdrop[0] : 0;
              var g0 = hasBackdrop ? backdrop[1] : 0;
              var b0 = hasBackdrop ? backdrop[2] : 0;
              var composeFn;
              if (subtype === "Luminosity") {
                composeFn = composeSMaskLuminosity;
              } else {
                composeFn = composeSMaskAlpha;
              }
              var PIXELS_TO_PROCESS = 1048576;
              var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
              for (var row = 0; row < height; row += chunkSize) {
                var chunkHeight = Math.min(chunkSize, height - row);
                var maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);
                var layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);
                if (hasBackdrop) {
                  composeSMaskBackdrop(maskData.data, r0, g0, b0);
                }
                composeFn(maskData.data, layerData.data, transferMap);
                layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);
              }
            }
            function composeSMask(ctx, smask, layerCtx, layerBox) {
              var layerOffsetX = layerBox[0];
              var layerOffsetY = layerBox[1];
              var layerWidth = layerBox[2] - layerOffsetX;
              var layerHeight = layerBox[3] - layerOffsetY;
              if (layerWidth === 0 || layerHeight === 0) {
                return;
              }
              genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);
              ctx.save();
              ctx.globalAlpha = 1;
              ctx.globalCompositeOperation = "source-over";
              ctx.setTransform(1, 0, 0, 1, 0, 0);
              ctx.drawImage(layerCtx.canvas, 0, 0);
              ctx.restore();
            }
            function getImageSmoothingEnabled(transform, interpolate) {
              var scale = _util2.Util.singularValueDecompose2dScale(transform);
              scale[0] = Math.fround(scale[0]);
              scale[1] = Math.fround(scale[1]);
              var actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils2.PixelsPerInch.PDF_TO_CSS_UNITS);
              if (interpolate !== void 0) {
                return interpolate;
              } else if (scale[0] <= actualScale || scale[1] <= actualScale) {
                return true;
              }
              return false;
            }
            var LINE_CAP_STYLES = ["butt", "round", "square"];
            var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
            var NORMAL_CLIP = {};
            var EO_CLIP = {};
            var CanvasGraphics = function() {
              function CanvasGraphics2(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig, annotationCanvasMap) {
                _classCallCheck3(this, CanvasGraphics2);
                this.ctx = canvasCtx;
                this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
                this.stateStack = [];
                this.pendingClip = null;
                this.pendingEOFill = false;
                this.res = null;
                this.xobjs = null;
                this.commonObjs = commonObjs;
                this.objs = objs;
                this.canvasFactory = canvasFactory;
                this.imageLayer = imageLayer;
                this.groupStack = [];
                this.processingType3 = null;
                this.baseTransform = null;
                this.baseTransformStack = [];
                this.groupLevel = 0;
                this.smaskStack = [];
                this.smaskCounter = 0;
                this.tempSMask = null;
                this.suspendedCtx = null;
                this.contentVisible = true;
                this.markedContentStack = [];
                this.optionalContentConfig = optionalContentConfig;
                this.cachedCanvases = new CachedCanvases(this.canvasFactory);
                this.cachedPatterns = /* @__PURE__ */ new Map();
                this.annotationCanvasMap = annotationCanvasMap;
                this.viewportScale = 1;
                this.outputScaleX = 1;
                this.outputScaleY = 1;
                if (canvasCtx) {
                  addContextCurrentTransform(canvasCtx);
                }
                this._cachedGetSinglePixelWidth = null;
              }
              _createClass3(CanvasGraphics2, [{
                key: "beginDrawing",
                value: function beginDrawing(_ref2) {
                  var transform = _ref2.transform, viewport = _ref2.viewport, _ref2$transparency = _ref2.transparency, transparency = _ref2$transparency === void 0 ? false : _ref2$transparency, _ref2$background = _ref2.background, background = _ref2$background === void 0 ? null : _ref2$background;
                  var width = this.ctx.canvas.width;
                  var height = this.ctx.canvas.height;
                  this.ctx.save();
                  this.ctx.fillStyle = background || "rgb(255, 255, 255)";
                  this.ctx.fillRect(0, 0, width, height);
                  this.ctx.restore();
                  if (transparency) {
                    var transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height, true);
                    this.compositeCtx = this.ctx;
                    this.transparentCanvas = transparentCanvas.canvas;
                    this.ctx = transparentCanvas.context;
                    this.ctx.save();
                    this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);
                  }
                  this.ctx.save();
                  resetCtxToDefault(this.ctx);
                  if (transform) {
                    this.ctx.transform.apply(this.ctx, transform);
                    this.outputScaleX = transform[0];
                    this.outputScaleY = transform[0];
                  }
                  this.ctx.transform.apply(this.ctx, viewport.transform);
                  this.viewportScale = viewport.scale;
                  this.baseTransform = this.ctx.mozCurrentTransform.slice();
                  this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);
                  if (this.imageLayer) {
                    this.imageLayer.beginLayout();
                  }
                }
              }, {
                key: "executeOperatorList",
                value: function executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
                  var argsArray = operatorList.argsArray;
                  var fnArray = operatorList.fnArray;
                  var i = executionStartIdx || 0;
                  var argsArrayLen = argsArray.length;
                  if (argsArrayLen === i) {
                    return i;
                  }
                  var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
                  var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
                  var steps = 0;
                  var commonObjs = this.commonObjs;
                  var objs = this.objs;
                  var fnId;
                  while (true) {
                    if (stepper !== void 0 && i === stepper.nextBreakPoint) {
                      stepper.breakIt(i, continueCallback);
                      return i;
                    }
                    fnId = fnArray[i];
                    if (fnId !== _util2.OPS.dependency) {
                      this[fnId].apply(this, argsArray[i]);
                    } else {
                      var _iterator = _createForOfIteratorHelper2(argsArray[i]), _step;
                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                          var depObjId = _step.value;
                          var objsPool = depObjId.startsWith("g_") ? commonObjs : objs;
                          if (!objsPool.has(depObjId)) {
                            objsPool.get(depObjId, continueCallback);
                            return i;
                          }
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }
                    }
                    i++;
                    if (i === argsArrayLen) {
                      return i;
                    }
                    if (chunkOperations && ++steps > EXECUTION_STEPS) {
                      if (Date.now() > endTime) {
                        continueCallback();
                        return i;
                      }
                      steps = 0;
                    }
                  }
                }
              }, {
                key: "endDrawing",
                value: function endDrawing() {
                  while (this.stateStack.length || this.current.activeSMask !== null) {
                    this.restore();
                  }
                  this.ctx.restore();
                  if (this.transparentCanvas) {
                    this.ctx = this.compositeCtx;
                    this.ctx.save();
                    this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                    this.ctx.drawImage(this.transparentCanvas, 0, 0);
                    this.ctx.restore();
                    this.transparentCanvas = null;
                  }
                  this.cachedCanvases.clear();
                  this.cachedPatterns.clear();
                  if (this.imageLayer) {
                    this.imageLayer.endLayout();
                  }
                }
              }, {
                key: "_scaleImage",
                value: function _scaleImage(img, inverseTransform) {
                  var width = img.width;
                  var height = img.height;
                  var widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);
                  var heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);
                  var paintWidth = width, paintHeight = height;
                  var tmpCanvasId = "prescale1";
                  var tmpCanvas, tmpCtx;
                  while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
                    var newWidth = paintWidth, newHeight = paintHeight;
                    if (widthScale > 2 && paintWidth > 1) {
                      newWidth = Math.ceil(paintWidth / 2);
                      widthScale /= paintWidth / newWidth;
                    }
                    if (heightScale > 2 && paintHeight > 1) {
                      newHeight = Math.ceil(paintHeight / 2);
                      heightScale /= paintHeight / newHeight;
                    }
                    tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
                    tmpCtx = tmpCanvas.context;
                    tmpCtx.clearRect(0, 0, newWidth, newHeight);
                    tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
                    img = tmpCanvas.canvas;
                    paintWidth = newWidth;
                    paintHeight = newHeight;
                    tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
                  }
                  return {
                    img,
                    paintWidth,
                    paintHeight
                  };
                }
              }, {
                key: "_createMaskCanvas",
                value: function _createMaskCanvas(img) {
                  var ctx = this.ctx;
                  var width = img.width, height = img.height;
                  var fillColor = this.current.fillColor;
                  var isPatternFill = this.current.patternFill;
                  var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                  var maskCtx = maskCanvas.context;
                  putBinaryImageMask(maskCtx, img);
                  var objToCanvas = ctx.mozCurrentTransform;
                  var maskToCanvas = _util2.Util.transform(objToCanvas, [1 / width, 0, 0, -1 / height, 0, 0]);
                  maskToCanvas = _util2.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);
                  var cord1 = _util2.Util.applyTransform([0, 0], maskToCanvas);
                  var cord2 = _util2.Util.applyTransform([width, height], maskToCanvas);
                  var rect = _util2.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);
                  var drawnWidth = Math.ceil(rect[2] - rect[0]);
                  var drawnHeight = Math.ceil(rect[3] - rect[1]);
                  var fillCanvas = this.cachedCanvases.getCanvas("fillCanvas", drawnWidth, drawnHeight, true);
                  var fillCtx = fillCanvas.context;
                  var offsetX = Math.min(cord1[0], cord2[0]);
                  var offsetY = Math.min(cord1[1], cord2[1]);
                  fillCtx.translate(-offsetX, -offsetY);
                  fillCtx.transform.apply(fillCtx, maskToCanvas);
                  var scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);
                  fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(fillCtx.mozCurrentTransform, img.interpolate);
                  fillCtx.drawImage(scaled.img, 0, 0, scaled.img.width, scaled.img.height, 0, 0, width, height);
                  fillCtx.globalCompositeOperation = "source-in";
                  var inverse = _util2.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);
                  fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, _pattern_helper.PathType.FILL) : fillColor;
                  fillCtx.fillRect(0, 0, width, height);
                  return {
                    canvas: fillCanvas.canvas,
                    offsetX: Math.round(offsetX),
                    offsetY: Math.round(offsetY)
                  };
                }
              }, {
                key: "setLineWidth",
                value: function setLineWidth(width) {
                  this.current.lineWidth = width;
                  this.ctx.lineWidth = width;
                }
              }, {
                key: "setLineCap",
                value: function setLineCap(style) {
                  this.ctx.lineCap = LINE_CAP_STYLES[style];
                }
              }, {
                key: "setLineJoin",
                value: function setLineJoin(style) {
                  this.ctx.lineJoin = LINE_JOIN_STYLES[style];
                }
              }, {
                key: "setMiterLimit",
                value: function setMiterLimit(limit) {
                  this.ctx.miterLimit = limit;
                }
              }, {
                key: "setDash",
                value: function setDash(dashArray, dashPhase) {
                  var ctx = this.ctx;
                  if (ctx.setLineDash !== void 0) {
                    ctx.setLineDash(dashArray);
                    ctx.lineDashOffset = dashPhase;
                  }
                }
              }, {
                key: "setRenderingIntent",
                value: function setRenderingIntent(intent) {
                }
              }, {
                key: "setFlatness",
                value: function setFlatness(flatness) {
                }
              }, {
                key: "setGState",
                value: function setGState(states) {
                  for (var i = 0, ii = states.length; i < ii; i++) {
                    var state = states[i];
                    var key = state[0];
                    var value = state[1];
                    switch (key) {
                      case "LW":
                        this.setLineWidth(value);
                        break;
                      case "LC":
                        this.setLineCap(value);
                        break;
                      case "LJ":
                        this.setLineJoin(value);
                        break;
                      case "ML":
                        this.setMiterLimit(value);
                        break;
                      case "D":
                        this.setDash(value[0], value[1]);
                        break;
                      case "RI":
                        this.setRenderingIntent(value);
                        break;
                      case "FL":
                        this.setFlatness(value);
                        break;
                      case "Font":
                        this.setFont(value[0], value[1]);
                        break;
                      case "CA":
                        this.current.strokeAlpha = state[1];
                        break;
                      case "ca":
                        this.current.fillAlpha = state[1];
                        this.ctx.globalAlpha = state[1];
                        break;
                      case "BM":
                        this.ctx.globalCompositeOperation = value;
                        break;
                      case "SMask":
                        this.current.activeSMask = value ? this.tempSMask : null;
                        this.tempSMask = null;
                        this.checkSMaskState();
                        break;
                      case "TR":
                        this.current.transferMaps = value;
                    }
                  }
                }
              }, {
                key: "checkSMaskState",
                value: function checkSMaskState() {
                  var inSMaskMode = !!this.suspendedCtx;
                  if (this.current.activeSMask && !inSMaskMode) {
                    this.beginSMaskMode();
                  } else if (!this.current.activeSMask && inSMaskMode) {
                    this.endSMaskMode();
                  }
                }
              }, {
                key: "beginSMaskMode",
                value: function beginSMaskMode() {
                  if (this.suspendedCtx) {
                    throw new Error("beginSMaskMode called while already in smask mode");
                  }
                  var drawnWidth = this.ctx.canvas.width;
                  var drawnHeight = this.ctx.canvas.height;
                  var cacheId = "smaskGroupAt" + this.groupLevel;
                  var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
                  this.suspendedCtx = this.ctx;
                  this.ctx = scratchCanvas.context;
                  var ctx = this.ctx;
                  ctx.setTransform.apply(ctx, this.suspendedCtx.mozCurrentTransform);
                  copyCtxState(this.suspendedCtx, ctx);
                  mirrorContextOperations(ctx, this.suspendedCtx);
                  this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
                }
              }, {
                key: "endSMaskMode",
                value: function endSMaskMode() {
                  if (!this.suspendedCtx) {
                    throw new Error("endSMaskMode called while not in smask mode");
                  }
                  this.ctx._removeMirroring();
                  copyCtxState(this.ctx, this.suspendedCtx);
                  this.ctx = this.suspendedCtx;
                  this.current.activeSMask = null;
                  this.suspendedCtx = null;
                }
              }, {
                key: "compose",
                value: function compose(dirtyBox) {
                  if (!this.current.activeSMask) {
                    return;
                  }
                  if (!dirtyBox) {
                    dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
                  } else {
                    dirtyBox[0] = Math.floor(dirtyBox[0]);
                    dirtyBox[1] = Math.floor(dirtyBox[1]);
                    dirtyBox[2] = Math.ceil(dirtyBox[2]);
                    dirtyBox[3] = Math.ceil(dirtyBox[3]);
                  }
                  var smask = this.current.activeSMask;
                  var suspendedCtx = this.suspendedCtx;
                  composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
                  this.ctx.save();
                  this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                  this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
                  this.ctx.restore();
                }
              }, {
                key: "save",
                value: function save() {
                  this.ctx.save();
                  var old = this.current;
                  this.stateStack.push(old);
                  this.current = old.clone();
                }
              }, {
                key: "restore",
                value: function restore() {
                  if (this.stateStack.length === 0 && this.current.activeSMask) {
                    this.endSMaskMode();
                  }
                  if (this.stateStack.length !== 0) {
                    this.current = this.stateStack.pop();
                    this.ctx.restore();
                    this.checkSMaskState();
                    this.pendingClip = null;
                    this._cachedGetSinglePixelWidth = null;
                  }
                }
              }, {
                key: "transform",
                value: function transform(a, b, c, d, e, f) {
                  this.ctx.transform(a, b, c, d, e, f);
                  this._cachedGetSinglePixelWidth = null;
                }
              }, {
                key: "constructPath",
                value: function constructPath(ops, args) {
                  var ctx = this.ctx;
                  var current = this.current;
                  var x = current.x, y = current.y;
                  var startX, startY;
                  for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
                    switch (ops[i] | 0) {
                      case _util2.OPS.rectangle:
                        x = args[j++];
                        y = args[j++];
                        var width = args[j++];
                        var height = args[j++];
                        var xw = x + width;
                        var yh = y + height;
                        ctx.moveTo(x, y);
                        if (width === 0 || height === 0) {
                          ctx.lineTo(xw, yh);
                        } else {
                          ctx.lineTo(xw, y);
                          ctx.lineTo(xw, yh);
                          ctx.lineTo(x, yh);
                        }
                        current.updatePathMinMax(ctx.mozCurrentTransform, x, y);
                        current.updatePathMinMax(ctx.mozCurrentTransform, xw, yh);
                        ctx.closePath();
                        break;
                      case _util2.OPS.moveTo:
                        x = args[j++];
                        y = args[j++];
                        ctx.moveTo(x, y);
                        current.updatePathMinMax(ctx.mozCurrentTransform, x, y);
                        break;
                      case _util2.OPS.lineTo:
                        x = args[j++];
                        y = args[j++];
                        ctx.lineTo(x, y);
                        current.updatePathMinMax(ctx.mozCurrentTransform, x, y);
                        break;
                      case _util2.OPS.curveTo:
                        startX = x;
                        startY = y;
                        x = args[j + 4];
                        y = args[j + 5];
                        ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                        current.updateCurvePathMinMax(ctx.mozCurrentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                        j += 6;
                        break;
                      case _util2.OPS.curveTo2:
                        startX = x;
                        startY = y;
                        ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                        current.updateCurvePathMinMax(ctx.mozCurrentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                        x = args[j + 2];
                        y = args[j + 3];
                        j += 4;
                        break;
                      case _util2.OPS.curveTo3:
                        startX = x;
                        startY = y;
                        x = args[j + 2];
                        y = args[j + 3];
                        ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                        current.updateCurvePathMinMax(ctx.mozCurrentTransform, startX, startY, args[j], args[j + 1], x, y, x, y);
                        j += 4;
                        break;
                      case _util2.OPS.closePath:
                        ctx.closePath();
                        break;
                    }
                  }
                  current.setCurrentPoint(x, y);
                }
              }, {
                key: "closePath",
                value: function closePath() {
                  this.ctx.closePath();
                }
              }, {
                key: "stroke",
                value: function stroke(consumePath) {
                  consumePath = typeof consumePath !== "undefined" ? consumePath : true;
                  var ctx = this.ctx;
                  var strokeColor = this.current.strokeColor;
                  ctx.globalAlpha = this.current.strokeAlpha;
                  if (this.contentVisible) {
                    if (_typeof3(strokeColor) === "object" && strokeColor !== null && strokeColor !== void 0 && strokeColor.getPattern) {
                      var lineWidth = this.getSinglePixelWidth();
                      ctx.save();
                      ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.STROKE);
                      ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);
                      ctx.stroke();
                      ctx.restore();
                    } else {
                      var _lineWidth = this.getSinglePixelWidth();
                      if (_lineWidth < 0 && -_lineWidth >= this.current.lineWidth) {
                        ctx.save();
                        ctx.resetTransform();
                        ctx.lineWidth = Math.round(this._combinedScaleFactor);
                        ctx.stroke();
                        ctx.restore();
                      } else {
                        ctx.lineWidth = Math.max(_lineWidth, this.current.lineWidth);
                        ctx.stroke();
                      }
                    }
                  }
                  if (consumePath) {
                    this.consumePath(this.current.getClippedPathBoundingBox());
                  }
                  ctx.globalAlpha = this.current.fillAlpha;
                }
              }, {
                key: "closeStroke",
                value: function closeStroke() {
                  this.closePath();
                  this.stroke();
                }
              }, {
                key: "fill",
                value: function fill(consumePath) {
                  consumePath = typeof consumePath !== "undefined" ? consumePath : true;
                  var ctx = this.ctx;
                  var fillColor = this.current.fillColor;
                  var isPatternFill = this.current.patternFill;
                  var needRestore = false;
                  if (isPatternFill) {
                    ctx.save();
                    ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL);
                    needRestore = true;
                  }
                  var intersect = this.current.getClippedPathBoundingBox();
                  if (this.contentVisible && intersect !== null) {
                    if (this.pendingEOFill) {
                      ctx.fill("evenodd");
                      this.pendingEOFill = false;
                    } else {
                      ctx.fill();
                    }
                  }
                  if (needRestore) {
                    ctx.restore();
                  }
                  if (consumePath) {
                    this.consumePath(intersect);
                  }
                }
              }, {
                key: "eoFill",
                value: function eoFill() {
                  this.pendingEOFill = true;
                  this.fill();
                }
              }, {
                key: "fillStroke",
                value: function fillStroke() {
                  this.fill(false);
                  this.stroke(false);
                  this.consumePath();
                }
              }, {
                key: "eoFillStroke",
                value: function eoFillStroke() {
                  this.pendingEOFill = true;
                  this.fillStroke();
                }
              }, {
                key: "closeFillStroke",
                value: function closeFillStroke() {
                  this.closePath();
                  this.fillStroke();
                }
              }, {
                key: "closeEOFillStroke",
                value: function closeEOFillStroke() {
                  this.pendingEOFill = true;
                  this.closePath();
                  this.fillStroke();
                }
              }, {
                key: "endPath",
                value: function endPath() {
                  this.consumePath();
                }
              }, {
                key: "clip",
                value: function clip() {
                  this.pendingClip = NORMAL_CLIP;
                }
              }, {
                key: "eoClip",
                value: function eoClip() {
                  this.pendingClip = EO_CLIP;
                }
              }, {
                key: "beginText",
                value: function beginText() {
                  this.current.textMatrix = _util2.IDENTITY_MATRIX;
                  this.current.textMatrixScale = 1;
                  this.current.x = this.current.lineX = 0;
                  this.current.y = this.current.lineY = 0;
                }
              }, {
                key: "endText",
                value: function endText() {
                  var paths = this.pendingTextPaths;
                  var ctx = this.ctx;
                  if (paths === void 0) {
                    ctx.beginPath();
                    return;
                  }
                  ctx.save();
                  ctx.beginPath();
                  for (var i = 0; i < paths.length; i++) {
                    var path = paths[i];
                    ctx.setTransform.apply(ctx, path.transform);
                    ctx.translate(path.x, path.y);
                    path.addToPath(ctx, path.fontSize);
                  }
                  ctx.restore();
                  ctx.clip();
                  ctx.beginPath();
                  delete this.pendingTextPaths;
                }
              }, {
                key: "setCharSpacing",
                value: function setCharSpacing(spacing) {
                  this.current.charSpacing = spacing;
                }
              }, {
                key: "setWordSpacing",
                value: function setWordSpacing(spacing) {
                  this.current.wordSpacing = spacing;
                }
              }, {
                key: "setHScale",
                value: function setHScale(scale) {
                  this.current.textHScale = scale / 100;
                }
              }, {
                key: "setLeading",
                value: function setLeading(leading) {
                  this.current.leading = -leading;
                }
              }, {
                key: "setFont",
                value: function setFont(fontRefName, size) {
                  var fontObj = this.commonObjs.get(fontRefName);
                  var current = this.current;
                  if (!fontObj) {
                    throw new Error("Can't find font for ".concat(fontRefName));
                  }
                  current.fontMatrix = fontObj.fontMatrix || _util2.FONT_IDENTITY_MATRIX;
                  if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
                    (0, _util2.warn)("Invalid font matrix for font " + fontRefName);
                  }
                  if (size < 0) {
                    size = -size;
                    current.fontDirection = -1;
                  } else {
                    current.fontDirection = 1;
                  }
                  this.current.font = fontObj;
                  this.current.fontSize = size;
                  if (fontObj.isType3Font) {
                    return;
                  }
                  var name = fontObj.loadedName || "sans-serif";
                  var bold = "normal";
                  if (fontObj.black) {
                    bold = "900";
                  } else if (fontObj.bold) {
                    bold = "bold";
                  }
                  var italic = fontObj.italic ? "italic" : "normal";
                  var typeface = '"'.concat(name, '", ').concat(fontObj.fallbackName);
                  var browserFontSize = size;
                  if (size < MIN_FONT_SIZE) {
                    browserFontSize = MIN_FONT_SIZE;
                  } else if (size > MAX_FONT_SIZE) {
                    browserFontSize = MAX_FONT_SIZE;
                  }
                  this.current.fontSizeScale = size / browserFontSize;
                  this.ctx.font = "".concat(italic, " ").concat(bold, " ").concat(browserFontSize, "px ").concat(typeface);
                }
              }, {
                key: "setTextRenderingMode",
                value: function setTextRenderingMode(mode) {
                  this.current.textRenderingMode = mode;
                }
              }, {
                key: "setTextRise",
                value: function setTextRise(rise) {
                  this.current.textRise = rise;
                }
              }, {
                key: "moveText",
                value: function moveText(x, y) {
                  this.current.x = this.current.lineX += x;
                  this.current.y = this.current.lineY += y;
                }
              }, {
                key: "setLeadingMoveText",
                value: function setLeadingMoveText(x, y) {
                  this.setLeading(-y);
                  this.moveText(x, y);
                }
              }, {
                key: "setTextMatrix",
                value: function setTextMatrix(a, b, c, d, e, f) {
                  this.current.textMatrix = [a, b, c, d, e, f];
                  this.current.textMatrixScale = Math.hypot(a, b);
                  this.current.x = this.current.lineX = 0;
                  this.current.y = this.current.lineY = 0;
                }
              }, {
                key: "nextLine",
                value: function nextLine() {
                  this.moveText(0, this.current.leading);
                }
              }, {
                key: "paintChar",
                value: function paintChar(character, x, y, patternTransform, resetLineWidthToOne) {
                  var ctx = this.ctx;
                  var current = this.current;
                  var font = current.font;
                  var textRenderingMode = current.textRenderingMode;
                  var fontSize = current.fontSize / current.fontSizeScale;
                  var fillStrokeMode = textRenderingMode & _util2.TextRenderingMode.FILL_STROKE_MASK;
                  var isAddToPathSet = !!(textRenderingMode & _util2.TextRenderingMode.ADD_TO_PATH_FLAG);
                  var patternFill = current.patternFill && !font.missingFile;
                  var addToPath;
                  if (font.disableFontFace || isAddToPathSet || patternFill) {
                    addToPath = font.getPathGenerator(this.commonObjs, character);
                  }
                  if (font.disableFontFace || patternFill) {
                    ctx.save();
                    ctx.translate(x, y);
                    ctx.beginPath();
                    addToPath(ctx, fontSize);
                    if (patternTransform) {
                      ctx.setTransform.apply(ctx, patternTransform);
                    }
                    if (fillStrokeMode === _util2.TextRenderingMode.FILL || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      ctx.fill();
                    }
                    if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      if (resetLineWidthToOne) {
                        ctx.resetTransform();
                        ctx.lineWidth = Math.round(this._combinedScaleFactor);
                      }
                      ctx.stroke();
                    }
                    ctx.restore();
                  } else {
                    if (fillStrokeMode === _util2.TextRenderingMode.FILL || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      ctx.fillText(character, x, y);
                    }
                    if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      if (resetLineWidthToOne) {
                        ctx.save();
                        ctx.moveTo(x, y);
                        ctx.resetTransform();
                        ctx.lineWidth = Math.round(this._combinedScaleFactor);
                        ctx.strokeText(character, 0, 0);
                        ctx.restore();
                      } else {
                        ctx.strokeText(character, x, y);
                      }
                    }
                  }
                  if (isAddToPathSet) {
                    var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
                    paths.push({
                      transform: ctx.mozCurrentTransform,
                      x,
                      y,
                      fontSize,
                      addToPath
                    });
                  }
                }
              }, {
                key: "isFontSubpixelAAEnabled",
                get: function get2() {
                  var _this$cachedCanvases$ = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10), ctx = _this$cachedCanvases$.context;
                  ctx.scale(1.5, 1);
                  ctx.fillText("I", 0, 10);
                  var data = ctx.getImageData(0, 0, 10, 10).data;
                  var enabled = false;
                  for (var i = 3; i < data.length; i += 4) {
                    if (data[i] > 0 && data[i] < 255) {
                      enabled = true;
                      break;
                    }
                  }
                  return (0, _util2.shadow)(this, "isFontSubpixelAAEnabled", enabled);
                }
              }, {
                key: "showText",
                value: function showText(glyphs) {
                  var current = this.current;
                  var font = current.font;
                  if (font.isType3Font) {
                    return this.showType3Text(glyphs);
                  }
                  var fontSize = current.fontSize;
                  if (fontSize === 0) {
                    return void 0;
                  }
                  var ctx = this.ctx;
                  var fontSizeScale = current.fontSizeScale;
                  var charSpacing = current.charSpacing;
                  var wordSpacing = current.wordSpacing;
                  var fontDirection = current.fontDirection;
                  var textHScale = current.textHScale * fontDirection;
                  var glyphsLength = glyphs.length;
                  var vertical = font.vertical;
                  var spacingDir = vertical ? 1 : -1;
                  var defaultVMetrics = font.defaultVMetrics;
                  var widthAdvanceScale = fontSize * current.fontMatrix[0];
                  var simpleFillText = current.textRenderingMode === _util2.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
                  ctx.save();
                  ctx.transform.apply(ctx, current.textMatrix);
                  ctx.translate(current.x, current.y + current.textRise);
                  if (fontDirection > 0) {
                    ctx.scale(textHScale, -1);
                  } else {
                    ctx.scale(textHScale, 1);
                  }
                  var patternTransform;
                  if (current.patternFill) {
                    ctx.save();
                    var pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL);
                    patternTransform = ctx.mozCurrentTransform;
                    ctx.restore();
                    ctx.fillStyle = pattern;
                  }
                  var lineWidth = current.lineWidth;
                  var resetLineWidthToOne = false;
                  var scale = current.textMatrixScale;
                  if (scale === 0 || lineWidth === 0) {
                    var fillStrokeMode = current.textRenderingMode & _util2.TextRenderingMode.FILL_STROKE_MASK;
                    if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      this._cachedGetSinglePixelWidth = null;
                      lineWidth = this.getSinglePixelWidth();
                      resetLineWidthToOne = lineWidth < 0;
                    }
                  } else {
                    lineWidth /= scale;
                  }
                  if (fontSizeScale !== 1) {
                    ctx.scale(fontSizeScale, fontSizeScale);
                    lineWidth /= fontSizeScale;
                  }
                  ctx.lineWidth = lineWidth;
                  var x = 0, i;
                  for (i = 0; i < glyphsLength; ++i) {
                    var glyph = glyphs[i];
                    if ((0, _util2.isNum)(glyph)) {
                      x += spacingDir * glyph * fontSize / 1e3;
                      continue;
                    }
                    var restoreNeeded = false;
                    var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                    var character = glyph.fontChar;
                    var accent = glyph.accent;
                    var scaledX = void 0, scaledY = void 0;
                    var width = glyph.width;
                    if (vertical) {
                      var vmetric = glyph.vmetric || defaultVMetrics;
                      var vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
                      var vy = vmetric[2] * widthAdvanceScale;
                      width = vmetric ? -vmetric[0] : width;
                      scaledX = vx / fontSizeScale;
                      scaledY = (x + vy) / fontSizeScale;
                    } else {
                      scaledX = x / fontSizeScale;
                      scaledY = 0;
                    }
                    if (font.remeasure && width > 0) {
                      var measuredWidth = ctx.measureText(character).width * 1e3 / fontSize * fontSizeScale;
                      if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
                        var characterScaleX = width / measuredWidth;
                        restoreNeeded = true;
                        ctx.save();
                        ctx.scale(characterScaleX, 1);
                        scaledX /= characterScaleX;
                      } else if (width !== measuredWidth) {
                        scaledX += (width - measuredWidth) / 2e3 * fontSize / fontSizeScale;
                      }
                    }
                    if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
                      if (simpleFillText && !accent) {
                        ctx.fillText(character, scaledX, scaledY);
                      } else {
                        this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);
                        if (accent) {
                          var scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                          var scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                          this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);
                        }
                      }
                    }
                    var charWidth = void 0;
                    if (vertical) {
                      charWidth = width * widthAdvanceScale - spacing * fontDirection;
                    } else {
                      charWidth = width * widthAdvanceScale + spacing * fontDirection;
                    }
                    x += charWidth;
                    if (restoreNeeded) {
                      ctx.restore();
                    }
                  }
                  if (vertical) {
                    current.y -= x;
                  } else {
                    current.x += x * textHScale;
                  }
                  ctx.restore();
                  this.compose();
                  return void 0;
                }
              }, {
                key: "showType3Text",
                value: function showType3Text(glyphs) {
                  var ctx = this.ctx;
                  var current = this.current;
                  var font = current.font;
                  var fontSize = current.fontSize;
                  var fontDirection = current.fontDirection;
                  var spacingDir = font.vertical ? 1 : -1;
                  var charSpacing = current.charSpacing;
                  var wordSpacing = current.wordSpacing;
                  var textHScale = current.textHScale * fontDirection;
                  var fontMatrix = current.fontMatrix || _util2.FONT_IDENTITY_MATRIX;
                  var glyphsLength = glyphs.length;
                  var isTextInvisible = current.textRenderingMode === _util2.TextRenderingMode.INVISIBLE;
                  var i, glyph, width, spacingLength;
                  if (isTextInvisible || fontSize === 0) {
                    return;
                  }
                  this._cachedGetSinglePixelWidth = null;
                  ctx.save();
                  ctx.transform.apply(ctx, current.textMatrix);
                  ctx.translate(current.x, current.y);
                  ctx.scale(textHScale, fontDirection);
                  for (i = 0; i < glyphsLength; ++i) {
                    glyph = glyphs[i];
                    if ((0, _util2.isNum)(glyph)) {
                      spacingLength = spacingDir * glyph * fontSize / 1e3;
                      this.ctx.translate(spacingLength, 0);
                      current.x += spacingLength * textHScale;
                      continue;
                    }
                    var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                    var operatorList = font.charProcOperatorList[glyph.operatorListId];
                    if (!operatorList) {
                      (0, _util2.warn)('Type3 character "'.concat(glyph.operatorListId, '" is not available.'));
                      continue;
                    }
                    if (this.contentVisible) {
                      this.processingType3 = glyph;
                      this.save();
                      ctx.scale(fontSize, fontSize);
                      ctx.transform.apply(ctx, fontMatrix);
                      this.executeOperatorList(operatorList);
                      this.restore();
                    }
                    var transformed = _util2.Util.applyTransform([glyph.width, 0], fontMatrix);
                    width = transformed[0] * fontSize + spacing;
                    ctx.translate(width, 0);
                    current.x += width * textHScale;
                  }
                  ctx.restore();
                  this.processingType3 = null;
                }
              }, {
                key: "setCharWidth",
                value: function setCharWidth(xWidth, yWidth) {
                }
              }, {
                key: "setCharWidthAndBounds",
                value: function setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
                  this.ctx.rect(llx, lly, urx - llx, ury - lly);
                  this.clip();
                  this.endPath();
                }
              }, {
                key: "getColorN_Pattern",
                value: function getColorN_Pattern(IR) {
                  var _this = this;
                  var pattern;
                  if (IR[0] === "TilingPattern") {
                    var color = IR[1];
                    var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();
                    var canvasGraphicsFactory = {
                      createCanvasGraphics: function createCanvasGraphics(ctx) {
                        return new CanvasGraphics2(ctx, _this.commonObjs, _this.objs, _this.canvasFactory);
                      }
                    };
                    pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
                  } else {
                    pattern = this._getPattern(IR[1], IR[2]);
                  }
                  return pattern;
                }
              }, {
                key: "setStrokeColorN",
                value: function setStrokeColorN() {
                  this.current.strokeColor = this.getColorN_Pattern(arguments);
                }
              }, {
                key: "setFillColorN",
                value: function setFillColorN() {
                  this.current.fillColor = this.getColorN_Pattern(arguments);
                  this.current.patternFill = true;
                }
              }, {
                key: "setStrokeRGBColor",
                value: function setStrokeRGBColor(r, g, b) {
                  var color = _util2.Util.makeHexColor(r, g, b);
                  this.ctx.strokeStyle = color;
                  this.current.strokeColor = color;
                }
              }, {
                key: "setFillRGBColor",
                value: function setFillRGBColor(r, g, b) {
                  var color = _util2.Util.makeHexColor(r, g, b);
                  this.ctx.fillStyle = color;
                  this.current.fillColor = color;
                  this.current.patternFill = false;
                }
              }, {
                key: "_getPattern",
                value: function _getPattern(objId) {
                  var matrix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  var pattern;
                  if (this.cachedPatterns.has(objId)) {
                    pattern = this.cachedPatterns.get(objId);
                  } else {
                    pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId));
                    this.cachedPatterns.set(objId, pattern);
                  }
                  if (matrix) {
                    pattern.matrix = matrix;
                  }
                  return pattern;
                }
              }, {
                key: "shadingFill",
                value: function shadingFill(objId) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var ctx = this.ctx;
                  this.save();
                  var pattern = this._getPattern(objId);
                  ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.SHADING);
                  var inv = ctx.mozCurrentTransformInverse;
                  if (inv) {
                    var canvas = ctx.canvas;
                    var width = canvas.width;
                    var height = canvas.height;
                    var bl = _util2.Util.applyTransform([0, 0], inv);
                    var br = _util2.Util.applyTransform([0, height], inv);
                    var ul = _util2.Util.applyTransform([width, 0], inv);
                    var ur = _util2.Util.applyTransform([width, height], inv);
                    var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                    var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                    var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                    var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                    this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
                  } else {
                    this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                  }
                  this.compose(this.current.getClippedPathBoundingBox());
                  this.restore();
                }
              }, {
                key: "beginInlineImage",
                value: function beginInlineImage() {
                  (0, _util2.unreachable)("Should not call beginInlineImage");
                }
              }, {
                key: "beginImageData",
                value: function beginImageData() {
                  (0, _util2.unreachable)("Should not call beginImageData");
                }
              }, {
                key: "paintFormXObjectBegin",
                value: function paintFormXObjectBegin(matrix, bbox) {
                  if (!this.contentVisible) {
                    return;
                  }
                  this.save();
                  this.baseTransformStack.push(this.baseTransform);
                  if (Array.isArray(matrix) && matrix.length === 6) {
                    this.transform.apply(this, matrix);
                  }
                  this.baseTransform = this.ctx.mozCurrentTransform;
                  if (bbox) {
                    var width = bbox[2] - bbox[0];
                    var height = bbox[3] - bbox[1];
                    this.ctx.rect(bbox[0], bbox[1], width, height);
                    this.current.updatePathMinMax(this.ctx.mozCurrentTransform, bbox[0], bbox[1]);
                    this.current.updatePathMinMax(this.ctx.mozCurrentTransform, bbox[2], bbox[3]);
                    this.clip();
                    this.endPath();
                  }
                }
              }, {
                key: "paintFormXObjectEnd",
                value: function paintFormXObjectEnd() {
                  if (!this.contentVisible) {
                    return;
                  }
                  this.restore();
                  this.baseTransform = this.baseTransformStack.pop();
                }
              }, {
                key: "beginGroup",
                value: function beginGroup(group) {
                  if (!this.contentVisible) {
                    return;
                  }
                  this.save();
                  var suspendedCtx = this.suspendedCtx;
                  if (this.current.activeSMask) {
                    this.suspendedCtx = null;
                    this.current.activeSMask = null;
                  }
                  var currentCtx = this.ctx;
                  if (!group.isolated) {
                    (0, _util2.info)("TODO: Support non-isolated groups.");
                  }
                  if (group.knockout) {
                    (0, _util2.warn)("Knockout groups not supported.");
                  }
                  var currentTransform = currentCtx.mozCurrentTransform;
                  if (group.matrix) {
                    currentCtx.transform.apply(currentCtx, group.matrix);
                  }
                  if (!group.bbox) {
                    throw new Error("Bounding box is required.");
                  }
                  var bounds = _util2.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);
                  var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
                  bounds = _util2.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
                  var offsetX = Math.floor(bounds[0]);
                  var offsetY = Math.floor(bounds[1]);
                  var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
                  var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
                  var scaleX = 1, scaleY = 1;
                  if (drawnWidth > MAX_GROUP_SIZE) {
                    scaleX = drawnWidth / MAX_GROUP_SIZE;
                    drawnWidth = MAX_GROUP_SIZE;
                  }
                  if (drawnHeight > MAX_GROUP_SIZE) {
                    scaleY = drawnHeight / MAX_GROUP_SIZE;
                    drawnHeight = MAX_GROUP_SIZE;
                  }
                  this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
                  var cacheId = "groupAt" + this.groupLevel;
                  if (group.smask) {
                    cacheId += "_smask_" + this.smaskCounter++ % 2;
                  }
                  var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);
                  var groupCtx = scratchCanvas.context;
                  groupCtx.scale(1 / scaleX, 1 / scaleY);
                  groupCtx.translate(-offsetX, -offsetY);
                  groupCtx.transform.apply(groupCtx, currentTransform);
                  if (group.smask) {
                    this.smaskStack.push({
                      canvas: scratchCanvas.canvas,
                      context: groupCtx,
                      offsetX,
                      offsetY,
                      scaleX,
                      scaleY,
                      subtype: group.smask.subtype,
                      backdrop: group.smask.backdrop,
                      transferMap: group.smask.transferMap || null,
                      startTransformInverse: null
                    });
                  } else {
                    currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                    currentCtx.translate(offsetX, offsetY);
                    currentCtx.scale(scaleX, scaleY);
                    currentCtx.save();
                  }
                  copyCtxState(currentCtx, groupCtx);
                  this.ctx = groupCtx;
                  this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
                  this.groupStack.push({
                    ctx: currentCtx,
                    suspendedCtx
                  });
                  this.groupLevel++;
                }
              }, {
                key: "endGroup",
                value: function endGroup(group) {
                  if (!this.contentVisible) {
                    return;
                  }
                  this.groupLevel--;
                  var groupCtx = this.ctx;
                  var _this$groupStack$pop = this.groupStack.pop(), ctx = _this$groupStack$pop.ctx, suspendedCtx = _this$groupStack$pop.suspendedCtx;
                  this.ctx = ctx;
                  this.ctx.imageSmoothingEnabled = false;
                  if (suspendedCtx) {
                    this.suspendedCtx = suspendedCtx;
                  }
                  if (group.smask) {
                    this.tempSMask = this.smaskStack.pop();
                    this.restore();
                  } else {
                    this.ctx.restore();
                    var currentMtx = this.ctx.mozCurrentTransform;
                    this.restore();
                    this.ctx.save();
                    this.ctx.setTransform.apply(this.ctx, currentMtx);
                    var dirtyBox = _util2.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);
                    this.ctx.drawImage(groupCtx.canvas, 0, 0);
                    this.ctx.restore();
                    this.compose(dirtyBox);
                  }
                }
              }, {
                key: "beginAnnotations",
                value: function beginAnnotations() {
                  this.save();
                  if (this.baseTransform) {
                    this.ctx.setTransform.apply(this.ctx, this.baseTransform);
                  }
                }
              }, {
                key: "endAnnotations",
                value: function endAnnotations() {
                  this.restore();
                }
              }, {
                key: "beginAnnotation",
                value: function beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {
                  this.save();
                  if (Array.isArray(rect) && rect.length === 4) {
                    var width = rect[2] - rect[0];
                    var height = rect[3] - rect[1];
                    if (hasOwnCanvas && this.annotationCanvasMap) {
                      transform = transform.slice();
                      transform[4] -= rect[0];
                      transform[5] -= rect[1];
                      rect = rect.slice();
                      rect[0] = rect[1] = 0;
                      rect[2] = width;
                      rect[3] = height;
                      var _Util$singularValueDe = _util2.Util.singularValueDecompose2dScale(this.ctx.mozCurrentTransform), _Util$singularValueDe2 = _slicedToArray3(_Util$singularValueDe, 2), scaleX = _Util$singularValueDe2[0], scaleY = _Util$singularValueDe2[1];
                      var viewportScale = this.viewportScale;
                      var canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);
                      var canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);
                      this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);
                      var _this$annotationCanva = this.annotationCanvas, canvas = _this$annotationCanva.canvas, context = _this$annotationCanva.context;
                      canvas.style.width = "calc(".concat(width, "px * var(--viewport-scale-factor))");
                      canvas.style.height = "calc(".concat(height, "px * var(--viewport-scale-factor))");
                      this.annotationCanvasMap.set(id, canvas);
                      this.annotationCanvas.savedCtx = this.ctx;
                      this.ctx = context;
                      this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);
                      addContextCurrentTransform(this.ctx);
                      resetCtxToDefault(this.ctx);
                    } else {
                      resetCtxToDefault(this.ctx);
                      this.ctx.rect(rect[0], rect[1], width, height);
                      this.clip();
                      this.endPath();
                    }
                  }
                  this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
                  this.transform.apply(this, transform);
                  this.transform.apply(this, matrix);
                }
              }, {
                key: "endAnnotation",
                value: function endAnnotation() {
                  if (this.annotationCanvas) {
                    this.ctx = this.annotationCanvas.savedCtx;
                    delete this.annotationCanvas.savedCtx;
                    delete this.annotationCanvas;
                  }
                  this.restore();
                }
              }, {
                key: "paintImageMaskXObject",
                value: function paintImageMaskXObject(img) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var ctx = this.ctx;
                  var width = img.width, height = img.height;
                  var glyph = this.processingType3;
                  if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === void 0) {
                    if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {
                      glyph.compiled = compileType3Glyph({
                        data: img.data,
                        width,
                        height
                      });
                    } else {
                      glyph.compiled = null;
                    }
                  }
                  if (glyph !== null && glyph !== void 0 && glyph.compiled) {
                    glyph.compiled(ctx);
                    return;
                  }
                  var mask = this._createMaskCanvas(img);
                  var maskCanvas = mask.canvas;
                  ctx.save();
                  ctx.setTransform(1, 0, 0, 1, 0, 0);
                  ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
                  ctx.restore();
                  this.compose();
                }
              }, {
                key: "paintImageMaskXObjectRepeat",
                value: function paintImageMaskXObjectRepeat(imgData, scaleX) {
                  var skewX = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                  var skewY = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
                  var scaleY = arguments.length > 4 ? arguments[4] : void 0;
                  var positions = arguments.length > 5 ? arguments[5] : void 0;
                  if (!this.contentVisible) {
                    return;
                  }
                  var ctx = this.ctx;
                  ctx.save();
                  var currentTransform = ctx.mozCurrentTransform;
                  ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);
                  var mask = this._createMaskCanvas(imgData);
                  ctx.setTransform(1, 0, 0, 1, 0, 0);
                  for (var i = 0, ii = positions.length; i < ii; i += 2) {
                    var trans = _util2.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);
                    var _Util$applyTransform3 = _util2.Util.applyTransform([0, 0], trans), _Util$applyTransform4 = _slicedToArray3(_Util$applyTransform3, 2), x = _Util$applyTransform4[0], y = _Util$applyTransform4[1];
                    ctx.drawImage(mask.canvas, x, y);
                  }
                  ctx.restore();
                  this.compose();
                }
              }, {
                key: "paintImageMaskXObjectGroup",
                value: function paintImageMaskXObjectGroup(images) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var ctx = this.ctx;
                  var fillColor = this.current.fillColor;
                  var isPatternFill = this.current.patternFill;
                  for (var i = 0, ii = images.length; i < ii; i++) {
                    var image = images[i];
                    var width = image.width, height = image.height;
                    var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                    var maskCtx = maskCanvas.context;
                    maskCtx.save();
                    putBinaryImageMask(maskCtx, image);
                    maskCtx.globalCompositeOperation = "source-in";
                    maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, _pattern_helper.PathType.FILL) : fillColor;
                    maskCtx.fillRect(0, 0, width, height);
                    maskCtx.restore();
                    ctx.save();
                    ctx.transform.apply(ctx, image.transform);
                    ctx.scale(1, -1);
                    ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                    ctx.restore();
                  }
                  this.compose();
                }
              }, {
                key: "paintImageXObject",
                value: function paintImageXObject(objId) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);
                  if (!imgData) {
                    (0, _util2.warn)("Dependent image isn't ready yet");
                    return;
                  }
                  this.paintInlineImageXObject(imgData);
                }
              }, {
                key: "paintImageXObjectRepeat",
                value: function paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);
                  if (!imgData) {
                    (0, _util2.warn)("Dependent image isn't ready yet");
                    return;
                  }
                  var width = imgData.width;
                  var height = imgData.height;
                  var map = [];
                  for (var i = 0, ii = positions.length; i < ii; i += 2) {
                    map.push({
                      transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
                      x: 0,
                      y: 0,
                      w: width,
                      h: height
                    });
                  }
                  this.paintInlineImageXObjectGroup(imgData, map);
                }
              }, {
                key: "paintInlineImageXObject",
                value: function paintInlineImageXObject(imgData) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var width = imgData.width;
                  var height = imgData.height;
                  var ctx = this.ctx;
                  this.save();
                  ctx.scale(1 / width, -1 / height);
                  var imgToPaint;
                  if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
                    imgToPaint = imgData;
                  } else {
                    var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                    var tmpCtx = tmpCanvas.context;
                    putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);
                    imgToPaint = tmpCanvas.canvas;
                  }
                  var scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);
                  ctx.imageSmoothingEnabled = getImageSmoothingEnabled(ctx.mozCurrentTransform, imgData.interpolate);
                  ctx.drawImage(scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);
                  if (this.imageLayer) {
                    var position = this.getCanvasPosition(0, -height);
                    this.imageLayer.appendImage({
                      imgData,
                      left: position[0],
                      top: position[1],
                      width: width / ctx.mozCurrentTransformInverse[0],
                      height: height / ctx.mozCurrentTransformInverse[3]
                    });
                  }
                  this.compose();
                  this.restore();
                }
              }, {
                key: "paintInlineImageXObjectGroup",
                value: function paintInlineImageXObjectGroup(imgData, map) {
                  if (!this.contentVisible) {
                    return;
                  }
                  var ctx = this.ctx;
                  var w = imgData.width;
                  var h = imgData.height;
                  var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
                  var tmpCtx = tmpCanvas.context;
                  putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);
                  for (var i = 0, ii = map.length; i < ii; i++) {
                    var entry = map[i];
                    ctx.save();
                    ctx.transform.apply(ctx, entry.transform);
                    ctx.scale(1, -1);
                    ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
                    if (this.imageLayer) {
                      var position = this.getCanvasPosition(entry.x, entry.y);
                      this.imageLayer.appendImage({
                        imgData,
                        left: position[0],
                        top: position[1],
                        width: w,
                        height: h
                      });
                    }
                    ctx.restore();
                  }
                  this.compose();
                }
              }, {
                key: "paintSolidColorImageMask",
                value: function paintSolidColorImageMask() {
                  if (!this.contentVisible) {
                    return;
                  }
                  this.ctx.fillRect(0, 0, 1, 1);
                  this.compose();
                }
              }, {
                key: "markPoint",
                value: function markPoint(tag) {
                }
              }, {
                key: "markPointProps",
                value: function markPointProps(tag, properties) {
                }
              }, {
                key: "beginMarkedContent",
                value: function beginMarkedContent(tag) {
                  this.markedContentStack.push({
                    visible: true
                  });
                }
              }, {
                key: "beginMarkedContentProps",
                value: function beginMarkedContentProps(tag, properties) {
                  if (tag === "OC") {
                    this.markedContentStack.push({
                      visible: this.optionalContentConfig.isVisible(properties)
                    });
                  } else {
                    this.markedContentStack.push({
                      visible: true
                    });
                  }
                  this.contentVisible = this.isContentVisible();
                }
              }, {
                key: "endMarkedContent",
                value: function endMarkedContent() {
                  this.markedContentStack.pop();
                  this.contentVisible = this.isContentVisible();
                }
              }, {
                key: "beginCompat",
                value: function beginCompat() {
                }
              }, {
                key: "endCompat",
                value: function endCompat() {
                }
              }, {
                key: "consumePath",
                value: function consumePath(clipBox) {
                  if (this.pendingClip) {
                    this.current.updateClipFromPath();
                  }
                  if (!this.pendingClip) {
                    this.compose(clipBox);
                  }
                  var ctx = this.ctx;
                  if (this.pendingClip) {
                    if (this.pendingClip === EO_CLIP) {
                      ctx.clip("evenodd");
                    } else {
                      ctx.clip();
                    }
                    this.pendingClip = null;
                  }
                  this.current.startNewPathAndClipBox(this.current.clipBox);
                  ctx.beginPath();
                }
              }, {
                key: "getSinglePixelWidth",
                value: function getSinglePixelWidth() {
                  if (this._cachedGetSinglePixelWidth === null) {
                    var m = this.ctx.mozCurrentTransform;
                    var absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                    var sqNorm1 = Math.pow(m[0], 2) + Math.pow(m[2], 2);
                    var sqNorm2 = Math.pow(m[1], 2) + Math.pow(m[3], 2);
                    var pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;
                    if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {
                      this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);
                    } else if (absDet > Number.EPSILON) {
                      this._cachedGetSinglePixelWidth = pixelHeight;
                    } else {
                      this._cachedGetSinglePixelWidth = 1;
                    }
                  }
                  return this._cachedGetSinglePixelWidth;
                }
              }, {
                key: "getCanvasPosition",
                value: function getCanvasPosition(x, y) {
                  var transform = this.ctx.mozCurrentTransform;
                  return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];
                }
              }, {
                key: "isContentVisible",
                value: function isContentVisible() {
                  for (var i = this.markedContentStack.length - 1; i >= 0; i--) {
                    if (!this.markedContentStack[i].visible) {
                      return false;
                    }
                  }
                  return true;
                }
              }]);
              return CanvasGraphics2;
            }();
            exports2.CanvasGraphics = CanvasGraphics;
            for (var op in _util2.OPS) {
              if (CanvasGraphics.prototype[op] !== void 0) {
                CanvasGraphics.prototype[_util2.OPS[op]] = CanvasGraphics.prototype[op];
              }
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.TilingPattern = exports2.PathType = void 0;
            exports2.getShadingPattern = getShadingPattern;
            var _util2 = __w_pdfjs_require__2(4);
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var PathType = {
              FILL: "Fill",
              STROKE: "Stroke",
              SHADING: "Shading"
            };
            exports2.PathType = PathType;
            function applyBoundingBox(ctx, bbox) {
              if (!bbox || typeof Path2D === "undefined") {
                return;
              }
              var width = bbox[2] - bbox[0];
              var height = bbox[3] - bbox[1];
              var region = new Path2D();
              region.rect(bbox[0], bbox[1], width, height);
              ctx.clip(region);
            }
            var BaseShadingPattern = function() {
              function BaseShadingPattern2() {
                _classCallCheck3(this, BaseShadingPattern2);
                if (this.constructor === BaseShadingPattern2) {
                  (0, _util2.unreachable)("Cannot initialize BaseShadingPattern.");
                }
              }
              _createClass3(BaseShadingPattern2, [{
                key: "getPattern",
                value: function getPattern() {
                  (0, _util2.unreachable)("Abstract method `getPattern` called.");
                }
              }]);
              return BaseShadingPattern2;
            }();
            var RadialAxialShadingPattern = function(_BaseShadingPattern) {
              _inherits2(RadialAxialShadingPattern2, _BaseShadingPattern);
              var _super = _createSuper10(RadialAxialShadingPattern2);
              function RadialAxialShadingPattern2(IR) {
                var _this;
                _classCallCheck3(this, RadialAxialShadingPattern2);
                _this = _super.call(this);
                _this._type = IR[1];
                _this._bbox = IR[2];
                _this._colorStops = IR[3];
                _this._p0 = IR[4];
                _this._p1 = IR[5];
                _this._r0 = IR[6];
                _this._r1 = IR[7];
                _this.matrix = null;
                return _this;
              }
              _createClass3(RadialAxialShadingPattern2, [{
                key: "_createGradient",
                value: function _createGradient(ctx) {
                  var grad;
                  if (this._type === "axial") {
                    grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);
                  } else if (this._type === "radial") {
                    grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);
                  }
                  var _iterator = _createForOfIteratorHelper2(this._colorStops), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var colorStop = _step.value;
                      grad.addColorStop(colorStop[0], colorStop[1]);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  return grad;
                }
              }, {
                key: "getPattern",
                value: function getPattern(ctx, owner, inverse, pathType) {
                  var pattern;
                  if (pathType === PathType.STROKE || pathType === PathType.FILL) {
                    var ownerBBox = owner.current.getClippedPathBoundingBox(pathType, ctx.mozCurrentTransform) || [0, 0, 0, 0];
                    var width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;
                    var height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;
                    var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", width, height, true);
                    var tmpCtx = tmpCanvas.context;
                    tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                    tmpCtx.beginPath();
                    tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                    tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);
                    inverse = _util2.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);
                    tmpCtx.transform.apply(tmpCtx, owner.baseTransform);
                    if (this.matrix) {
                      tmpCtx.transform.apply(tmpCtx, this.matrix);
                    }
                    applyBoundingBox(tmpCtx, this._bbox);
                    tmpCtx.fillStyle = this._createGradient(tmpCtx);
                    tmpCtx.fill();
                    pattern = ctx.createPattern(tmpCanvas.canvas, "no-repeat");
                    var domMatrix = new DOMMatrix(inverse);
                    try {
                      pattern.setTransform(domMatrix);
                    } catch (ex) {
                      (0, _util2.warn)('RadialAxialShadingPattern.getPattern: "'.concat(ex === null || ex === void 0 ? void 0 : ex.message, '".'));
                    }
                  } else {
                    applyBoundingBox(ctx, this._bbox);
                    pattern = this._createGradient(ctx);
                  }
                  return pattern;
                }
              }]);
              return RadialAxialShadingPattern2;
            }(BaseShadingPattern);
            function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
              var coords = context.coords, colors = context.colors;
              var bytes = data.data, rowSize = data.width * 4;
              var tmp;
              if (coords[p1 + 1] > coords[p2 + 1]) {
                tmp = p1;
                p1 = p2;
                p2 = tmp;
                tmp = c1;
                c1 = c2;
                c2 = tmp;
              }
              if (coords[p2 + 1] > coords[p3 + 1]) {
                tmp = p2;
                p2 = p3;
                p3 = tmp;
                tmp = c2;
                c2 = c3;
                c3 = tmp;
              }
              if (coords[p1 + 1] > coords[p2 + 1]) {
                tmp = p1;
                p1 = p2;
                p2 = tmp;
                tmp = c1;
                c1 = c2;
                c2 = tmp;
              }
              var x1 = (coords[p1] + context.offsetX) * context.scaleX;
              var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
              var x2 = (coords[p2] + context.offsetX) * context.scaleX;
              var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
              var x3 = (coords[p3] + context.offsetX) * context.scaleX;
              var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
              if (y1 >= y3) {
                return;
              }
              var c1r = colors[c1], c1g = colors[c1 + 1], c1b = colors[c1 + 2];
              var c2r = colors[c2], c2g = colors[c2 + 1], c2b = colors[c2 + 2];
              var c3r = colors[c3], c3g = colors[c3 + 1], c3b = colors[c3 + 2];
              var minY = Math.round(y1), maxY = Math.round(y3);
              var xa, car, cag, cab;
              var xb, cbr, cbg, cbb;
              for (var y = minY; y <= maxY; y++) {
                if (y < y2) {
                  var _k = void 0;
                  if (y < y1) {
                    _k = 0;
                  } else {
                    _k = (y1 - y) / (y1 - y2);
                  }
                  xa = x1 - (x1 - x2) * _k;
                  car = c1r - (c1r - c2r) * _k;
                  cag = c1g - (c1g - c2g) * _k;
                  cab = c1b - (c1b - c2b) * _k;
                } else {
                  var _k2 = void 0;
                  if (y > y3) {
                    _k2 = 1;
                  } else if (y2 === y3) {
                    _k2 = 0;
                  } else {
                    _k2 = (y2 - y) / (y2 - y3);
                  }
                  xa = x2 - (x2 - x3) * _k2;
                  car = c2r - (c2r - c3r) * _k2;
                  cag = c2g - (c2g - c3g) * _k2;
                  cab = c2b - (c2b - c3b) * _k2;
                }
                var k = void 0;
                if (y < y1) {
                  k = 0;
                } else if (y > y3) {
                  k = 1;
                } else {
                  k = (y1 - y) / (y1 - y3);
                }
                xb = x1 - (x1 - x3) * k;
                cbr = c1r - (c1r - c3r) * k;
                cbg = c1g - (c1g - c3g) * k;
                cbb = c1b - (c1b - c3b) * k;
                var x1_ = Math.round(Math.min(xa, xb));
                var x2_ = Math.round(Math.max(xa, xb));
                var j = rowSize * y + x1_ * 4;
                for (var x = x1_; x <= x2_; x++) {
                  k = (xa - x) / (xa - xb);
                  if (k < 0) {
                    k = 0;
                  } else if (k > 1) {
                    k = 1;
                  }
                  bytes[j++] = car - (car - cbr) * k | 0;
                  bytes[j++] = cag - (cag - cbg) * k | 0;
                  bytes[j++] = cab - (cab - cbb) * k | 0;
                  bytes[j++] = 255;
                }
              }
            }
            function drawFigure(data, figure, context) {
              var ps = figure.coords;
              var cs = figure.colors;
              var i, ii;
              switch (figure.type) {
                case "lattice":
                  var verticesPerRow = figure.verticesPerRow;
                  var rows = Math.floor(ps.length / verticesPerRow) - 1;
                  var cols = verticesPerRow - 1;
                  for (i = 0; i < rows; i++) {
                    var q = i * verticesPerRow;
                    for (var j = 0; j < cols; j++, q++) {
                      drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                      drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                    }
                  }
                  break;
                case "triangles":
                  for (i = 0, ii = ps.length; i < ii; i += 3) {
                    drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
                  }
                  break;
                default:
                  throw new Error("illegal figure");
              }
            }
            var MeshShadingPattern = function(_BaseShadingPattern2) {
              _inherits2(MeshShadingPattern2, _BaseShadingPattern2);
              var _super2 = _createSuper10(MeshShadingPattern2);
              function MeshShadingPattern2(IR) {
                var _this2;
                _classCallCheck3(this, MeshShadingPattern2);
                _this2 = _super2.call(this);
                _this2._coords = IR[2];
                _this2._colors = IR[3];
                _this2._figures = IR[4];
                _this2._bounds = IR[5];
                _this2._bbox = IR[7];
                _this2._background = IR[8];
                _this2.matrix = null;
                return _this2;
              }
              _createClass3(MeshShadingPattern2, [{
                key: "_createMeshCanvas",
                value: function _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {
                  var EXPECTED_SCALE = 1.1;
                  var MAX_PATTERN_SIZE = 3e3;
                  var BORDER_SIZE = 2;
                  var offsetX = Math.floor(this._bounds[0]);
                  var offsetY = Math.floor(this._bounds[1]);
                  var boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
                  var boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
                  var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
                  var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
                  var scaleX = boundsWidth / width;
                  var scaleY = boundsHeight / height;
                  var context = {
                    coords: this._coords,
                    colors: this._colors,
                    offsetX: -offsetX,
                    offsetY: -offsetY,
                    scaleX: 1 / scaleX,
                    scaleY: 1 / scaleY
                  };
                  var paddedWidth = width + BORDER_SIZE * 2;
                  var paddedHeight = height + BORDER_SIZE * 2;
                  var tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
                  var tmpCtx = tmpCanvas.context;
                  var data = tmpCtx.createImageData(width, height);
                  if (backgroundColor) {
                    var bytes = data.data;
                    for (var i = 0, ii = bytes.length; i < ii; i += 4) {
                      bytes[i] = backgroundColor[0];
                      bytes[i + 1] = backgroundColor[1];
                      bytes[i + 2] = backgroundColor[2];
                      bytes[i + 3] = 255;
                    }
                  }
                  var _iterator2 = _createForOfIteratorHelper2(this._figures), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var figure = _step2.value;
                      drawFigure(data, figure, context);
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
                  var canvas = tmpCanvas.canvas;
                  return {
                    canvas,
                    offsetX: offsetX - BORDER_SIZE * scaleX,
                    offsetY: offsetY - BORDER_SIZE * scaleY,
                    scaleX,
                    scaleY
                  };
                }
              }, {
                key: "getPattern",
                value: function getPattern(ctx, owner, inverse, pathType) {
                  applyBoundingBox(ctx, this._bbox);
                  var scale;
                  if (pathType === PathType.SHADING) {
                    scale = _util2.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);
                  } else {
                    scale = _util2.Util.singularValueDecompose2dScale(owner.baseTransform);
                    if (this.matrix) {
                      var matrixScale = _util2.Util.singularValueDecompose2dScale(this.matrix);
                      scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
                    }
                  }
                  var temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);
                  if (pathType !== PathType.SHADING) {
                    ctx.setTransform.apply(ctx, owner.baseTransform);
                    if (this.matrix) {
                      ctx.transform.apply(ctx, this.matrix);
                    }
                  }
                  ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
                  ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
                  return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
                }
              }]);
              return MeshShadingPattern2;
            }(BaseShadingPattern);
            var DummyShadingPattern = function(_BaseShadingPattern3) {
              _inherits2(DummyShadingPattern2, _BaseShadingPattern3);
              var _super3 = _createSuper10(DummyShadingPattern2);
              function DummyShadingPattern2() {
                _classCallCheck3(this, DummyShadingPattern2);
                return _super3.apply(this, arguments);
              }
              _createClass3(DummyShadingPattern2, [{
                key: "getPattern",
                value: function getPattern() {
                  return "hotpink";
                }
              }]);
              return DummyShadingPattern2;
            }(BaseShadingPattern);
            function getShadingPattern(IR) {
              switch (IR[0]) {
                case "RadialAxial":
                  return new RadialAxialShadingPattern(IR);
                case "Mesh":
                  return new MeshShadingPattern(IR);
                case "Dummy":
                  return new DummyShadingPattern();
              }
              throw new Error("Unknown IR type: ".concat(IR[0]));
            }
            var PaintType = {
              COLORED: 1,
              UNCOLORED: 2
            };
            var TilingPattern = function() {
              function TilingPattern2(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
                _classCallCheck3(this, TilingPattern2);
                this.operatorList = IR[2];
                this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
                this.bbox = IR[4];
                this.xstep = IR[5];
                this.ystep = IR[6];
                this.paintType = IR[7];
                this.tilingType = IR[8];
                this.color = color;
                this.ctx = ctx;
                this.canvasGraphicsFactory = canvasGraphicsFactory;
                this.baseTransform = baseTransform;
              }
              _createClass3(TilingPattern2, [{
                key: "createPatternCanvas",
                value: function createPatternCanvas(owner) {
                  var operatorList = this.operatorList;
                  var bbox = this.bbox;
                  var xstep = this.xstep;
                  var ystep = this.ystep;
                  var paintType = this.paintType;
                  var tilingType = this.tilingType;
                  var color = this.color;
                  var canvasGraphicsFactory = this.canvasGraphicsFactory;
                  (0, _util2.info)("TilingType: " + tilingType);
                  var x0 = bbox[0], y0 = bbox[1], x1 = bbox[2], y1 = bbox[3];
                  var matrixScale = _util2.Util.singularValueDecompose2dScale(this.matrix);
                  var curMatrixScale = _util2.Util.singularValueDecompose2dScale(this.baseTransform);
                  var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
                  var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
                  var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
                  var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
                  var tmpCtx = tmpCanvas.context;
                  var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
                  graphics.groupLevel = owner.groupLevel;
                  this.setFillAndStrokeStyleToContext(graphics, paintType, color);
                  var adjustedX0 = x0;
                  var adjustedY0 = y0;
                  var adjustedX1 = x1;
                  var adjustedY1 = y1;
                  if (x0 < 0) {
                    adjustedX0 = 0;
                    adjustedX1 += Math.abs(x0);
                  }
                  if (y0 < 0) {
                    adjustedY0 = 0;
                    adjustedY1 += Math.abs(y0);
                  }
                  tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));
                  graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
                  this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);
                  graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();
                  graphics.executeOperatorList(operatorList);
                  graphics.endDrawing();
                  return {
                    canvas: tmpCanvas.canvas,
                    scaleX: dimx.scale,
                    scaleY: dimy.scale,
                    offsetX: adjustedX0,
                    offsetY: adjustedY0
                  };
                }
              }, {
                key: "getSizeAndScale",
                value: function getSizeAndScale(step, realOutputSize, scale) {
                  step = Math.abs(step);
                  var maxSize = Math.max(TilingPattern2.MAX_PATTERN_SIZE, realOutputSize);
                  var size = Math.ceil(step * scale);
                  if (size >= maxSize) {
                    size = maxSize;
                  } else {
                    scale = size / step;
                  }
                  return {
                    scale,
                    size
                  };
                }
              }, {
                key: "clipBbox",
                value: function clipBbox(graphics, x0, y0, x1, y1) {
                  var bboxWidth = x1 - x0;
                  var bboxHeight = y1 - y0;
                  graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
                  graphics.clip();
                  graphics.endPath();
                }
              }, {
                key: "setFillAndStrokeStyleToContext",
                value: function setFillAndStrokeStyleToContext(graphics, paintType, color) {
                  var context = graphics.ctx, current = graphics.current;
                  switch (paintType) {
                    case PaintType.COLORED:
                      var ctx = this.ctx;
                      context.fillStyle = ctx.fillStyle;
                      context.strokeStyle = ctx.strokeStyle;
                      current.fillColor = ctx.fillStyle;
                      current.strokeColor = ctx.strokeStyle;
                      break;
                    case PaintType.UNCOLORED:
                      var cssColor = _util2.Util.makeHexColor(color[0], color[1], color[2]);
                      context.fillStyle = cssColor;
                      context.strokeStyle = cssColor;
                      current.fillColor = cssColor;
                      current.strokeColor = cssColor;
                      break;
                    default:
                      throw new _util2.FormatError("Unsupported paint type: ".concat(paintType));
                  }
                }
              }, {
                key: "getPattern",
                value: function getPattern(ctx, owner, inverse, pathType) {
                  var matrix = inverse;
                  if (pathType !== PathType.SHADING) {
                    matrix = _util2.Util.transform(matrix, owner.baseTransform);
                    if (this.matrix) {
                      matrix = _util2.Util.transform(matrix, this.matrix);
                    }
                  }
                  var temporaryPatternCanvas = this.createPatternCanvas(owner);
                  var domMatrix = new DOMMatrix(matrix);
                  domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
                  domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);
                  var pattern = ctx.createPattern(temporaryPatternCanvas.canvas, "repeat");
                  try {
                    pattern.setTransform(domMatrix);
                  } catch (ex) {
                    (0, _util2.warn)('TilingPattern.getPattern: "'.concat(ex === null || ex === void 0 ? void 0 : ex.message, '".'));
                  }
                  return pattern;
                }
              }], [{
                key: "MAX_PATTERN_SIZE",
                get: function get2() {
                  return (0, _util2.shadow)(this, "MAX_PATTERN_SIZE", 3e3);
                }
              }]);
              return TilingPattern2;
            }();
            exports2.TilingPattern = TilingPattern;
          },
          (__unused_webpack_module2, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.GlobalWorkerOptions = void 0;
            var GlobalWorkerOptions2 = /* @__PURE__ */ Object.create(null);
            exports2.GlobalWorkerOptions = GlobalWorkerOptions2;
            GlobalWorkerOptions2.workerPort = GlobalWorkerOptions2.workerPort === void 0 ? null : GlobalWorkerOptions2.workerPort;
            GlobalWorkerOptions2.workerSrc = GlobalWorkerOptions2.workerSrc === void 0 ? "" : GlobalWorkerOptions2.workerSrc;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.MessageHandler = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            var CallbackKind = {
              UNKNOWN: 0,
              DATA: 1,
              ERROR: 2
            };
            var StreamKind = {
              UNKNOWN: 0,
              CANCEL: 1,
              CANCEL_COMPLETE: 2,
              CLOSE: 3,
              ENQUEUE: 4,
              ERROR: 5,
              PULL: 6,
              PULL_COMPLETE: 7,
              START_COMPLETE: 8
            };
            function wrapReason(reason) {
              if (!(reason instanceof Error || _typeof3(reason) === "object" && reason !== null)) {
                (0, _util2.warn)('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
                return reason;
              }
              switch (reason.name) {
                case "AbortException":
                  return new _util2.AbortException(reason.message);
                case "MissingPDFException":
                  return new _util2.MissingPDFException(reason.message);
                case "PasswordException":
                  return new _util2.PasswordException(reason.message, reason.code);
                case "UnexpectedResponseException":
                  return new _util2.UnexpectedResponseException(reason.message, reason.status);
                case "UnknownErrorException":
                  return new _util2.UnknownErrorException(reason.message, reason.details);
                default:
                  return new _util2.UnknownErrorException(reason.message, reason.toString());
              }
            }
            var MessageHandler = function() {
              function MessageHandler2(sourceName, targetName, comObj) {
                var _this = this;
                _classCallCheck3(this, MessageHandler2);
                this.sourceName = sourceName;
                this.targetName = targetName;
                this.comObj = comObj;
                this.callbackId = 1;
                this.streamId = 1;
                this.streamSinks = /* @__PURE__ */ Object.create(null);
                this.streamControllers = /* @__PURE__ */ Object.create(null);
                this.callbackCapabilities = /* @__PURE__ */ Object.create(null);
                this.actionHandler = /* @__PURE__ */ Object.create(null);
                this._onComObjOnMessage = function(event) {
                  var data = event.data;
                  if (data.targetName !== _this.sourceName) {
                    return;
                  }
                  if (data.stream) {
                    _this._processStreamMessage(data);
                    return;
                  }
                  if (data.callback) {
                    var callbackId = data.callbackId;
                    var capability = _this.callbackCapabilities[callbackId];
                    if (!capability) {
                      throw new Error("Cannot resolve callback ".concat(callbackId));
                    }
                    delete _this.callbackCapabilities[callbackId];
                    if (data.callback === CallbackKind.DATA) {
                      capability.resolve(data.data);
                    } else if (data.callback === CallbackKind.ERROR) {
                      capability.reject(wrapReason(data.reason));
                    } else {
                      throw new Error("Unexpected callback case");
                    }
                    return;
                  }
                  var action = _this.actionHandler[data.action];
                  if (!action) {
                    throw new Error("Unknown action from worker: ".concat(data.action));
                  }
                  if (data.callbackId) {
                    var cbSourceName = _this.sourceName;
                    var cbTargetName = data.sourceName;
                    new Promise(function(resolve) {
                      resolve(action(data.data));
                    }).then(function(result) {
                      comObj.postMessage({
                        sourceName: cbSourceName,
                        targetName: cbTargetName,
                        callback: CallbackKind.DATA,
                        callbackId: data.callbackId,
                        data: result
                      });
                    }, function(reason) {
                      comObj.postMessage({
                        sourceName: cbSourceName,
                        targetName: cbTargetName,
                        callback: CallbackKind.ERROR,
                        callbackId: data.callbackId,
                        reason: wrapReason(reason)
                      });
                    });
                    return;
                  }
                  if (data.streamId) {
                    _this._createStreamSink(data);
                    return;
                  }
                  action(data.data);
                };
                comObj.addEventListener("message", this._onComObjOnMessage);
              }
              _createClass3(MessageHandler2, [{
                key: "on",
                value: function on(actionName, handler) {
                  var ah = this.actionHandler;
                  if (ah[actionName]) {
                    throw new Error('There is already an actionName called "'.concat(actionName, '"'));
                  }
                  ah[actionName] = handler;
                }
              }, {
                key: "send",
                value: function send(actionName, data, transfers) {
                  this.comObj.postMessage({
                    sourceName: this.sourceName,
                    targetName: this.targetName,
                    action: actionName,
                    data
                  }, transfers);
                }
              }, {
                key: "sendWithPromise",
                value: function sendWithPromise(actionName, data, transfers) {
                  var callbackId = this.callbackId++;
                  var capability = (0, _util2.createPromiseCapability)();
                  this.callbackCapabilities[callbackId] = capability;
                  try {
                    this.comObj.postMessage({
                      sourceName: this.sourceName,
                      targetName: this.targetName,
                      action: actionName,
                      callbackId,
                      data
                    }, transfers);
                  } catch (ex) {
                    capability.reject(ex);
                  }
                  return capability.promise;
                }
              }, {
                key: "sendWithStream",
                value: function sendWithStream(actionName, data, queueingStrategy, transfers) {
                  var _this2 = this;
                  var streamId = this.streamId++, sourceName = this.sourceName, targetName = this.targetName, comObj = this.comObj;
                  return new ReadableStream({
                    start: function start(controller) {
                      var startCapability = (0, _util2.createPromiseCapability)();
                      _this2.streamControllers[streamId] = {
                        controller,
                        startCall: startCapability,
                        pullCall: null,
                        cancelCall: null,
                        isClosed: false
                      };
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        action: actionName,
                        streamId,
                        data,
                        desiredSize: controller.desiredSize
                      }, transfers);
                      return startCapability.promise;
                    },
                    pull: function pull(controller) {
                      var pullCapability = (0, _util2.createPromiseCapability)();
                      _this2.streamControllers[streamId].pullCall = pullCapability;
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.PULL,
                        streamId,
                        desiredSize: controller.desiredSize
                      });
                      return pullCapability.promise;
                    },
                    cancel: function cancel(reason) {
                      (0, _util2.assert)(reason instanceof Error, "cancel must have a valid reason");
                      var cancelCapability = (0, _util2.createPromiseCapability)();
                      _this2.streamControllers[streamId].cancelCall = cancelCapability;
                      _this2.streamControllers[streamId].isClosed = true;
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.CANCEL,
                        streamId,
                        reason: wrapReason(reason)
                      });
                      return cancelCapability.promise;
                    }
                  }, queueingStrategy);
                }
              }, {
                key: "_createStreamSink",
                value: function _createStreamSink(data) {
                  var streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;
                  var self2 = this, action = this.actionHandler[data.action];
                  var streamSink = {
                    enqueue: function enqueue(chunk) {
                      var size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
                      var transfers = arguments.length > 2 ? arguments[2] : void 0;
                      if (this.isCancelled) {
                        return;
                      }
                      var lastDesiredSize = this.desiredSize;
                      this.desiredSize -= size;
                      if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                        this.sinkCapability = (0, _util2.createPromiseCapability)();
                        this.ready = this.sinkCapability.promise;
                      }
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.ENQUEUE,
                        streamId,
                        chunk
                      }, transfers);
                    },
                    close: function close() {
                      if (this.isCancelled) {
                        return;
                      }
                      this.isCancelled = true;
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.CLOSE,
                        streamId
                      });
                      delete self2.streamSinks[streamId];
                    },
                    error: function error(reason) {
                      (0, _util2.assert)(reason instanceof Error, "error must have a valid reason");
                      if (this.isCancelled) {
                        return;
                      }
                      this.isCancelled = true;
                      comObj.postMessage({
                        sourceName,
                        targetName,
                        stream: StreamKind.ERROR,
                        streamId,
                        reason: wrapReason(reason)
                      });
                    },
                    sinkCapability: (0, _util2.createPromiseCapability)(),
                    onPull: null,
                    onCancel: null,
                    isCancelled: false,
                    desiredSize: data.desiredSize,
                    ready: null
                  };
                  streamSink.sinkCapability.resolve();
                  streamSink.ready = streamSink.sinkCapability.promise;
                  this.streamSinks[streamId] = streamSink;
                  new Promise(function(resolve) {
                    resolve(action(data.data, streamSink));
                  }).then(function() {
                    comObj.postMessage({
                      sourceName,
                      targetName,
                      stream: StreamKind.START_COMPLETE,
                      streamId,
                      success: true
                    });
                  }, function(reason) {
                    comObj.postMessage({
                      sourceName,
                      targetName,
                      stream: StreamKind.START_COMPLETE,
                      streamId,
                      reason: wrapReason(reason)
                    });
                  });
                }
              }, {
                key: "_processStreamMessage",
                value: function _processStreamMessage(data) {
                  var streamId = data.streamId, sourceName = this.sourceName, targetName = data.sourceName, comObj = this.comObj;
                  var streamController = this.streamControllers[streamId], streamSink = this.streamSinks[streamId];
                  switch (data.stream) {
                    case StreamKind.START_COMPLETE:
                      if (data.success) {
                        streamController.startCall.resolve();
                      } else {
                        streamController.startCall.reject(wrapReason(data.reason));
                      }
                      break;
                    case StreamKind.PULL_COMPLETE:
                      if (data.success) {
                        streamController.pullCall.resolve();
                      } else {
                        streamController.pullCall.reject(wrapReason(data.reason));
                      }
                      break;
                    case StreamKind.PULL:
                      if (!streamSink) {
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.PULL_COMPLETE,
                          streamId,
                          success: true
                        });
                        break;
                      }
                      if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                        streamSink.sinkCapability.resolve();
                      }
                      streamSink.desiredSize = data.desiredSize;
                      new Promise(function(resolve) {
                        resolve(streamSink.onPull && streamSink.onPull());
                      }).then(function() {
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.PULL_COMPLETE,
                          streamId,
                          success: true
                        });
                      }, function(reason) {
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.PULL_COMPLETE,
                          streamId,
                          reason: wrapReason(reason)
                        });
                      });
                      break;
                    case StreamKind.ENQUEUE:
                      (0, _util2.assert)(streamController, "enqueue should have stream controller");
                      if (streamController.isClosed) {
                        break;
                      }
                      streamController.controller.enqueue(data.chunk);
                      break;
                    case StreamKind.CLOSE:
                      (0, _util2.assert)(streamController, "close should have stream controller");
                      if (streamController.isClosed) {
                        break;
                      }
                      streamController.isClosed = true;
                      streamController.controller.close();
                      this._deleteStreamController(streamController, streamId);
                      break;
                    case StreamKind.ERROR:
                      (0, _util2.assert)(streamController, "error should have stream controller");
                      streamController.controller.error(wrapReason(data.reason));
                      this._deleteStreamController(streamController, streamId);
                      break;
                    case StreamKind.CANCEL_COMPLETE:
                      if (data.success) {
                        streamController.cancelCall.resolve();
                      } else {
                        streamController.cancelCall.reject(wrapReason(data.reason));
                      }
                      this._deleteStreamController(streamController, streamId);
                      break;
                    case StreamKind.CANCEL:
                      if (!streamSink) {
                        break;
                      }
                      new Promise(function(resolve) {
                        resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));
                      }).then(function() {
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.CANCEL_COMPLETE,
                          streamId,
                          success: true
                        });
                      }, function(reason) {
                        comObj.postMessage({
                          sourceName,
                          targetName,
                          stream: StreamKind.CANCEL_COMPLETE,
                          streamId,
                          reason: wrapReason(reason)
                        });
                      });
                      streamSink.sinkCapability.reject(wrapReason(data.reason));
                      streamSink.isCancelled = true;
                      delete this.streamSinks[streamId];
                      break;
                    default:
                      throw new Error("Unexpected stream case");
                  }
                }
              }, {
                key: "_deleteStreamController",
                value: function() {
                  var _deleteStreamController2 = _asyncToGenerator2(_regenerator2["default"].mark(function _callee(streamController, streamId) {
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);
                          case 2:
                            delete this.streamControllers[streamId];
                          case 3:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function _deleteStreamController(_x, _x2) {
                    return _deleteStreamController2.apply(this, arguments);
                  }
                  return _deleteStreamController;
                }()
              }, {
                key: "destroy",
                value: function destroy() {
                  this.comObj.removeEventListener("message", this._onComObjOnMessage);
                }
              }]);
              return MessageHandler2;
            }();
            exports2.MessageHandler = MessageHandler;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.Metadata = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _classPrivateFieldInitSpec2(obj, privateMap, value) {
              _checkPrivateRedeclaration2(obj, privateMap);
              privateMap.set(obj, value);
            }
            function _checkPrivateRedeclaration2(obj, privateCollection) {
              if (privateCollection.has(obj)) {
                throw new TypeError("Cannot initialize the same private elements twice on an object");
              }
            }
            function _classPrivateFieldGet2(receiver, privateMap) {
              var descriptor = _classExtractFieldDescriptor2(receiver, privateMap, "get");
              return _classApplyDescriptorGet2(receiver, descriptor);
            }
            function _classApplyDescriptorGet2(receiver, descriptor) {
              if (descriptor.get) {
                return descriptor.get.call(receiver);
              }
              return descriptor.value;
            }
            function _classPrivateFieldSet2(receiver, privateMap, value) {
              var descriptor = _classExtractFieldDescriptor2(receiver, privateMap, "set");
              _classApplyDescriptorSet2(receiver, descriptor, value);
              return value;
            }
            function _classExtractFieldDescriptor2(receiver, privateMap, action) {
              if (!privateMap.has(receiver)) {
                throw new TypeError("attempted to " + action + " private field on non-instance");
              }
              return privateMap.get(receiver);
            }
            function _classApplyDescriptorSet2(receiver, descriptor, value) {
              if (descriptor.set) {
                descriptor.set.call(receiver, value);
              } else {
                if (!descriptor.writable) {
                  throw new TypeError("attempted to set read only private field");
                }
                descriptor.value = value;
              }
            }
            var _metadataMap = /* @__PURE__ */ new WeakMap();
            var _data = /* @__PURE__ */ new WeakMap();
            var Metadata = function() {
              function Metadata2(_ref) {
                var parsedData = _ref.parsedData, rawData = _ref.rawData;
                _classCallCheck3(this, Metadata2);
                _classPrivateFieldInitSpec2(this, _metadataMap, {
                  writable: true,
                  value: void 0
                });
                _classPrivateFieldInitSpec2(this, _data, {
                  writable: true,
                  value: void 0
                });
                _classPrivateFieldSet2(this, _metadataMap, parsedData);
                _classPrivateFieldSet2(this, _data, rawData);
              }
              _createClass3(Metadata2, [{
                key: "getRaw",
                value: function getRaw() {
                  return _classPrivateFieldGet2(this, _data);
                }
              }, {
                key: "get",
                value: function get2(name) {
                  var _classPrivateFieldGet22;
                  return (_classPrivateFieldGet22 = _classPrivateFieldGet2(this, _metadataMap).get(name)) !== null && _classPrivateFieldGet22 !== void 0 ? _classPrivateFieldGet22 : null;
                }
              }, {
                key: "getAll",
                value: function getAll() {
                  return (0, _util2.objectFromMap)(_classPrivateFieldGet2(this, _metadataMap));
                }
              }, {
                key: "has",
                value: function has(name) {
                  return _classPrivateFieldGet2(this, _metadataMap).has(name);
                }
              }]);
              return Metadata2;
            }();
            exports2.Metadata = Metadata;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.OptionalContentConfig = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var OptionalContentGroup = function OptionalContentGroup2(name, intent) {
              _classCallCheck3(this, OptionalContentGroup2);
              this.visible = true;
              this.name = name;
              this.intent = intent;
            };
            var OptionalContentConfig = function() {
              function OptionalContentConfig2(data) {
                _classCallCheck3(this, OptionalContentConfig2);
                this.name = null;
                this.creator = null;
                this._order = null;
                this._groups = /* @__PURE__ */ new Map();
                if (data === null) {
                  return;
                }
                this.name = data.name;
                this.creator = data.creator;
                this._order = data.order;
                var _iterator = _createForOfIteratorHelper2(data.groups), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var _group = _step.value;
                    this._groups.set(_group.id, new OptionalContentGroup(_group.name, _group.intent));
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                if (data.baseState === "OFF") {
                  var _iterator2 = _createForOfIteratorHelper2(this._groups), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var group = _step2.value;
                      group.visible = false;
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                }
                var _iterator3 = _createForOfIteratorHelper2(data.on), _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                    var on = _step3.value;
                    this._groups.get(on).visible = true;
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
                var _iterator4 = _createForOfIteratorHelper2(data.off), _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                    var off = _step4.value;
                    this._groups.get(off).visible = false;
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              }
              _createClass3(OptionalContentConfig2, [{
                key: "_evaluateVisibilityExpression",
                value: function _evaluateVisibilityExpression(array) {
                  var length = array.length;
                  if (length < 2) {
                    return true;
                  }
                  var operator = array[0];
                  for (var i = 1; i < length; i++) {
                    var element = array[i];
                    var state = void 0;
                    if (Array.isArray(element)) {
                      state = this._evaluateVisibilityExpression(element);
                    } else if (this._groups.has(element)) {
                      state = this._groups.get(element).visible;
                    } else {
                      (0, _util2.warn)("Optional content group not found: ".concat(element));
                      return true;
                    }
                    switch (operator) {
                      case "And":
                        if (!state) {
                          return false;
                        }
                        break;
                      case "Or":
                        if (state) {
                          return true;
                        }
                        break;
                      case "Not":
                        return !state;
                      default:
                        return true;
                    }
                  }
                  return operator === "And";
                }
              }, {
                key: "isVisible",
                value: function isVisible(group) {
                  if (this._groups.size === 0) {
                    return true;
                  }
                  if (!group) {
                    (0, _util2.warn)("Optional content group not defined.");
                    return true;
                  }
                  if (group.type === "OCG") {
                    if (!this._groups.has(group.id)) {
                      (0, _util2.warn)("Optional content group not found: ".concat(group.id));
                      return true;
                    }
                    return this._groups.get(group.id).visible;
                  } else if (group.type === "OCMD") {
                    if (group.expression) {
                      return this._evaluateVisibilityExpression(group.expression);
                    }
                    if (!group.policy || group.policy === "AnyOn") {
                      var _iterator5 = _createForOfIteratorHelper2(group.ids), _step5;
                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          var id = _step5.value;
                          if (!this._groups.has(id)) {
                            (0, _util2.warn)("Optional content group not found: ".concat(id));
                            return true;
                          }
                          if (this._groups.get(id).visible) {
                            return true;
                          }
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                      return false;
                    } else if (group.policy === "AllOn") {
                      var _iterator6 = _createForOfIteratorHelper2(group.ids), _step6;
                      try {
                        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                          var _id = _step6.value;
                          if (!this._groups.has(_id)) {
                            (0, _util2.warn)("Optional content group not found: ".concat(_id));
                            return true;
                          }
                          if (!this._groups.get(_id).visible) {
                            return false;
                          }
                        }
                      } catch (err) {
                        _iterator6.e(err);
                      } finally {
                        _iterator6.f();
                      }
                      return true;
                    } else if (group.policy === "AnyOff") {
                      var _iterator7 = _createForOfIteratorHelper2(group.ids), _step7;
                      try {
                        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                          var _id2 = _step7.value;
                          if (!this._groups.has(_id2)) {
                            (0, _util2.warn)("Optional content group not found: ".concat(_id2));
                            return true;
                          }
                          if (!this._groups.get(_id2).visible) {
                            return true;
                          }
                        }
                      } catch (err) {
                        _iterator7.e(err);
                      } finally {
                        _iterator7.f();
                      }
                      return false;
                    } else if (group.policy === "AllOff") {
                      var _iterator8 = _createForOfIteratorHelper2(group.ids), _step8;
                      try {
                        for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                          var _id3 = _step8.value;
                          if (!this._groups.has(_id3)) {
                            (0, _util2.warn)("Optional content group not found: ".concat(_id3));
                            return true;
                          }
                          if (this._groups.get(_id3).visible) {
                            return false;
                          }
                        }
                      } catch (err) {
                        _iterator8.e(err);
                      } finally {
                        _iterator8.f();
                      }
                      return true;
                    }
                    (0, _util2.warn)("Unknown optional content policy ".concat(group.policy, "."));
                    return true;
                  }
                  (0, _util2.warn)("Unknown group type ".concat(group.type, "."));
                  return true;
                }
              }, {
                key: "setVisibility",
                value: function setVisibility(id) {
                  var visible = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                  if (!this._groups.has(id)) {
                    (0, _util2.warn)("Optional content group not found: ".concat(id));
                    return;
                  }
                  this._groups.get(id).visible = !!visible;
                }
              }, {
                key: "getOrder",
                value: function getOrder() {
                  if (!this._groups.size) {
                    return null;
                  }
                  if (this._order) {
                    return this._order.slice();
                  }
                  return Array.from(this._groups.keys());
                }
              }, {
                key: "getGroups",
                value: function getGroups() {
                  return this._groups.size > 0 ? (0, _util2.objectFromMap)(this._groups) : null;
                }
              }, {
                key: "getGroup",
                value: function getGroup(id) {
                  return this._groups.get(id) || null;
                }
              }]);
              return OptionalContentConfig2;
            }();
            exports2.OptionalContentConfig = OptionalContentConfig;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.PDFDataTransportStream = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            var _display_utils2 = __w_pdfjs_require__2(1);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var PDFDataTransportStream = function() {
              function PDFDataTransportStream2(params, pdfDataRangeTransport) {
                var _this = this;
                _classCallCheck3(this, PDFDataTransportStream2);
                (0, _util2.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
                this._queuedChunks = [];
                this._progressiveDone = params.progressiveDone || false;
                this._contentDispositionFilename = params.contentDispositionFilename || null;
                var initialData = params.initialData;
                if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {
                  var buffer = new Uint8Array(initialData).buffer;
                  this._queuedChunks.push(buffer);
                }
                this._pdfDataRangeTransport = pdfDataRangeTransport;
                this._isStreamingSupported = !params.disableStream;
                this._isRangeSupported = !params.disableRange;
                this._contentLength = params.length;
                this._fullRequestReader = null;
                this._rangeReaders = [];
                this._pdfDataRangeTransport.addRangeListener(function(begin, chunk) {
                  _this._onReceiveData({
                    begin,
                    chunk
                  });
                });
                this._pdfDataRangeTransport.addProgressListener(function(loaded, total) {
                  _this._onProgress({
                    loaded,
                    total
                  });
                });
                this._pdfDataRangeTransport.addProgressiveReadListener(function(chunk) {
                  _this._onReceiveData({
                    chunk
                  });
                });
                this._pdfDataRangeTransport.addProgressiveDoneListener(function() {
                  _this._onProgressiveDone();
                });
                this._pdfDataRangeTransport.transportReady();
              }
              _createClass3(PDFDataTransportStream2, [{
                key: "_onReceiveData",
                value: function _onReceiveData(args) {
                  var buffer = new Uint8Array(args.chunk).buffer;
                  if (args.begin === void 0) {
                    if (this._fullRequestReader) {
                      this._fullRequestReader._enqueue(buffer);
                    } else {
                      this._queuedChunks.push(buffer);
                    }
                  } else {
                    var found = this._rangeReaders.some(function(rangeReader) {
                      if (rangeReader._begin !== args.begin) {
                        return false;
                      }
                      rangeReader._enqueue(buffer);
                      return true;
                    });
                    (0, _util2.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
                  }
                }
              }, {
                key: "_progressiveDataLength",
                get: function get2() {
                  var _this$_fullRequestRea, _this$_fullRequestRea2;
                  return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;
                }
              }, {
                key: "_onProgress",
                value: function _onProgress(evt) {
                  if (evt.total === void 0) {
                    var firstReader = this._rangeReaders[0];
                    if (firstReader !== null && firstReader !== void 0 && firstReader.onProgress) {
                      firstReader.onProgress({
                        loaded: evt.loaded
                      });
                    }
                  } else {
                    var fullReader = this._fullRequestReader;
                    if (fullReader !== null && fullReader !== void 0 && fullReader.onProgress) {
                      fullReader.onProgress({
                        loaded: evt.loaded,
                        total: evt.total
                      });
                    }
                  }
                }
              }, {
                key: "_onProgressiveDone",
                value: function _onProgressiveDone() {
                  if (this._fullRequestReader) {
                    this._fullRequestReader.progressiveDone();
                  }
                  this._progressiveDone = true;
                }
              }, {
                key: "_removeRangeReader",
                value: function _removeRangeReader(reader) {
                  var i = this._rangeReaders.indexOf(reader);
                  if (i >= 0) {
                    this._rangeReaders.splice(i, 1);
                  }
                }
              }, {
                key: "getFullReader",
                value: function getFullReader() {
                  (0, _util2.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
                  var queuedChunks = this._queuedChunks;
                  this._queuedChunks = null;
                  return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
                }
              }, {
                key: "getRangeReader",
                value: function getRangeReader(begin, end) {
                  if (end <= this._progressiveDataLength) {
                    return null;
                  }
                  var reader = new PDFDataTransportStreamRangeReader(this, begin, end);
                  this._pdfDataRangeTransport.requestDataRange(begin, end);
                  this._rangeReaders.push(reader);
                  return reader;
                }
              }, {
                key: "cancelAllRequests",
                value: function cancelAllRequests(reason) {
                  if (this._fullRequestReader) {
                    this._fullRequestReader.cancel(reason);
                  }
                  var _iterator = _createForOfIteratorHelper2(this._rangeReaders.slice(0)), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var reader = _step.value;
                      reader.cancel(reason);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  this._pdfDataRangeTransport.abort();
                }
              }]);
              return PDFDataTransportStream2;
            }();
            exports2.PDFDataTransportStream = PDFDataTransportStream;
            var PDFDataTransportStreamReader = function() {
              function PDFDataTransportStreamReader2(stream, queuedChunks) {
                var progressiveDone = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                var contentDispositionFilename = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
                _classCallCheck3(this, PDFDataTransportStreamReader2);
                this._stream = stream;
                this._done = progressiveDone || false;
                this._filename = (0, _display_utils2.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;
                this._queuedChunks = queuedChunks || [];
                this._loaded = 0;
                var _iterator2 = _createForOfIteratorHelper2(this._queuedChunks), _step2;
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                    var chunk = _step2.value;
                    this._loaded += chunk.byteLength;
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
                this._requests = [];
                this._headersReady = Promise.resolve();
                stream._fullRequestReader = this;
                this.onProgress = null;
              }
              _createClass3(PDFDataTransportStreamReader2, [{
                key: "_enqueue",
                value: function _enqueue(chunk) {
                  if (this._done) {
                    return;
                  }
                  if (this._requests.length > 0) {
                    var requestCapability = this._requests.shift();
                    requestCapability.resolve({
                      value: chunk,
                      done: false
                    });
                  } else {
                    this._queuedChunks.push(chunk);
                  }
                  this._loaded += chunk.byteLength;
                }
              }, {
                key: "headersReady",
                get: function get2() {
                  return this._headersReady;
                }
              }, {
                key: "filename",
                get: function get2() {
                  return this._filename;
                }
              }, {
                key: "isRangeSupported",
                get: function get2() {
                  return this._stream._isRangeSupported;
                }
              }, {
                key: "isStreamingSupported",
                get: function get2() {
                  return this._stream._isStreamingSupported;
                }
              }, {
                key: "contentLength",
                get: function get2() {
                  return this._stream._contentLength;
                }
              }, {
                key: "read",
                value: function() {
                  var _read = _asyncToGenerator2(_regenerator2["default"].mark(function _callee() {
                    var chunk, requestCapability;
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!(this._queuedChunks.length > 0)) {
                              _context.next = 3;
                              break;
                            }
                            chunk = this._queuedChunks.shift();
                            return _context.abrupt("return", {
                              value: chunk,
                              done: false
                            });
                          case 3:
                            if (!this._done) {
                              _context.next = 5;
                              break;
                            }
                            return _context.abrupt("return", {
                              value: void 0,
                              done: true
                            });
                          case 5:
                            requestCapability = (0, _util2.createPromiseCapability)();
                            this._requests.push(requestCapability);
                            return _context.abrupt("return", requestCapability.promise);
                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function read() {
                    return _read.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  this._done = true;
                  var _iterator3 = _createForOfIteratorHelper2(this._requests), _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                      var requestCapability = _step3.value;
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                  this._requests.length = 0;
                }
              }, {
                key: "progressiveDone",
                value: function progressiveDone() {
                  if (this._done) {
                    return;
                  }
                  this._done = true;
                }
              }]);
              return PDFDataTransportStreamReader2;
            }();
            var PDFDataTransportStreamRangeReader = function() {
              function PDFDataTransportStreamRangeReader2(stream, begin, end) {
                _classCallCheck3(this, PDFDataTransportStreamRangeReader2);
                this._stream = stream;
                this._begin = begin;
                this._end = end;
                this._queuedChunk = null;
                this._requests = [];
                this._done = false;
                this.onProgress = null;
              }
              _createClass3(PDFDataTransportStreamRangeReader2, [{
                key: "_enqueue",
                value: function _enqueue(chunk) {
                  if (this._done) {
                    return;
                  }
                  if (this._requests.length === 0) {
                    this._queuedChunk = chunk;
                  } else {
                    var requestsCapability = this._requests.shift();
                    requestsCapability.resolve({
                      value: chunk,
                      done: false
                    });
                    var _iterator4 = _createForOfIteratorHelper2(this._requests), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var requestCapability = _step4.value;
                        requestCapability.resolve({
                          value: void 0,
                          done: true
                        });
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    this._requests.length = 0;
                  }
                  this._done = true;
                  this._stream._removeRangeReader(this);
                }
              }, {
                key: "isStreamingSupported",
                get: function get2() {
                  return false;
                }
              }, {
                key: "read",
                value: function() {
                  var _read2 = _asyncToGenerator2(_regenerator2["default"].mark(function _callee2() {
                    var chunk, requestCapability;
                    return _regenerator2["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (!this._queuedChunk) {
                              _context2.next = 4;
                              break;
                            }
                            chunk = this._queuedChunk;
                            this._queuedChunk = null;
                            return _context2.abrupt("return", {
                              value: chunk,
                              done: false
                            });
                          case 4:
                            if (!this._done) {
                              _context2.next = 6;
                              break;
                            }
                            return _context2.abrupt("return", {
                              value: void 0,
                              done: true
                            });
                          case 6:
                            requestCapability = (0, _util2.createPromiseCapability)();
                            this._requests.push(requestCapability);
                            return _context2.abrupt("return", requestCapability.promise);
                          case 9:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));
                  function read() {
                    return _read2.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  this._done = true;
                  var _iterator5 = _createForOfIteratorHelper2(this._requests), _step5;
                  try {
                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                      var requestCapability = _step5.value;
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                  } catch (err) {
                    _iterator5.e(err);
                  } finally {
                    _iterator5.f();
                  }
                  this._requests.length = 0;
                  this._stream._removeRangeReader(this);
                }
              }]);
              return PDFDataTransportStreamRangeReader2;
            }();
          },
          (__unused_webpack_module2, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.XfaText = void 0;
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var XfaText = function() {
              function XfaText2() {
                _classCallCheck3(this, XfaText2);
              }
              _createClass3(XfaText2, null, [{
                key: "textContent",
                value: function textContent(xfa) {
                  var items = [];
                  var output = {
                    items,
                    styles: /* @__PURE__ */ Object.create(null)
                  };
                  function walk(node) {
                    var _node$attributes;
                    if (!node) {
                      return;
                    }
                    var str = null;
                    var name = node.name;
                    if (name === "#text") {
                      str = node.value;
                    } else if (!XfaText2.shouldBuildText(name)) {
                      return;
                    } else if (node !== null && node !== void 0 && (_node$attributes = node.attributes) !== null && _node$attributes !== void 0 && _node$attributes.textContent) {
                      str = node.attributes.textContent;
                    } else if (node.value) {
                      str = node.value;
                    }
                    if (str !== null) {
                      items.push({
                        str
                      });
                    }
                    if (!node.children) {
                      return;
                    }
                    var _iterator = _createForOfIteratorHelper2(node.children), _step;
                    try {
                      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        var child = _step.value;
                        walk(child);
                      }
                    } catch (err) {
                      _iterator.e(err);
                    } finally {
                      _iterator.f();
                    }
                  }
                  walk(xfa);
                  return output;
                }
              }, {
                key: "shouldBuildText",
                value: function shouldBuildText(name) {
                  return !(name === "textarea" || name === "input" || name === "option" || name === "select");
                }
              }]);
              return XfaText2;
            }();
            exports2.XfaText = XfaText;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.AnnotationLayer = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            var _display_utils2 = __w_pdfjs_require__2(1);
            var _annotation_storage2 = __w_pdfjs_require__2(139);
            var _scripting_utils = __w_pdfjs_require__2(149);
            var _xfa_layer = __w_pdfjs_require__2(150);
            function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
              _classCheckPrivateStaticAccess(receiver, classConstructor);
              return method;
            }
            function _classCheckPrivateStaticAccess(receiver, classConstructor) {
              if (receiver !== classConstructor) {
                throw new TypeError("Private static access of wrong provenance");
              }
            }
            function _get(target, property, receiver) {
              if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get;
              } else {
                _get = function _get2(target2, property2, receiver2) {
                  var base = _superPropBase(target2, property2);
                  if (!base)
                    return;
                  var desc = Object.getOwnPropertyDescriptor(base, property2);
                  if (desc.get) {
                    return desc.get.call(receiver2);
                  }
                  return desc.value;
                };
              }
              return _get(target, property, receiver || target);
            }
            function _superPropBase(object, property) {
              while (!Object.prototype.hasOwnProperty.call(object, property)) {
                object = _getPrototypeOf2(object);
                if (object === null)
                  break;
              }
              return object;
            }
            function _defineProperty2(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _toConsumableArray3(arr) {
              return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread3();
            }
            function _nonIterableSpread3() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArray3(iter) {
              if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                return Array.from(iter);
            }
            function _arrayWithoutHoles3(arr) {
              if (Array.isArray(arr))
                return _arrayLikeToArray3(arr);
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e2) {
                    throw _e2;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e3) {
                didErr = true;
                err = _e3;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var DEFAULT_TAB_INDEX = 1e3;
            var GetElementsByNameSet = /* @__PURE__ */ new WeakSet();
            var AnnotationElementFactory = function() {
              function AnnotationElementFactory2() {
                _classCallCheck3(this, AnnotationElementFactory2);
              }
              _createClass3(AnnotationElementFactory2, null, [{
                key: "create",
                value: function create(parameters) {
                  var subtype = parameters.data.annotationType;
                  switch (subtype) {
                    case _util2.AnnotationType.LINK:
                      return new LinkAnnotationElement(parameters);
                    case _util2.AnnotationType.TEXT:
                      return new TextAnnotationElement(parameters);
                    case _util2.AnnotationType.WIDGET:
                      var fieldType = parameters.data.fieldType;
                      switch (fieldType) {
                        case "Tx":
                          return new TextWidgetAnnotationElement(parameters);
                        case "Btn":
                          if (parameters.data.radioButton) {
                            return new RadioButtonWidgetAnnotationElement(parameters);
                          } else if (parameters.data.checkBox) {
                            return new CheckboxWidgetAnnotationElement(parameters);
                          }
                          return new PushButtonWidgetAnnotationElement(parameters);
                        case "Ch":
                          return new ChoiceWidgetAnnotationElement(parameters);
                      }
                      return new WidgetAnnotationElement(parameters);
                    case _util2.AnnotationType.POPUP:
                      return new PopupAnnotationElement(parameters);
                    case _util2.AnnotationType.FREETEXT:
                      return new FreeTextAnnotationElement(parameters);
                    case _util2.AnnotationType.LINE:
                      return new LineAnnotationElement(parameters);
                    case _util2.AnnotationType.SQUARE:
                      return new SquareAnnotationElement(parameters);
                    case _util2.AnnotationType.CIRCLE:
                      return new CircleAnnotationElement(parameters);
                    case _util2.AnnotationType.POLYLINE:
                      return new PolylineAnnotationElement(parameters);
                    case _util2.AnnotationType.CARET:
                      return new CaretAnnotationElement(parameters);
                    case _util2.AnnotationType.INK:
                      return new InkAnnotationElement(parameters);
                    case _util2.AnnotationType.POLYGON:
                      return new PolygonAnnotationElement(parameters);
                    case _util2.AnnotationType.HIGHLIGHT:
                      return new HighlightAnnotationElement(parameters);
                    case _util2.AnnotationType.UNDERLINE:
                      return new UnderlineAnnotationElement(parameters);
                    case _util2.AnnotationType.SQUIGGLY:
                      return new SquigglyAnnotationElement(parameters);
                    case _util2.AnnotationType.STRIKEOUT:
                      return new StrikeOutAnnotationElement(parameters);
                    case _util2.AnnotationType.STAMP:
                      return new StampAnnotationElement(parameters);
                    case _util2.AnnotationType.FILEATTACHMENT:
                      return new FileAttachmentAnnotationElement(parameters);
                    default:
                      return new AnnotationElement(parameters);
                  }
                }
              }]);
              return AnnotationElementFactory2;
            }();
            var AnnotationElement = function() {
              function AnnotationElement2(parameters) {
                var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$isRenderable = _ref.isRenderable, isRenderable = _ref$isRenderable === void 0 ? false : _ref$isRenderable, _ref$ignoreBorder = _ref.ignoreBorder, ignoreBorder = _ref$ignoreBorder === void 0 ? false : _ref$ignoreBorder, _ref$createQuadrilate = _ref.createQuadrilaterals, createQuadrilaterals = _ref$createQuadrilate === void 0 ? false : _ref$createQuadrilate;
                _classCallCheck3(this, AnnotationElement2);
                this.isRenderable = isRenderable;
                this.data = parameters.data;
                this.layer = parameters.layer;
                this.page = parameters.page;
                this.viewport = parameters.viewport;
                this.linkService = parameters.linkService;
                this.downloadManager = parameters.downloadManager;
                this.imageResourcesPath = parameters.imageResourcesPath;
                this.renderForms = parameters.renderForms;
                this.svgFactory = parameters.svgFactory;
                this.annotationStorage = parameters.annotationStorage;
                this.enableScripting = parameters.enableScripting;
                this.hasJSActions = parameters.hasJSActions;
                this._fieldObjects = parameters.fieldObjects;
                this._mouseState = parameters.mouseState;
                if (isRenderable) {
                  this.container = this._createContainer(ignoreBorder);
                }
                if (createQuadrilaterals) {
                  this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);
                }
              }
              _createClass3(AnnotationElement2, [{
                key: "_createContainer",
                value: function _createContainer() {
                  var ignoreBorder = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  var data = this.data, page = this.page, viewport = this.viewport;
                  var container = document.createElement("section");
                  var width = data.rect[2] - data.rect[0];
                  var height = data.rect[3] - data.rect[1];
                  container.setAttribute("data-annotation-id", data.id);
                  var rect = _util2.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);
                  if (data.hasOwnCanvas) {
                    var transform = viewport.transform.slice();
                    var _Util$singularValueDe = _util2.Util.singularValueDecompose2dScale(transform), _Util$singularValueDe2 = _slicedToArray3(_Util$singularValueDe, 2), scaleX = _Util$singularValueDe2[0], scaleY = _Util$singularValueDe2[1];
                    width = Math.ceil(width * scaleX);
                    height = Math.ceil(height * scaleY);
                    rect[0] *= scaleX;
                    rect[1] *= scaleY;
                    for (var i = 0; i < 4; i++) {
                      transform[i] = Math.sign(transform[i]);
                    }
                    container.style.transform = "matrix(".concat(transform.join(","), ")");
                  } else {
                    container.style.transform = "matrix(".concat(viewport.transform.join(","), ")");
                  }
                  container.style.transformOrigin = "".concat(-rect[0], "px ").concat(-rect[1], "px");
                  if (!ignoreBorder && data.borderStyle.width > 0) {
                    container.style.borderWidth = "".concat(data.borderStyle.width, "px");
                    if (data.borderStyle.style !== _util2.AnnotationBorderStyleType.UNDERLINE) {
                      width -= 2 * data.borderStyle.width;
                      height -= 2 * data.borderStyle.width;
                    }
                    var horizontalRadius = data.borderStyle.horizontalCornerRadius;
                    var verticalRadius = data.borderStyle.verticalCornerRadius;
                    if (horizontalRadius > 0 || verticalRadius > 0) {
                      var radius = "".concat(horizontalRadius, "px / ").concat(verticalRadius, "px");
                      container.style.borderRadius = radius;
                    }
                    switch (data.borderStyle.style) {
                      case _util2.AnnotationBorderStyleType.SOLID:
                        container.style.borderStyle = "solid";
                        break;
                      case _util2.AnnotationBorderStyleType.DASHED:
                        container.style.borderStyle = "dashed";
                        break;
                      case _util2.AnnotationBorderStyleType.BEVELED:
                        (0, _util2.warn)("Unimplemented border style: beveled");
                        break;
                      case _util2.AnnotationBorderStyleType.INSET:
                        (0, _util2.warn)("Unimplemented border style: inset");
                        break;
                      case _util2.AnnotationBorderStyleType.UNDERLINE:
                        container.style.borderBottomStyle = "solid";
                        break;
                      default:
                        break;
                    }
                    var borderColor = data.borderColor || data.color || null;
                    if (borderColor) {
                      container.style.borderColor = _util2.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);
                    } else {
                      container.style.borderWidth = 0;
                    }
                  }
                  container.style.left = "".concat(rect[0], "px");
                  container.style.top = "".concat(rect[1], "px");
                  if (data.hasOwnCanvas) {
                    container.style.width = container.style.height = "auto";
                  } else {
                    container.style.width = "".concat(width, "px");
                    container.style.height = "".concat(height, "px");
                  }
                  return container;
                }
              }, {
                key: "_createQuadrilaterals",
                value: function _createQuadrilaterals() {
                  var ignoreBorder = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  if (!this.data.quadPoints) {
                    return null;
                  }
                  var quadrilaterals = [];
                  var savedRect = this.data.rect;
                  var _iterator = _createForOfIteratorHelper2(this.data.quadPoints), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var quadPoint = _step.value;
                      this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];
                      quadrilaterals.push(this._createContainer(ignoreBorder));
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                  this.data.rect = savedRect;
                  return quadrilaterals;
                }
              }, {
                key: "_createPopup",
                value: function _createPopup(trigger, data) {
                  var container = this.container;
                  if (this.quadrilaterals) {
                    trigger = trigger || this.quadrilaterals;
                    container = this.quadrilaterals[0];
                  }
                  if (!trigger) {
                    trigger = document.createElement("div");
                    trigger.style.height = container.style.height;
                    trigger.style.width = container.style.width;
                    container.appendChild(trigger);
                  }
                  var popupElement = new PopupElement({
                    container,
                    trigger,
                    color: data.color,
                    titleObj: data.titleObj,
                    modificationDate: data.modificationDate,
                    contentsObj: data.contentsObj,
                    richText: data.richText,
                    hideWrapper: true
                  });
                  var popup = popupElement.render();
                  popup.style.left = container.style.width;
                  container.appendChild(popup);
                }
              }, {
                key: "_renderQuadrilaterals",
                value: function _renderQuadrilaterals(className) {
                  var _iterator2 = _createForOfIteratorHelper2(this.quadrilaterals), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var quadrilateral = _step2.value;
                      quadrilateral.className = className;
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  return this.quadrilaterals;
                }
              }, {
                key: "render",
                value: function render() {
                  (0, _util2.unreachable)("Abstract method `AnnotationElement.render` called");
                }
              }, {
                key: "_getElementsByName",
                value: function _getElementsByName(name) {
                  var skipId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  var fields = [];
                  if (this._fieldObjects) {
                    var fieldObj = this._fieldObjects[name];
                    if (fieldObj) {
                      var _iterator3 = _createForOfIteratorHelper2(fieldObj), _step3;
                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                          var _step3$value = _step3.value, page = _step3$value.page, id = _step3$value.id, exportValues = _step3$value.exportValues;
                          if (page === -1) {
                            continue;
                          }
                          if (id === skipId) {
                            continue;
                          }
                          var exportValue = typeof exportValues === "string" ? exportValues : null;
                          var domElement = document.getElementById(id);
                          if (domElement && !GetElementsByNameSet.has(domElement)) {
                            (0, _util2.warn)("_getElementsByName - element not allowed: ".concat(id));
                            continue;
                          }
                          fields.push({
                            id,
                            exportValue,
                            domElement
                          });
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }
                    }
                    return fields;
                  }
                  var _iterator4 = _createForOfIteratorHelper2(document.getElementsByName(name)), _step4;
                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                      var _domElement = _step4.value;
                      var _id = _domElement.id, _exportValue = _domElement.exportValue;
                      if (_id === skipId) {
                        continue;
                      }
                      if (!GetElementsByNameSet.has(_domElement)) {
                        continue;
                      }
                      fields.push({
                        id: _id,
                        exportValue: _exportValue,
                        domElement: _domElement
                      });
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                  return fields;
                }
              }], [{
                key: "platform",
                get: function get2() {
                  var platform = typeof navigator !== "undefined" ? navigator.platform : "";
                  return (0, _util2.shadow)(this, "platform", {
                    isWin: platform.includes("Win"),
                    isMac: platform.includes("Mac")
                  });
                }
              }]);
              return AnnotationElement2;
            }();
            var LinkAnnotationElement = function(_AnnotationElement) {
              _inherits2(LinkAnnotationElement2, _AnnotationElement);
              var _super = _createSuper10(LinkAnnotationElement2);
              function LinkAnnotationElement2(parameters) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                _classCallCheck3(this, LinkAnnotationElement2);
                var isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.resetForm || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions["Mouse Up"] || parameters.data.actions["Mouse Down"]));
                return _super.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: !!(options !== null && options !== void 0 && options.ignoreBorder),
                  createQuadrilaterals: true
                });
              }
              _createClass3(LinkAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var data = this.data, linkService = this.linkService;
                  var link = document.createElement("a");
                  if (data.url) {
                    var _linkService$addLinkA;
                    if (!linkService.addLinkAttributes) {
                      (0, _util2.warn)("LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.");
                    }
                    (_linkService$addLinkA = linkService.addLinkAttributes) === null || _linkService$addLinkA === void 0 ? void 0 : _linkService$addLinkA.call(linkService, link, data.url, data.newWindow);
                  } else if (data.action) {
                    this._bindNamedAction(link, data.action);
                  } else if (data.dest) {
                    this._bindLink(link, data.dest);
                  } else {
                    var hasClickAction = false;
                    if (data.actions && (data.actions.Action || data.actions["Mouse Up"] || data.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
                      hasClickAction = true;
                      this._bindJSAction(link, data);
                    }
                    if (data.resetForm) {
                      this._bindResetFormAction(link, data.resetForm);
                    } else if (!hasClickAction) {
                      this._bindLink(link, "");
                    }
                  }
                  if (this.quadrilaterals) {
                    return this._renderQuadrilaterals("linkAnnotation").map(function(quadrilateral, index) {
                      var linkElement = index === 0 ? link : link.cloneNode();
                      quadrilateral.appendChild(linkElement);
                      return quadrilateral;
                    });
                  }
                  this.container.className = "linkAnnotation";
                  this.container.appendChild(link);
                  return this.container;
                }
              }, {
                key: "_bindLink",
                value: function _bindLink(link, destination) {
                  var _this = this;
                  link.href = this.linkService.getDestinationHash(destination);
                  link.onclick = function() {
                    if (destination) {
                      _this.linkService.goToDestination(destination);
                    }
                    return false;
                  };
                  if (destination || destination === "") {
                    link.className = "internalLink";
                  }
                }
              }, {
                key: "_bindNamedAction",
                value: function _bindNamedAction(link, action) {
                  var _this2 = this;
                  link.href = this.linkService.getAnchorUrl("");
                  link.onclick = function() {
                    _this2.linkService.executeNamedAction(action);
                    return false;
                  };
                  link.className = "internalLink";
                }
              }, {
                key: "_bindJSAction",
                value: function _bindJSAction(link, data) {
                  var _this3 = this;
                  link.href = this.linkService.getAnchorUrl("");
                  var map = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
                  var _loop = function _loop2() {
                    var name = _Object$keys[_i2];
                    var jsName = map.get(name);
                    if (!jsName) {
                      return "continue";
                    }
                    link[jsName] = function() {
                      var _this3$linkService$ev;
                      (_this3$linkService$ev = _this3.linkService.eventBus) === null || _this3$linkService$ev === void 0 ? void 0 : _this3$linkService$ev.dispatch("dispatcheventinsandbox", {
                        source: _this3,
                        detail: {
                          id: data.id,
                          name
                        }
                      });
                      return false;
                    };
                  };
                  for (var _i2 = 0, _Object$keys = Object.keys(data.actions); _i2 < _Object$keys.length; _i2++) {
                    var _ret = _loop();
                    if (_ret === "continue")
                      continue;
                  }
                  if (!link.onclick) {
                    link.onclick = function() {
                      return false;
                    };
                  }
                  link.className = "internalLink";
                }
              }, {
                key: "_bindResetFormAction",
                value: function _bindResetFormAction(link, resetForm) {
                  var _this4 = this;
                  var otherClickAction = link.onclick;
                  if (!otherClickAction) {
                    link.href = this.linkService.getAnchorUrl("");
                  }
                  link.className = "internalLink";
                  if (!this._fieldObjects) {
                    (0, _util2.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.');
                    if (!otherClickAction) {
                      link.onclick = function() {
                        return false;
                      };
                    }
                    return;
                  }
                  link.onclick = function() {
                    if (otherClickAction) {
                      otherClickAction();
                    }
                    var resetFormFields = resetForm.fields, resetFormRefs = resetForm.refs, include = resetForm.include;
                    var allFields = [];
                    if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {
                      var fieldIds = new Set(resetFormRefs);
                      var _iterator5 = _createForOfIteratorHelper2(resetFormFields), _step5;
                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                          var fieldName = _step5.value;
                          var _fields = _this4._fieldObjects[fieldName] || [];
                          var _iterator7 = _createForOfIteratorHelper2(_fields), _step7;
                          try {
                            for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                              var id = _step7.value.id;
                              fieldIds.add(id);
                            }
                          } catch (err) {
                            _iterator7.e(err);
                          } finally {
                            _iterator7.f();
                          }
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                      for (var _i3 = 0, _Object$values = Object.values(_this4._fieldObjects); _i3 < _Object$values.length; _i3++) {
                        var fields = _Object$values[_i3];
                        var _iterator6 = _createForOfIteratorHelper2(fields), _step6;
                        try {
                          for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                            var field = _step6.value;
                            if (fieldIds.has(field.id) === include) {
                              allFields.push(field);
                            }
                          }
                        } catch (err) {
                          _iterator6.e(err);
                        } finally {
                          _iterator6.f();
                        }
                      }
                    } else {
                      for (var _i4 = 0, _Object$values2 = Object.values(_this4._fieldObjects); _i4 < _Object$values2.length; _i4++) {
                        var _fields2 = _Object$values2[_i4];
                        allFields.push.apply(allFields, _toConsumableArray3(_fields2));
                      }
                    }
                    var storage = _this4.annotationStorage;
                    var allIds = [];
                    for (var _i5 = 0, _allFields = allFields; _i5 < _allFields.length; _i5++) {
                      var _field = _allFields[_i5];
                      var _id2 = _field.id;
                      allIds.push(_id2);
                      switch (_field.type) {
                        case "text": {
                          var value = _field.defaultValue || "";
                          storage.setValue(_id2, {
                            value,
                            valueAsString: value
                          });
                          break;
                        }
                        case "checkbox":
                        case "radiobutton": {
                          var _value = _field.defaultValue === _field.exportValues;
                          storage.setValue(_id2, {
                            value: _value
                          });
                          break;
                        }
                        case "combobox":
                        case "listbox": {
                          var _value2 = _field.defaultValue || "";
                          storage.setValue(_id2, {
                            value: _value2
                          });
                          break;
                        }
                        default:
                          continue;
                      }
                      var domElement = document.getElementById(_id2);
                      if (!domElement || !GetElementsByNameSet.has(domElement)) {
                        continue;
                      }
                      domElement.dispatchEvent(new Event("resetform"));
                    }
                    if (_this4.enableScripting) {
                      var _this4$linkService$ev;
                      (_this4$linkService$ev = _this4.linkService.eventBus) === null || _this4$linkService$ev === void 0 ? void 0 : _this4$linkService$ev.dispatch("dispatcheventinsandbox", {
                        source: _this4,
                        detail: {
                          id: "app",
                          ids: allIds,
                          name: "ResetForm"
                        }
                      });
                    }
                    return false;
                  };
                }
              }]);
              return LinkAnnotationElement2;
            }(AnnotationElement);
            var TextAnnotationElement = function(_AnnotationElement2) {
              _inherits2(TextAnnotationElement2, _AnnotationElement2);
              var _super2 = _createSuper10(TextAnnotationElement2);
              function TextAnnotationElement2(parameters) {
                var _parameters$data$titl, _parameters$data$cont, _parameters$data$rich;
                _classCallCheck3(this, TextAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl = parameters.data.titleObj) !== null && _parameters$data$titl !== void 0 && _parameters$data$titl.str || (_parameters$data$cont = parameters.data.contentsObj) !== null && _parameters$data$cont !== void 0 && _parameters$data$cont.str || (_parameters$data$rich = parameters.data.richText) !== null && _parameters$data$rich !== void 0 && _parameters$data$rich.str);
                return _super2.call(this, parameters, {
                  isRenderable
                });
              }
              _createClass3(TextAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "textAnnotation";
                  var image = document.createElement("img");
                  image.style.height = this.container.style.height;
                  image.style.width = this.container.style.width;
                  image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
                  image.alt = "[{{type}} Annotation]";
                  image.dataset.l10nId = "text_annotation_type";
                  image.dataset.l10nArgs = JSON.stringify({
                    type: this.data.name
                  });
                  if (!this.data.hasPopup) {
                    this._createPopup(image, this.data);
                  }
                  this.container.appendChild(image);
                  return this.container;
                }
              }]);
              return TextAnnotationElement2;
            }(AnnotationElement);
            var WidgetAnnotationElement = function(_AnnotationElement3) {
              _inherits2(WidgetAnnotationElement2, _AnnotationElement3);
              var _super3 = _createSuper10(WidgetAnnotationElement2);
              function WidgetAnnotationElement2() {
                _classCallCheck3(this, WidgetAnnotationElement2);
                return _super3.apply(this, arguments);
              }
              _createClass3(WidgetAnnotationElement2, [{
                key: "render",
                value: function render() {
                  if (this.data.alternativeText) {
                    this.container.title = this.data.alternativeText;
                  }
                  return this.container;
                }
              }, {
                key: "_getKeyModifier",
                value: function _getKeyModifier(event) {
                  var _AnnotationElement$pl = AnnotationElement.platform, isWin = _AnnotationElement$pl.isWin, isMac = _AnnotationElement$pl.isMac;
                  return isWin && event.ctrlKey || isMac && event.metaKey;
                }
              }, {
                key: "_setEventListener",
                value: function _setEventListener(element, baseName, eventName, valueGetter) {
                  var _this5 = this;
                  if (baseName.includes("mouse")) {
                    element.addEventListener(baseName, function(event) {
                      var _this5$linkService$ev;
                      (_this5$linkService$ev = _this5.linkService.eventBus) === null || _this5$linkService$ev === void 0 ? void 0 : _this5$linkService$ev.dispatch("dispatcheventinsandbox", {
                        source: _this5,
                        detail: {
                          id: _this5.data.id,
                          name: eventName,
                          value: valueGetter(event),
                          shift: event.shiftKey,
                          modifier: _this5._getKeyModifier(event)
                        }
                      });
                    });
                  } else {
                    element.addEventListener(baseName, function(event) {
                      var _this5$linkService$ev2;
                      (_this5$linkService$ev2 = _this5.linkService.eventBus) === null || _this5$linkService$ev2 === void 0 ? void 0 : _this5$linkService$ev2.dispatch("dispatcheventinsandbox", {
                        source: _this5,
                        detail: {
                          id: _this5.data.id,
                          name: eventName,
                          value: event.target.checked
                        }
                      });
                    });
                  }
                }
              }, {
                key: "_setEventListeners",
                value: function _setEventListeners(element, names, getter) {
                  var _iterator8 = _createForOfIteratorHelper2(names), _step8;
                  try {
                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                      var _this$data$actions;
                      var _step8$value = _slicedToArray3(_step8.value, 2), baseName = _step8$value[0], eventName = _step8$value[1];
                      if (eventName === "Action" || (_this$data$actions = this.data.actions) !== null && _this$data$actions !== void 0 && _this$data$actions[eventName]) {
                        this._setEventListener(element, baseName, eventName, getter);
                      }
                    }
                  } catch (err) {
                    _iterator8.e(err);
                  } finally {
                    _iterator8.f();
                  }
                }
              }, {
                key: "_setBackgroundColor",
                value: function _setBackgroundColor(element) {
                  var color = this.data.backgroundColor || null;
                  element.style.backgroundColor = color === null ? "transparent" : _util2.Util.makeHexColor(color[0], color[1], color[2]);
                }
              }, {
                key: "_dispatchEventFromSandbox",
                value: function _dispatchEventFromSandbox(actions, jsEvent) {
                  var _this6 = this;
                  var setColor = function setColor2(jsName, styleName, event) {
                    var color = event.detail[jsName];
                    event.target.style[styleName] = _scripting_utils.ColorConverters["".concat(color[0], "_HTML")](color.slice(1));
                  };
                  var commonActions = {
                    display: function display(event) {
                      var hidden = event.detail.display % 2 === 1;
                      event.target.style.visibility = hidden ? "hidden" : "visible";
                      _this6.annotationStorage.setValue(_this6.data.id, {
                        hidden,
                        print: event.detail.display === 0 || event.detail.display === 3
                      });
                    },
                    print: function print(event) {
                      _this6.annotationStorage.setValue(_this6.data.id, {
                        print: event.detail.print
                      });
                    },
                    hidden: function hidden(event) {
                      event.target.style.visibility = event.detail.hidden ? "hidden" : "visible";
                      _this6.annotationStorage.setValue(_this6.data.id, {
                        hidden: event.detail.hidden
                      });
                    },
                    focus: function focus(event) {
                      setTimeout(function() {
                        return event.target.focus({
                          preventScroll: false
                        });
                      }, 0);
                    },
                    userName: function userName(event) {
                      event.target.title = event.detail.userName;
                    },
                    readonly: function readonly(event) {
                      if (event.detail.readonly) {
                        event.target.setAttribute("readonly", "");
                      } else {
                        event.target.removeAttribute("readonly");
                      }
                    },
                    required: function required(event) {
                      if (event.detail.required) {
                        event.target.setAttribute("required", "");
                      } else {
                        event.target.removeAttribute("required");
                      }
                    },
                    bgColor: function bgColor(event) {
                      setColor("bgColor", "backgroundColor", event);
                    },
                    fillColor: function fillColor(event) {
                      setColor("fillColor", "backgroundColor", event);
                    },
                    fgColor: function fgColor(event) {
                      setColor("fgColor", "color", event);
                    },
                    textColor: function textColor(event) {
                      setColor("textColor", "color", event);
                    },
                    borderColor: function borderColor(event) {
                      setColor("borderColor", "borderColor", event);
                    },
                    strokeColor: function strokeColor(event) {
                      setColor("strokeColor", "borderColor", event);
                    }
                  };
                  for (var _i6 = 0, _Object$keys2 = Object.keys(jsEvent.detail); _i6 < _Object$keys2.length; _i6++) {
                    var name = _Object$keys2[_i6];
                    var action = actions[name] || commonActions[name];
                    if (action) {
                      action(jsEvent);
                    }
                  }
                }
              }]);
              return WidgetAnnotationElement2;
            }(AnnotationElement);
            var TextWidgetAnnotationElement = function(_WidgetAnnotationElem) {
              _inherits2(TextWidgetAnnotationElement2, _WidgetAnnotationElem);
              var _super4 = _createSuper10(TextWidgetAnnotationElement2);
              function TextWidgetAnnotationElement2(parameters) {
                _classCallCheck3(this, TextWidgetAnnotationElement2);
                var isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
                return _super4.call(this, parameters, {
                  isRenderable
                });
              }
              _createClass3(TextWidgetAnnotationElement2, [{
                key: "setPropertyOnSiblings",
                value: function setPropertyOnSiblings(base, key, value, keyInStorage) {
                  var storage = this.annotationStorage;
                  var _iterator9 = _createForOfIteratorHelper2(this._getElementsByName(base.name, base.id)), _step9;
                  try {
                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                      var element = _step9.value;
                      if (element.domElement) {
                        element.domElement[key] = value;
                      }
                      storage.setValue(element.id, _defineProperty2({}, keyInStorage, value));
                    }
                  } catch (err) {
                    _iterator9.e(err);
                  } finally {
                    _iterator9.f();
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var _this7 = this;
                  var storage = this.annotationStorage;
                  var id = this.data.id;
                  this.container.className = "textWidgetAnnotation";
                  var element = null;
                  if (this.renderForms) {
                    var storedData = storage.getValue(id, {
                      value: this.data.fieldValue,
                      valueAsString: this.data.fieldValue
                    });
                    var textContent = storedData.valueAsString || storedData.value || "";
                    var elementData = {
                      userValue: null,
                      formattedValue: null,
                      beforeInputSelectionRange: null,
                      beforeInputValue: null
                    };
                    if (this.data.multiLine) {
                      element = document.createElement("textarea");
                      element.textContent = textContent;
                    } else {
                      element = document.createElement("input");
                      element.type = "text";
                      element.setAttribute("value", textContent);
                    }
                    GetElementsByNameSet.add(element);
                    element.disabled = this.data.readOnly;
                    element.name = this.data.fieldName;
                    element.tabIndex = DEFAULT_TAB_INDEX;
                    elementData.userValue = textContent;
                    element.setAttribute("id", id);
                    element.addEventListener("input", function(event) {
                      storage.setValue(id, {
                        value: event.target.value
                      });
                      _this7.setPropertyOnSiblings(element, "value", event.target.value, "value");
                    });
                    element.addEventListener("resetform", function(event) {
                      var defaultValue = _this7.data.defaultFieldValue || "";
                      element.value = elementData.userValue = defaultValue;
                      delete elementData.formattedValue;
                    });
                    var blurListener = function blurListener2(event) {
                      if (elementData.formattedValue) {
                        event.target.value = elementData.formattedValue;
                      }
                      event.target.scrollLeft = 0;
                      elementData.beforeInputSelectionRange = null;
                    };
                    if (this.enableScripting && this.hasJSActions) {
                      var _this$data$actions2;
                      element.addEventListener("focus", function(event) {
                        if (elementData.userValue) {
                          event.target.value = elementData.userValue;
                        }
                      });
                      element.addEventListener("updatefromsandbox", function(jsEvent) {
                        var actions = {
                          value: function value(event) {
                            elementData.userValue = event.detail.value || "";
                            storage.setValue(id, {
                              value: elementData.userValue.toString()
                            });
                            if (!elementData.formattedValue) {
                              event.target.value = elementData.userValue;
                            }
                          },
                          valueAsString: function valueAsString(event) {
                            elementData.formattedValue = event.detail.valueAsString || "";
                            if (event.target !== document.activeElement) {
                              event.target.value = elementData.formattedValue;
                            }
                            storage.setValue(id, {
                              formattedValue: elementData.formattedValue
                            });
                          },
                          selRange: function selRange(event) {
                            var _event$detail$selRang = _slicedToArray3(event.detail.selRange, 2), selStart = _event$detail$selRang[0], selEnd = _event$detail$selRang[1];
                            if (selStart >= 0 && selEnd < event.target.value.length) {
                              event.target.setSelectionRange(selStart, selEnd);
                            }
                          }
                        };
                        _this7._dispatchEventFromSandbox(actions, jsEvent);
                      });
                      element.addEventListener("keydown", function(event) {
                        var _this7$linkService$ev;
                        elementData.beforeInputValue = event.target.value;
                        var commitKey = -1;
                        if (event.key === "Escape") {
                          commitKey = 0;
                        } else if (event.key === "Enter") {
                          commitKey = 2;
                        } else if (event.key === "Tab") {
                          commitKey = 3;
                        }
                        if (commitKey === -1) {
                          return;
                        }
                        elementData.userValue = event.target.value;
                        (_this7$linkService$ev = _this7.linkService.eventBus) === null || _this7$linkService$ev === void 0 ? void 0 : _this7$linkService$ev.dispatch("dispatcheventinsandbox", {
                          source: _this7,
                          detail: {
                            id,
                            name: "Keystroke",
                            value: event.target.value,
                            willCommit: true,
                            commitKey,
                            selStart: event.target.selectionStart,
                            selEnd: event.target.selectionEnd
                          }
                        });
                      });
                      var _blurListener = blurListener;
                      blurListener = null;
                      element.addEventListener("blur", function(event) {
                        if (_this7._mouseState.isDown) {
                          var _this7$linkService$ev2;
                          elementData.userValue = event.target.value;
                          (_this7$linkService$ev2 = _this7.linkService.eventBus) === null || _this7$linkService$ev2 === void 0 ? void 0 : _this7$linkService$ev2.dispatch("dispatcheventinsandbox", {
                            source: _this7,
                            detail: {
                              id,
                              name: "Keystroke",
                              value: event.target.value,
                              willCommit: true,
                              commitKey: 1,
                              selStart: event.target.selectionStart,
                              selEnd: event.target.selectionEnd
                            }
                          });
                        }
                        _blurListener(event);
                      });
                      element.addEventListener("mousedown", function(event) {
                        elementData.beforeInputValue = event.target.value;
                        elementData.beforeInputSelectionRange = null;
                      });
                      element.addEventListener("keyup", function(event) {
                        if (event.target.selectionStart === event.target.selectionEnd) {
                          elementData.beforeInputSelectionRange = null;
                        }
                      });
                      element.addEventListener("select", function(event) {
                        elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];
                      });
                      if ((_this$data$actions2 = this.data.actions) !== null && _this$data$actions2 !== void 0 && _this$data$actions2.Keystroke) {
                        element.addEventListener("input", function(event) {
                          var _this7$linkService$ev3;
                          var selStart = -1;
                          var selEnd = -1;
                          if (elementData.beforeInputSelectionRange) {
                            var _elementData$beforeIn = _slicedToArray3(elementData.beforeInputSelectionRange, 2);
                            selStart = _elementData$beforeIn[0];
                            selEnd = _elementData$beforeIn[1];
                          }
                          (_this7$linkService$ev3 = _this7.linkService.eventBus) === null || _this7$linkService$ev3 === void 0 ? void 0 : _this7$linkService$ev3.dispatch("dispatcheventinsandbox", {
                            source: _this7,
                            detail: {
                              id,
                              name: "Keystroke",
                              value: elementData.beforeInputValue,
                              change: event.data,
                              willCommit: false,
                              selStart,
                              selEnd
                            }
                          });
                        });
                      }
                      this._setEventListeners(element, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function(event) {
                        return event.target.value;
                      });
                    }
                    if (blurListener) {
                      element.addEventListener("blur", blurListener);
                    }
                    if (this.data.maxLen !== null) {
                      element.maxLength = this.data.maxLen;
                    }
                    if (this.data.comb) {
                      var fieldWidth = this.data.rect[2] - this.data.rect[0];
                      var combWidth = fieldWidth / this.data.maxLen;
                      element.classList.add("comb");
                      element.style.letterSpacing = "calc(".concat(combWidth, "px - 1ch)");
                    }
                  } else {
                    element = document.createElement("div");
                    element.textContent = this.data.fieldValue;
                    element.style.verticalAlign = "middle";
                    element.style.display = "table-cell";
                  }
                  this._setTextStyle(element);
                  this._setBackgroundColor(element);
                  this.container.appendChild(element);
                  return this.container;
                }
              }, {
                key: "_setTextStyle",
                value: function _setTextStyle(element) {
                  var TEXT_ALIGNMENT = ["left", "center", "right"];
                  var _this$data$defaultApp = this.data.defaultAppearanceData, fontSize = _this$data$defaultApp.fontSize, fontColor = _this$data$defaultApp.fontColor;
                  var style = element.style;
                  if (fontSize) {
                    style.fontSize = "".concat(fontSize, "px");
                  }
                  style.color = _util2.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);
                  if (this.data.textAlignment !== null) {
                    style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
                  }
                }
              }]);
              return TextWidgetAnnotationElement2;
            }(WidgetAnnotationElement);
            var CheckboxWidgetAnnotationElement = function(_WidgetAnnotationElem2) {
              _inherits2(CheckboxWidgetAnnotationElement2, _WidgetAnnotationElem2);
              var _super5 = _createSuper10(CheckboxWidgetAnnotationElement2);
              function CheckboxWidgetAnnotationElement2(parameters) {
                _classCallCheck3(this, CheckboxWidgetAnnotationElement2);
                return _super5.call(this, parameters, {
                  isRenderable: parameters.renderForms
                });
              }
              _createClass3(CheckboxWidgetAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var _this8 = this;
                  var storage = this.annotationStorage;
                  var data = this.data;
                  var id = data.id;
                  var value = storage.getValue(id, {
                    value: data.exportValue === data.fieldValue
                  }).value;
                  if (typeof value === "string") {
                    value = value !== "Off";
                    storage.setValue(id, {
                      value
                    });
                  }
                  this.container.className = "buttonWidgetAnnotation checkBox";
                  var element = document.createElement("input");
                  GetElementsByNameSet.add(element);
                  element.disabled = data.readOnly;
                  element.type = "checkbox";
                  element.name = data.fieldName;
                  if (value) {
                    element.setAttribute("checked", true);
                  }
                  element.setAttribute("id", id);
                  element.setAttribute("exportValue", data.exportValue);
                  element.tabIndex = DEFAULT_TAB_INDEX;
                  element.addEventListener("change", function(event) {
                    var _event$target = event.target, name = _event$target.name, checked = _event$target.checked;
                    var _iterator10 = _createForOfIteratorHelper2(_this8._getElementsByName(name, id)), _step10;
                    try {
                      for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                        var checkbox = _step10.value;
                        var curChecked = checked && checkbox.exportValue === data.exportValue;
                        if (checkbox.domElement) {
                          checkbox.domElement.checked = curChecked;
                        }
                        storage.setValue(checkbox.id, {
                          value: curChecked
                        });
                      }
                    } catch (err) {
                      _iterator10.e(err);
                    } finally {
                      _iterator10.f();
                    }
                    storage.setValue(id, {
                      value: checked
                    });
                  });
                  element.addEventListener("resetform", function(event) {
                    var defaultValue = data.defaultFieldValue || "Off";
                    event.target.checked = defaultValue === data.exportValue;
                  });
                  if (this.enableScripting && this.hasJSActions) {
                    element.addEventListener("updatefromsandbox", function(jsEvent) {
                      var actions = {
                        value: function value2(event) {
                          event.target.checked = event.detail.value !== "Off";
                          storage.setValue(id, {
                            value: event.target.checked
                          });
                        }
                      };
                      _this8._dispatchEventFromSandbox(actions, jsEvent);
                    });
                    this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function(event) {
                      return event.target.checked;
                    });
                  }
                  this._setBackgroundColor(element);
                  this.container.appendChild(element);
                  return this.container;
                }
              }]);
              return CheckboxWidgetAnnotationElement2;
            }(WidgetAnnotationElement);
            var RadioButtonWidgetAnnotationElement = function(_WidgetAnnotationElem3) {
              _inherits2(RadioButtonWidgetAnnotationElement2, _WidgetAnnotationElem3);
              var _super6 = _createSuper10(RadioButtonWidgetAnnotationElement2);
              function RadioButtonWidgetAnnotationElement2(parameters) {
                _classCallCheck3(this, RadioButtonWidgetAnnotationElement2);
                return _super6.call(this, parameters, {
                  isRenderable: parameters.renderForms
                });
              }
              _createClass3(RadioButtonWidgetAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var _this9 = this;
                  this.container.className = "buttonWidgetAnnotation radioButton";
                  var storage = this.annotationStorage;
                  var data = this.data;
                  var id = data.id;
                  var value = storage.getValue(id, {
                    value: data.fieldValue === data.buttonValue
                  }).value;
                  if (typeof value === "string") {
                    value = value !== data.buttonValue;
                    storage.setValue(id, {
                      value
                    });
                  }
                  var element = document.createElement("input");
                  GetElementsByNameSet.add(element);
                  element.disabled = data.readOnly;
                  element.type = "radio";
                  element.name = data.fieldName;
                  if (value) {
                    element.setAttribute("checked", true);
                  }
                  element.setAttribute("id", id);
                  element.tabIndex = DEFAULT_TAB_INDEX;
                  element.addEventListener("change", function(event) {
                    var _event$target2 = event.target, name = _event$target2.name, checked = _event$target2.checked;
                    var _iterator11 = _createForOfIteratorHelper2(_this9._getElementsByName(name, id)), _step11;
                    try {
                      for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                        var radio = _step11.value;
                        storage.setValue(radio.id, {
                          value: false
                        });
                      }
                    } catch (err) {
                      _iterator11.e(err);
                    } finally {
                      _iterator11.f();
                    }
                    storage.setValue(id, {
                      value: checked
                    });
                  });
                  element.addEventListener("resetform", function(event) {
                    var defaultValue = data.defaultFieldValue;
                    event.target.checked = defaultValue !== null && defaultValue !== void 0 && defaultValue === data.buttonValue;
                  });
                  if (this.enableScripting && this.hasJSActions) {
                    var pdfButtonValue = data.buttonValue;
                    element.addEventListener("updatefromsandbox", function(jsEvent) {
                      var actions = {
                        value: function value2(event) {
                          var checked = pdfButtonValue === event.detail.value;
                          var _iterator12 = _createForOfIteratorHelper2(_this9._getElementsByName(event.target.name)), _step12;
                          try {
                            for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                              var radio = _step12.value;
                              var curChecked = checked && radio.id === id;
                              if (radio.domElement) {
                                radio.domElement.checked = curChecked;
                              }
                              storage.setValue(radio.id, {
                                value: curChecked
                              });
                            }
                          } catch (err) {
                            _iterator12.e(err);
                          } finally {
                            _iterator12.f();
                          }
                        }
                      };
                      _this9._dispatchEventFromSandbox(actions, jsEvent);
                    });
                    this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function(event) {
                      return event.target.checked;
                    });
                  }
                  this._setBackgroundColor(element);
                  this.container.appendChild(element);
                  return this.container;
                }
              }]);
              return RadioButtonWidgetAnnotationElement2;
            }(WidgetAnnotationElement);
            var PushButtonWidgetAnnotationElement = function(_LinkAnnotationElemen) {
              _inherits2(PushButtonWidgetAnnotationElement2, _LinkAnnotationElemen);
              var _super7 = _createSuper10(PushButtonWidgetAnnotationElement2);
              function PushButtonWidgetAnnotationElement2(parameters) {
                _classCallCheck3(this, PushButtonWidgetAnnotationElement2);
                return _super7.call(this, parameters, {
                  ignoreBorder: parameters.data.hasAppearance
                });
              }
              _createClass3(PushButtonWidgetAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var container = _get(_getPrototypeOf2(PushButtonWidgetAnnotationElement2.prototype), "render", this).call(this);
                  container.className = "buttonWidgetAnnotation pushButton";
                  if (this.data.alternativeText) {
                    container.title = this.data.alternativeText;
                  }
                  return container;
                }
              }]);
              return PushButtonWidgetAnnotationElement2;
            }(LinkAnnotationElement);
            var ChoiceWidgetAnnotationElement = function(_WidgetAnnotationElem4) {
              _inherits2(ChoiceWidgetAnnotationElement2, _WidgetAnnotationElem4);
              var _super8 = _createSuper10(ChoiceWidgetAnnotationElement2);
              function ChoiceWidgetAnnotationElement2(parameters) {
                _classCallCheck3(this, ChoiceWidgetAnnotationElement2);
                return _super8.call(this, parameters, {
                  isRenderable: parameters.renderForms
                });
              }
              _createClass3(ChoiceWidgetAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var _this10 = this;
                  this.container.className = "choiceWidgetAnnotation";
                  var storage = this.annotationStorage;
                  var id = this.data.id;
                  storage.getValue(id, {
                    value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : void 0
                  });
                  var fontSize = this.data.defaultAppearanceData.fontSize;
                  if (!fontSize) {
                    fontSize = 9;
                  }
                  var fontSizeStyle = "calc(".concat(fontSize, "px * var(--zoom-factor))");
                  var selectElement = document.createElement("select");
                  GetElementsByNameSet.add(selectElement);
                  selectElement.disabled = this.data.readOnly;
                  selectElement.name = this.data.fieldName;
                  selectElement.setAttribute("id", id);
                  selectElement.tabIndex = DEFAULT_TAB_INDEX;
                  selectElement.style.fontSize = "".concat(fontSize, "px");
                  if (!this.data.combo) {
                    selectElement.size = this.data.options.length;
                    if (this.data.multiSelect) {
                      selectElement.multiple = true;
                    }
                  }
                  selectElement.addEventListener("resetform", function(event) {
                    var defaultValue = _this10.data.defaultFieldValue;
                    var _iterator13 = _createForOfIteratorHelper2(selectElement.options), _step13;
                    try {
                      for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                        var option2 = _step13.value;
                        option2.selected = option2.value === defaultValue;
                      }
                    } catch (err) {
                      _iterator13.e(err);
                    } finally {
                      _iterator13.f();
                    }
                  });
                  var _iterator14 = _createForOfIteratorHelper2(this.data.options), _step14;
                  try {
                    for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                      var option = _step14.value;
                      var optionElement = document.createElement("option");
                      optionElement.textContent = option.displayValue;
                      optionElement.value = option.exportValue;
                      if (this.data.combo) {
                        optionElement.style.fontSize = fontSizeStyle;
                      }
                      if (this.data.fieldValue.includes(option.exportValue)) {
                        optionElement.setAttribute("selected", true);
                      }
                      selectElement.appendChild(optionElement);
                    }
                  } catch (err) {
                    _iterator14.e(err);
                  } finally {
                    _iterator14.f();
                  }
                  var getValue = function getValue2(event, isExport) {
                    var name = isExport ? "value" : "textContent";
                    var options = event.target.options;
                    if (!event.target.multiple) {
                      return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
                    }
                    return Array.prototype.filter.call(options, function(option2) {
                      return option2.selected;
                    }).map(function(option2) {
                      return option2[name];
                    });
                  };
                  var getItems = function getItems2(event) {
                    var options = event.target.options;
                    return Array.prototype.map.call(options, function(option2) {
                      return {
                        displayValue: option2.textContent,
                        exportValue: option2.value
                      };
                    });
                  };
                  if (this.enableScripting && this.hasJSActions) {
                    selectElement.addEventListener("updatefromsandbox", function(jsEvent) {
                      var actions = {
                        value: function value(event) {
                          var value2 = event.detail.value;
                          var values = new Set(Array.isArray(value2) ? value2 : [value2]);
                          var _iterator15 = _createForOfIteratorHelper2(selectElement.options), _step15;
                          try {
                            for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
                              var option2 = _step15.value;
                              option2.selected = values.has(option2.value);
                            }
                          } catch (err) {
                            _iterator15.e(err);
                          } finally {
                            _iterator15.f();
                          }
                          storage.setValue(id, {
                            value: getValue(event, true)
                          });
                        },
                        multipleSelection: function multipleSelection(event) {
                          selectElement.multiple = true;
                        },
                        remove: function remove(event) {
                          var options = selectElement.options;
                          var index = event.detail.remove;
                          options[index].selected = false;
                          selectElement.remove(index);
                          if (options.length > 0) {
                            var i = Array.prototype.findIndex.call(options, function(option2) {
                              return option2.selected;
                            });
                            if (i === -1) {
                              options[0].selected = true;
                            }
                          }
                          storage.setValue(id, {
                            value: getValue(event, true),
                            items: getItems(event)
                          });
                        },
                        clear: function clear(event) {
                          while (selectElement.length !== 0) {
                            selectElement.remove(0);
                          }
                          storage.setValue(id, {
                            value: null,
                            items: []
                          });
                        },
                        insert: function insert(event) {
                          var _event$detail$insert = event.detail.insert, index = _event$detail$insert.index, displayValue = _event$detail$insert.displayValue, exportValue = _event$detail$insert.exportValue;
                          var optionElement2 = document.createElement("option");
                          optionElement2.textContent = displayValue;
                          optionElement2.value = exportValue;
                          selectElement.insertBefore(optionElement2, selectElement.children[index]);
                          storage.setValue(id, {
                            value: getValue(event, true),
                            items: getItems(event)
                          });
                        },
                        items: function items(event) {
                          var items2 = event.detail.items;
                          while (selectElement.length !== 0) {
                            selectElement.remove(0);
                          }
                          var _iterator16 = _createForOfIteratorHelper2(items2), _step16;
                          try {
                            for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
                              var item = _step16.value;
                              var displayValue = item.displayValue, exportValue = item.exportValue;
                              var optionElement2 = document.createElement("option");
                              optionElement2.textContent = displayValue;
                              optionElement2.value = exportValue;
                              selectElement.appendChild(optionElement2);
                            }
                          } catch (err) {
                            _iterator16.e(err);
                          } finally {
                            _iterator16.f();
                          }
                          if (selectElement.options.length > 0) {
                            selectElement.options[0].selected = true;
                          }
                          storage.setValue(id, {
                            value: getValue(event, true),
                            items: getItems(event)
                          });
                        },
                        indices: function indices(event) {
                          var indices2 = new Set(event.detail.indices);
                          var _iterator17 = _createForOfIteratorHelper2(event.target.options), _step17;
                          try {
                            for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
                              var option2 = _step17.value;
                              option2.selected = indices2.has(option2.index);
                            }
                          } catch (err) {
                            _iterator17.e(err);
                          } finally {
                            _iterator17.f();
                          }
                          storage.setValue(id, {
                            value: getValue(event, true)
                          });
                        },
                        editable: function editable(event) {
                          event.target.disabled = !event.detail.editable;
                        }
                      };
                      _this10._dispatchEventFromSandbox(actions, jsEvent);
                    });
                    selectElement.addEventListener("input", function(event) {
                      var _this10$linkService$e;
                      var exportValue = getValue(event, true);
                      var value = getValue(event, false);
                      storage.setValue(id, {
                        value: exportValue
                      });
                      (_this10$linkService$e = _this10.linkService.eventBus) === null || _this10$linkService$e === void 0 ? void 0 : _this10$linkService$e.dispatch("dispatcheventinsandbox", {
                        source: _this10,
                        detail: {
                          id,
                          name: "Keystroke",
                          value,
                          changeEx: exportValue,
                          willCommit: true,
                          commitKey: 1,
                          keyDown: false
                        }
                      });
                    });
                    this._setEventListeners(selectElement, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"]], function(event) {
                      return event.target.checked;
                    });
                  } else {
                    selectElement.addEventListener("input", function(event) {
                      storage.setValue(id, {
                        value: getValue(event)
                      });
                    });
                  }
                  this._setBackgroundColor(selectElement);
                  this.container.appendChild(selectElement);
                  return this.container;
                }
              }]);
              return ChoiceWidgetAnnotationElement2;
            }(WidgetAnnotationElement);
            var PopupAnnotationElement = function(_AnnotationElement4) {
              _inherits2(PopupAnnotationElement2, _AnnotationElement4);
              var _super9 = _createSuper10(PopupAnnotationElement2);
              function PopupAnnotationElement2(parameters) {
                var _parameters$data$titl2, _parameters$data$cont2, _parameters$data$rich2;
                _classCallCheck3(this, PopupAnnotationElement2);
                var isRenderable = !!((_parameters$data$titl2 = parameters.data.titleObj) !== null && _parameters$data$titl2 !== void 0 && _parameters$data$titl2.str || (_parameters$data$cont2 = parameters.data.contentsObj) !== null && _parameters$data$cont2 !== void 0 && _parameters$data$cont2.str || (_parameters$data$rich2 = parameters.data.richText) !== null && _parameters$data$rich2 !== void 0 && _parameters$data$rich2.str);
                return _super9.call(this, parameters, {
                  isRenderable
                });
              }
              _createClass3(PopupAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var IGNORE_TYPES = ["Line", "Square", "Circle", "PolyLine", "Polygon", "Ink"];
                  this.container.className = "popupAnnotation";
                  if (IGNORE_TYPES.includes(this.data.parentType)) {
                    return this.container;
                  }
                  var selector = '[data-annotation-id="'.concat(this.data.parentId, '"]');
                  var parentElements = this.layer.querySelectorAll(selector);
                  if (parentElements.length === 0) {
                    return this.container;
                  }
                  var popup = new PopupElement({
                    container: this.container,
                    trigger: Array.from(parentElements),
                    color: this.data.color,
                    titleObj: this.data.titleObj,
                    modificationDate: this.data.modificationDate,
                    contentsObj: this.data.contentsObj,
                    richText: this.data.richText
                  });
                  var page = this.page;
                  var rect = _util2.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);
                  var popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];
                  var popupTop = rect[1];
                  this.container.style.transformOrigin = "".concat(-popupLeft, "px ").concat(-popupTop, "px");
                  this.container.style.left = "".concat(popupLeft, "px");
                  this.container.style.top = "".concat(popupTop, "px");
                  this.container.appendChild(popup.render());
                  return this.container;
                }
              }]);
              return PopupAnnotationElement2;
            }(AnnotationElement);
            var PopupElement = function() {
              function PopupElement2(parameters) {
                _classCallCheck3(this, PopupElement2);
                this.container = parameters.container;
                this.trigger = parameters.trigger;
                this.color = parameters.color;
                this.titleObj = parameters.titleObj;
                this.modificationDate = parameters.modificationDate;
                this.contentsObj = parameters.contentsObj;
                this.richText = parameters.richText;
                this.hideWrapper = parameters.hideWrapper || false;
                this.pinned = false;
              }
              _createClass3(PopupElement2, [{
                key: "render",
                value: function render() {
                  var _this$richText, _this$contentsObj;
                  var BACKGROUND_ENLIGHT = 0.7;
                  var wrapper = document.createElement("div");
                  wrapper.className = "popupWrapper";
                  this.hideElement = this.hideWrapper ? wrapper : this.container;
                  this.hideElement.hidden = true;
                  var popup = document.createElement("div");
                  popup.className = "popup";
                  var color = this.color;
                  if (color) {
                    var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];
                    var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];
                    var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];
                    popup.style.backgroundColor = _util2.Util.makeHexColor(r | 0, g | 0, b | 0);
                  }
                  var title = document.createElement("h1");
                  title.dir = this.titleObj.dir;
                  title.textContent = this.titleObj.str;
                  popup.appendChild(title);
                  var dateObject = _display_utils2.PDFDateString.toDateObject(this.modificationDate);
                  if (dateObject) {
                    var modificationDate = document.createElement("span");
                    modificationDate.className = "popupDate";
                    modificationDate.textContent = "{{date}}, {{time}}";
                    modificationDate.dataset.l10nId = "annotation_date_string";
                    modificationDate.dataset.l10nArgs = JSON.stringify({
                      date: dateObject.toLocaleDateString(),
                      time: dateObject.toLocaleTimeString()
                    });
                    popup.appendChild(modificationDate);
                  }
                  if ((_this$richText = this.richText) !== null && _this$richText !== void 0 && _this$richText.str && (!((_this$contentsObj = this.contentsObj) !== null && _this$contentsObj !== void 0 && _this$contentsObj.str) || this.contentsObj.str === this.richText.str)) {
                    _xfa_layer.XfaLayer.render({
                      xfaHtml: this.richText.html,
                      intent: "richText",
                      div: popup
                    });
                    popup.lastChild.className = "richText popupContent";
                  } else {
                    var contents = this._formatContents(this.contentsObj);
                    popup.appendChild(contents);
                  }
                  if (!Array.isArray(this.trigger)) {
                    this.trigger = [this.trigger];
                  }
                  var _iterator18 = _createForOfIteratorHelper2(this.trigger), _step18;
                  try {
                    for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
                      var element = _step18.value;
                      element.addEventListener("click", this._toggle.bind(this));
                      element.addEventListener("mouseover", this._show.bind(this, false));
                      element.addEventListener("mouseout", this._hide.bind(this, false));
                    }
                  } catch (err) {
                    _iterator18.e(err);
                  } finally {
                    _iterator18.f();
                  }
                  popup.addEventListener("click", this._hide.bind(this, true));
                  wrapper.appendChild(popup);
                  return wrapper;
                }
              }, {
                key: "_formatContents",
                value: function _formatContents(_ref2) {
                  var str = _ref2.str, dir = _ref2.dir;
                  var p = document.createElement("p");
                  p.className = "popupContent";
                  p.dir = dir;
                  var lines = str.split(/(?:\r\n?|\n)/);
                  for (var i = 0, ii = lines.length; i < ii; ++i) {
                    var line = lines[i];
                    p.appendChild(document.createTextNode(line));
                    if (i < ii - 1) {
                      p.appendChild(document.createElement("br"));
                    }
                  }
                  return p;
                }
              }, {
                key: "_toggle",
                value: function _toggle() {
                  if (this.pinned) {
                    this._hide(true);
                  } else {
                    this._show(true);
                  }
                }
              }, {
                key: "_show",
                value: function _show() {
                  var pin = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  if (pin) {
                    this.pinned = true;
                  }
                  if (this.hideElement.hidden) {
                    this.hideElement.hidden = false;
                    this.container.style.zIndex += 1;
                  }
                }
              }, {
                key: "_hide",
                value: function _hide() {
                  var unpin = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                  if (unpin) {
                    this.pinned = false;
                  }
                  if (!this.hideElement.hidden && !this.pinned) {
                    this.hideElement.hidden = true;
                    this.container.style.zIndex -= 1;
                  }
                }
              }]);
              return PopupElement2;
            }();
            var FreeTextAnnotationElement = function(_AnnotationElement5) {
              _inherits2(FreeTextAnnotationElement2, _AnnotationElement5);
              var _super10 = _createSuper10(FreeTextAnnotationElement2);
              function FreeTextAnnotationElement2(parameters) {
                var _parameters$data$titl3, _parameters$data$cont3, _parameters$data$rich3;
                _classCallCheck3(this, FreeTextAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl3 = parameters.data.titleObj) !== null && _parameters$data$titl3 !== void 0 && _parameters$data$titl3.str || (_parameters$data$cont3 = parameters.data.contentsObj) !== null && _parameters$data$cont3 !== void 0 && _parameters$data$cont3.str || (_parameters$data$rich3 = parameters.data.richText) !== null && _parameters$data$rich3 !== void 0 && _parameters$data$rich3.str);
                return _super10.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
              }
              _createClass3(FreeTextAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "freeTextAnnotation";
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  return this.container;
                }
              }]);
              return FreeTextAnnotationElement2;
            }(AnnotationElement);
            var LineAnnotationElement = function(_AnnotationElement6) {
              _inherits2(LineAnnotationElement2, _AnnotationElement6);
              var _super11 = _createSuper10(LineAnnotationElement2);
              function LineAnnotationElement2(parameters) {
                var _parameters$data$titl4, _parameters$data$cont4, _parameters$data$rich4;
                _classCallCheck3(this, LineAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl4 = parameters.data.titleObj) !== null && _parameters$data$titl4 !== void 0 && _parameters$data$titl4.str || (_parameters$data$cont4 = parameters.data.contentsObj) !== null && _parameters$data$cont4 !== void 0 && _parameters$data$cont4.str || (_parameters$data$rich4 = parameters.data.richText) !== null && _parameters$data$rich4 !== void 0 && _parameters$data$rich4.str);
                return _super11.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
              }
              _createClass3(LineAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "lineAnnotation";
                  var data = this.data;
                  var width = data.rect[2] - data.rect[0];
                  var height = data.rect[3] - data.rect[1];
                  var svg = this.svgFactory.create(width, height);
                  var line = this.svgFactory.createElement("svg:line");
                  line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
                  line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
                  line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
                  line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
                  line.setAttribute("stroke-width", data.borderStyle.width || 1);
                  line.setAttribute("stroke", "transparent");
                  line.setAttribute("fill", "transparent");
                  svg.appendChild(line);
                  this.container.append(svg);
                  this._createPopup(line, data);
                  return this.container;
                }
              }]);
              return LineAnnotationElement2;
            }(AnnotationElement);
            var SquareAnnotationElement = function(_AnnotationElement7) {
              _inherits2(SquareAnnotationElement2, _AnnotationElement7);
              var _super12 = _createSuper10(SquareAnnotationElement2);
              function SquareAnnotationElement2(parameters) {
                var _parameters$data$titl5, _parameters$data$cont5, _parameters$data$rich5;
                _classCallCheck3(this, SquareAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl5 = parameters.data.titleObj) !== null && _parameters$data$titl5 !== void 0 && _parameters$data$titl5.str || (_parameters$data$cont5 = parameters.data.contentsObj) !== null && _parameters$data$cont5 !== void 0 && _parameters$data$cont5.str || (_parameters$data$rich5 = parameters.data.richText) !== null && _parameters$data$rich5 !== void 0 && _parameters$data$rich5.str);
                return _super12.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
              }
              _createClass3(SquareAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "squareAnnotation";
                  var data = this.data;
                  var width = data.rect[2] - data.rect[0];
                  var height = data.rect[3] - data.rect[1];
                  var svg = this.svgFactory.create(width, height);
                  var borderWidth = data.borderStyle.width;
                  var square = this.svgFactory.createElement("svg:rect");
                  square.setAttribute("x", borderWidth / 2);
                  square.setAttribute("y", borderWidth / 2);
                  square.setAttribute("width", width - borderWidth);
                  square.setAttribute("height", height - borderWidth);
                  square.setAttribute("stroke-width", borderWidth || 1);
                  square.setAttribute("stroke", "transparent");
                  square.setAttribute("fill", "transparent");
                  svg.appendChild(square);
                  this.container.append(svg);
                  this._createPopup(square, data);
                  return this.container;
                }
              }]);
              return SquareAnnotationElement2;
            }(AnnotationElement);
            var CircleAnnotationElement = function(_AnnotationElement8) {
              _inherits2(CircleAnnotationElement2, _AnnotationElement8);
              var _super13 = _createSuper10(CircleAnnotationElement2);
              function CircleAnnotationElement2(parameters) {
                var _parameters$data$titl6, _parameters$data$cont6, _parameters$data$rich6;
                _classCallCheck3(this, CircleAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl6 = parameters.data.titleObj) !== null && _parameters$data$titl6 !== void 0 && _parameters$data$titl6.str || (_parameters$data$cont6 = parameters.data.contentsObj) !== null && _parameters$data$cont6 !== void 0 && _parameters$data$cont6.str || (_parameters$data$rich6 = parameters.data.richText) !== null && _parameters$data$rich6 !== void 0 && _parameters$data$rich6.str);
                return _super13.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
              }
              _createClass3(CircleAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "circleAnnotation";
                  var data = this.data;
                  var width = data.rect[2] - data.rect[0];
                  var height = data.rect[3] - data.rect[1];
                  var svg = this.svgFactory.create(width, height);
                  var borderWidth = data.borderStyle.width;
                  var circle = this.svgFactory.createElement("svg:ellipse");
                  circle.setAttribute("cx", width / 2);
                  circle.setAttribute("cy", height / 2);
                  circle.setAttribute("rx", width / 2 - borderWidth / 2);
                  circle.setAttribute("ry", height / 2 - borderWidth / 2);
                  circle.setAttribute("stroke-width", borderWidth || 1);
                  circle.setAttribute("stroke", "transparent");
                  circle.setAttribute("fill", "transparent");
                  svg.appendChild(circle);
                  this.container.append(svg);
                  this._createPopup(circle, data);
                  return this.container;
                }
              }]);
              return CircleAnnotationElement2;
            }(AnnotationElement);
            var PolylineAnnotationElement = function(_AnnotationElement9) {
              _inherits2(PolylineAnnotationElement2, _AnnotationElement9);
              var _super14 = _createSuper10(PolylineAnnotationElement2);
              function PolylineAnnotationElement2(parameters) {
                var _parameters$data$titl7, _parameters$data$cont7, _parameters$data$rich7;
                var _this112;
                _classCallCheck3(this, PolylineAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl7 = parameters.data.titleObj) !== null && _parameters$data$titl7 !== void 0 && _parameters$data$titl7.str || (_parameters$data$cont7 = parameters.data.contentsObj) !== null && _parameters$data$cont7 !== void 0 && _parameters$data$cont7.str || (_parameters$data$rich7 = parameters.data.richText) !== null && _parameters$data$rich7 !== void 0 && _parameters$data$rich7.str);
                _this112 = _super14.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
                _this112.containerClassName = "polylineAnnotation";
                _this112.svgElementName = "svg:polyline";
                return _this112;
              }
              _createClass3(PolylineAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = this.containerClassName;
                  var data = this.data;
                  var width = data.rect[2] - data.rect[0];
                  var height = data.rect[3] - data.rect[1];
                  var svg = this.svgFactory.create(width, height);
                  var points = [];
                  var _iterator19 = _createForOfIteratorHelper2(data.vertices), _step19;
                  try {
                    for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
                      var coordinate = _step19.value;
                      var x = coordinate.x - data.rect[0];
                      var y = data.rect[3] - coordinate.y;
                      points.push(x + "," + y);
                    }
                  } catch (err) {
                    _iterator19.e(err);
                  } finally {
                    _iterator19.f();
                  }
                  points = points.join(" ");
                  var polyline = this.svgFactory.createElement(this.svgElementName);
                  polyline.setAttribute("points", points);
                  polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                  polyline.setAttribute("stroke", "transparent");
                  polyline.setAttribute("fill", "transparent");
                  svg.appendChild(polyline);
                  this.container.append(svg);
                  this._createPopup(polyline, data);
                  return this.container;
                }
              }]);
              return PolylineAnnotationElement2;
            }(AnnotationElement);
            var PolygonAnnotationElement = function(_PolylineAnnotationEl) {
              _inherits2(PolygonAnnotationElement2, _PolylineAnnotationEl);
              var _super15 = _createSuper10(PolygonAnnotationElement2);
              function PolygonAnnotationElement2(parameters) {
                var _this12;
                _classCallCheck3(this, PolygonAnnotationElement2);
                _this12 = _super15.call(this, parameters);
                _this12.containerClassName = "polygonAnnotation";
                _this12.svgElementName = "svg:polygon";
                return _this12;
              }
              return PolygonAnnotationElement2;
            }(PolylineAnnotationElement);
            var CaretAnnotationElement = function(_AnnotationElement10) {
              _inherits2(CaretAnnotationElement2, _AnnotationElement10);
              var _super16 = _createSuper10(CaretAnnotationElement2);
              function CaretAnnotationElement2(parameters) {
                var _parameters$data$titl8, _parameters$data$cont8, _parameters$data$rich8;
                _classCallCheck3(this, CaretAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl8 = parameters.data.titleObj) !== null && _parameters$data$titl8 !== void 0 && _parameters$data$titl8.str || (_parameters$data$cont8 = parameters.data.contentsObj) !== null && _parameters$data$cont8 !== void 0 && _parameters$data$cont8.str || (_parameters$data$rich8 = parameters.data.richText) !== null && _parameters$data$rich8 !== void 0 && _parameters$data$rich8.str);
                return _super16.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
              }
              _createClass3(CaretAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "caretAnnotation";
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  return this.container;
                }
              }]);
              return CaretAnnotationElement2;
            }(AnnotationElement);
            var InkAnnotationElement = function(_AnnotationElement11) {
              _inherits2(InkAnnotationElement2, _AnnotationElement11);
              var _super17 = _createSuper10(InkAnnotationElement2);
              function InkAnnotationElement2(parameters) {
                var _parameters$data$titl9, _parameters$data$cont9, _parameters$data$rich9;
                var _this13;
                _classCallCheck3(this, InkAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl9 = parameters.data.titleObj) !== null && _parameters$data$titl9 !== void 0 && _parameters$data$titl9.str || (_parameters$data$cont9 = parameters.data.contentsObj) !== null && _parameters$data$cont9 !== void 0 && _parameters$data$cont9.str || (_parameters$data$rich9 = parameters.data.richText) !== null && _parameters$data$rich9 !== void 0 && _parameters$data$rich9.str);
                _this13 = _super17.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
                _this13.containerClassName = "inkAnnotation";
                _this13.svgElementName = "svg:polyline";
                return _this13;
              }
              _createClass3(InkAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = this.containerClassName;
                  var data = this.data;
                  var width = data.rect[2] - data.rect[0];
                  var height = data.rect[3] - data.rect[1];
                  var svg = this.svgFactory.create(width, height);
                  var _iterator20 = _createForOfIteratorHelper2(data.inkLists), _step20;
                  try {
                    for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
                      var inkList = _step20.value;
                      var points = [];
                      var _iterator21 = _createForOfIteratorHelper2(inkList), _step21;
                      try {
                        for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
                          var coordinate = _step21.value;
                          var x = coordinate.x - data.rect[0];
                          var y = data.rect[3] - coordinate.y;
                          points.push("".concat(x, ",").concat(y));
                        }
                      } catch (err) {
                        _iterator21.e(err);
                      } finally {
                        _iterator21.f();
                      }
                      points = points.join(" ");
                      var polyline = this.svgFactory.createElement(this.svgElementName);
                      polyline.setAttribute("points", points);
                      polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                      polyline.setAttribute("stroke", "transparent");
                      polyline.setAttribute("fill", "transparent");
                      this._createPopup(polyline, data);
                      svg.appendChild(polyline);
                    }
                  } catch (err) {
                    _iterator20.e(err);
                  } finally {
                    _iterator20.f();
                  }
                  this.container.append(svg);
                  return this.container;
                }
              }]);
              return InkAnnotationElement2;
            }(AnnotationElement);
            var HighlightAnnotationElement = function(_AnnotationElement12) {
              _inherits2(HighlightAnnotationElement2, _AnnotationElement12);
              var _super18 = _createSuper10(HighlightAnnotationElement2);
              function HighlightAnnotationElement2(parameters) {
                var _parameters$data$titl10, _parameters$data$cont10, _parameters$data$rich10;
                _classCallCheck3(this, HighlightAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl10 = parameters.data.titleObj) !== null && _parameters$data$titl10 !== void 0 && _parameters$data$titl10.str || (_parameters$data$cont10 = parameters.data.contentsObj) !== null && _parameters$data$cont10 !== void 0 && _parameters$data$cont10.str || (_parameters$data$rich10 = parameters.data.richText) !== null && _parameters$data$rich10 !== void 0 && _parameters$data$rich10.str);
                return _super18.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true,
                  createQuadrilaterals: true
                });
              }
              _createClass3(HighlightAnnotationElement2, [{
                key: "render",
                value: function render() {
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  if (this.quadrilaterals) {
                    return this._renderQuadrilaterals("highlightAnnotation");
                  }
                  this.container.className = "highlightAnnotation";
                  return this.container;
                }
              }]);
              return HighlightAnnotationElement2;
            }(AnnotationElement);
            var UnderlineAnnotationElement = function(_AnnotationElement13) {
              _inherits2(UnderlineAnnotationElement2, _AnnotationElement13);
              var _super19 = _createSuper10(UnderlineAnnotationElement2);
              function UnderlineAnnotationElement2(parameters) {
                var _parameters$data$titl11, _parameters$data$cont11, _parameters$data$rich11;
                _classCallCheck3(this, UnderlineAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl11 = parameters.data.titleObj) !== null && _parameters$data$titl11 !== void 0 && _parameters$data$titl11.str || (_parameters$data$cont11 = parameters.data.contentsObj) !== null && _parameters$data$cont11 !== void 0 && _parameters$data$cont11.str || (_parameters$data$rich11 = parameters.data.richText) !== null && _parameters$data$rich11 !== void 0 && _parameters$data$rich11.str);
                return _super19.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true,
                  createQuadrilaterals: true
                });
              }
              _createClass3(UnderlineAnnotationElement2, [{
                key: "render",
                value: function render() {
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  if (this.quadrilaterals) {
                    return this._renderQuadrilaterals("underlineAnnotation");
                  }
                  this.container.className = "underlineAnnotation";
                  return this.container;
                }
              }]);
              return UnderlineAnnotationElement2;
            }(AnnotationElement);
            var SquigglyAnnotationElement = function(_AnnotationElement14) {
              _inherits2(SquigglyAnnotationElement2, _AnnotationElement14);
              var _super20 = _createSuper10(SquigglyAnnotationElement2);
              function SquigglyAnnotationElement2(parameters) {
                var _parameters$data$titl12, _parameters$data$cont12, _parameters$data$rich12;
                _classCallCheck3(this, SquigglyAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl12 = parameters.data.titleObj) !== null && _parameters$data$titl12 !== void 0 && _parameters$data$titl12.str || (_parameters$data$cont12 = parameters.data.contentsObj) !== null && _parameters$data$cont12 !== void 0 && _parameters$data$cont12.str || (_parameters$data$rich12 = parameters.data.richText) !== null && _parameters$data$rich12 !== void 0 && _parameters$data$rich12.str);
                return _super20.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true,
                  createQuadrilaterals: true
                });
              }
              _createClass3(SquigglyAnnotationElement2, [{
                key: "render",
                value: function render() {
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  if (this.quadrilaterals) {
                    return this._renderQuadrilaterals("squigglyAnnotation");
                  }
                  this.container.className = "squigglyAnnotation";
                  return this.container;
                }
              }]);
              return SquigglyAnnotationElement2;
            }(AnnotationElement);
            var StrikeOutAnnotationElement = function(_AnnotationElement15) {
              _inherits2(StrikeOutAnnotationElement2, _AnnotationElement15);
              var _super21 = _createSuper10(StrikeOutAnnotationElement2);
              function StrikeOutAnnotationElement2(parameters) {
                var _parameters$data$titl13, _parameters$data$cont13, _parameters$data$rich13;
                _classCallCheck3(this, StrikeOutAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl13 = parameters.data.titleObj) !== null && _parameters$data$titl13 !== void 0 && _parameters$data$titl13.str || (_parameters$data$cont13 = parameters.data.contentsObj) !== null && _parameters$data$cont13 !== void 0 && _parameters$data$cont13.str || (_parameters$data$rich13 = parameters.data.richText) !== null && _parameters$data$rich13 !== void 0 && _parameters$data$rich13.str);
                return _super21.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true,
                  createQuadrilaterals: true
                });
              }
              _createClass3(StrikeOutAnnotationElement2, [{
                key: "render",
                value: function render() {
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  if (this.quadrilaterals) {
                    return this._renderQuadrilaterals("strikeoutAnnotation");
                  }
                  this.container.className = "strikeoutAnnotation";
                  return this.container;
                }
              }]);
              return StrikeOutAnnotationElement2;
            }(AnnotationElement);
            var StampAnnotationElement = function(_AnnotationElement16) {
              _inherits2(StampAnnotationElement2, _AnnotationElement16);
              var _super22 = _createSuper10(StampAnnotationElement2);
              function StampAnnotationElement2(parameters) {
                var _parameters$data$titl14, _parameters$data$cont14, _parameters$data$rich14;
                _classCallCheck3(this, StampAnnotationElement2);
                var isRenderable = !!(parameters.data.hasPopup || (_parameters$data$titl14 = parameters.data.titleObj) !== null && _parameters$data$titl14 !== void 0 && _parameters$data$titl14.str || (_parameters$data$cont14 = parameters.data.contentsObj) !== null && _parameters$data$cont14 !== void 0 && _parameters$data$cont14.str || (_parameters$data$rich14 = parameters.data.richText) !== null && _parameters$data$rich14 !== void 0 && _parameters$data$rich14.str);
                return _super22.call(this, parameters, {
                  isRenderable,
                  ignoreBorder: true
                });
              }
              _createClass3(StampAnnotationElement2, [{
                key: "render",
                value: function render() {
                  this.container.className = "stampAnnotation";
                  if (!this.data.hasPopup) {
                    this._createPopup(null, this.data);
                  }
                  return this.container;
                }
              }]);
              return StampAnnotationElement2;
            }(AnnotationElement);
            var FileAttachmentAnnotationElement = function(_AnnotationElement17) {
              _inherits2(FileAttachmentAnnotationElement2, _AnnotationElement17);
              var _super23 = _createSuper10(FileAttachmentAnnotationElement2);
              function FileAttachmentAnnotationElement2(parameters) {
                var _this14$linkService$e;
                var _this14;
                _classCallCheck3(this, FileAttachmentAnnotationElement2);
                _this14 = _super23.call(this, parameters, {
                  isRenderable: true
                });
                var _this14$data$file = _this14.data.file, filename = _this14$data$file.filename, content = _this14$data$file.content;
                _this14.filename = (0, _display_utils2.getFilenameFromUrl)(filename);
                _this14.content = content;
                (_this14$linkService$e = _this14.linkService.eventBus) === null || _this14$linkService$e === void 0 ? void 0 : _this14$linkService$e.dispatch("fileattachmentannotation", {
                  source: _assertThisInitialized2(_this14),
                  id: (0, _util2.stringToPDFString)(filename),
                  filename,
                  content
                });
                return _this14;
              }
              _createClass3(FileAttachmentAnnotationElement2, [{
                key: "render",
                value: function render() {
                  var _this$data$titleObj, _this$data$contentsOb;
                  this.container.className = "fileAttachmentAnnotation";
                  var trigger = document.createElement("div");
                  trigger.style.height = this.container.style.height;
                  trigger.style.width = this.container.style.width;
                  trigger.addEventListener("dblclick", this._download.bind(this));
                  if (!this.data.hasPopup && ((_this$data$titleObj = this.data.titleObj) !== null && _this$data$titleObj !== void 0 && _this$data$titleObj.str || (_this$data$contentsOb = this.data.contentsObj) !== null && _this$data$contentsOb !== void 0 && _this$data$contentsOb.str || this.data.richText)) {
                    this._createPopup(trigger, this.data);
                  }
                  this.container.appendChild(trigger);
                  return this.container;
                }
              }, {
                key: "_download",
                value: function _download() {
                  var _this$downloadManager;
                  (_this$downloadManager = this.downloadManager) === null || _this$downloadManager === void 0 ? void 0 : _this$downloadManager.openOrDownloadData(this.container, this.content, this.filename);
                }
              }]);
              return FileAttachmentAnnotationElement2;
            }(AnnotationElement);
            var AnnotationLayer4 = function() {
              function AnnotationLayer5() {
                _classCallCheck3(this, AnnotationLayer5);
              }
              _createClass3(AnnotationLayer5, null, [{
                key: "render",
                value: function render(parameters) {
                  var sortedAnnotations = [], popupAnnotations = [];
                  var _iterator22 = _createForOfIteratorHelper2(parameters.annotations), _step22;
                  try {
                    for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {
                      var _data = _step22.value;
                      if (!_data) {
                        continue;
                      }
                      if (_data.annotationType === _util2.AnnotationType.POPUP) {
                        popupAnnotations.push(_data);
                        continue;
                      }
                      sortedAnnotations.push(_data);
                    }
                  } catch (err) {
                    _iterator22.e(err);
                  } finally {
                    _iterator22.f();
                  }
                  if (popupAnnotations.length) {
                    sortedAnnotations.push.apply(sortedAnnotations, popupAnnotations);
                  }
                  var div = parameters.div;
                  for (var _i7 = 0, _sortedAnnotations = sortedAnnotations; _i7 < _sortedAnnotations.length; _i7++) {
                    var data = _sortedAnnotations[_i7];
                    var element = AnnotationElementFactory.create({
                      data,
                      layer: div,
                      page: parameters.page,
                      viewport: parameters.viewport,
                      linkService: parameters.linkService,
                      downloadManager: parameters.downloadManager,
                      imageResourcesPath: parameters.imageResourcesPath || "",
                      renderForms: parameters.renderForms !== false,
                      svgFactory: new _display_utils2.DOMSVGFactory(),
                      annotationStorage: parameters.annotationStorage || new _annotation_storage2.AnnotationStorage(),
                      enableScripting: parameters.enableScripting,
                      hasJSActions: parameters.hasJSActions,
                      fieldObjects: parameters.fieldObjects,
                      mouseState: parameters.mouseState || {
                        isDown: false
                      }
                    });
                    if (element.isRenderable) {
                      var rendered = element.render();
                      if (data.hidden) {
                        rendered.style.visibility = "hidden";
                      }
                      if (Array.isArray(rendered)) {
                        var _iterator23 = _createForOfIteratorHelper2(rendered), _step23;
                        try {
                          for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {
                            var renderedElement = _step23.value;
                            div.appendChild(renderedElement);
                          }
                        } catch (err) {
                          _iterator23.e(err);
                        } finally {
                          _iterator23.f();
                        }
                      } else {
                        if (element instanceof PopupAnnotationElement) {
                          div.prepend(rendered);
                        } else {
                          div.appendChild(rendered);
                        }
                      }
                    }
                  }
                  _classStaticPrivateMethodGet(this, AnnotationLayer5, _setAnnotationCanvasMap).call(this, div, parameters.annotationCanvasMap);
                }
              }, {
                key: "update",
                value: function update(parameters) {
                  var page = parameters.page, viewport = parameters.viewport, annotations = parameters.annotations, annotationCanvasMap = parameters.annotationCanvasMap, div = parameters.div;
                  var transform = viewport.transform;
                  var matrix = "matrix(".concat(transform.join(","), ")");
                  var scale, ownMatrix;
                  var _iterator24 = _createForOfIteratorHelper2(annotations), _step24;
                  try {
                    for (_iterator24.s(); !(_step24 = _iterator24.n()).done; ) {
                      var data = _step24.value;
                      var elements = div.querySelectorAll('[data-annotation-id="'.concat(data.id, '"]'));
                      if (elements) {
                        var _iterator25 = _createForOfIteratorHelper2(elements), _step25;
                        try {
                          for (_iterator25.s(); !(_step25 = _iterator25.n()).done; ) {
                            var element = _step25.value;
                            if (data.hasOwnCanvas) {
                              var rect = _util2.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);
                              if (!ownMatrix) {
                                scale = Math.abs(transform[0] || transform[1]);
                                var ownTransform = transform.slice();
                                for (var i = 0; i < 4; i++) {
                                  ownTransform[i] = Math.sign(ownTransform[i]);
                                }
                                ownMatrix = "matrix(".concat(ownTransform.join(","), ")");
                              }
                              var left = rect[0] * scale;
                              var top = rect[1] * scale;
                              element.style.left = "".concat(left, "px");
                              element.style.top = "".concat(top, "px");
                              element.style.transformOrigin = "".concat(-left, "px ").concat(-top, "px");
                              element.style.transform = ownMatrix;
                            } else {
                              element.style.transform = matrix;
                            }
                          }
                        } catch (err) {
                          _iterator25.e(err);
                        } finally {
                          _iterator25.f();
                        }
                      }
                    }
                  } catch (err) {
                    _iterator24.e(err);
                  } finally {
                    _iterator24.f();
                  }
                  _classStaticPrivateMethodGet(this, AnnotationLayer5, _setAnnotationCanvasMap).call(this, div, annotationCanvasMap);
                  div.hidden = false;
                }
              }]);
              return AnnotationLayer5;
            }();
            exports2.AnnotationLayer = AnnotationLayer4;
            function _setAnnotationCanvasMap(div, annotationCanvasMap) {
              if (!annotationCanvasMap) {
                return;
              }
              var _iterator26 = _createForOfIteratorHelper2(annotationCanvasMap), _step26;
              try {
                for (_iterator26.s(); !(_step26 = _iterator26.n()).done; ) {
                  var _step26$value = _slicedToArray3(_step26.value, 2), id = _step26$value[0], canvas = _step26$value[1];
                  var element = div.querySelector('[data-annotation-id="'.concat(id, '"]'));
                  if (!element) {
                    continue;
                  }
                  var firstChild = element.firstChild;
                  if (firstChild.nodeName === "CANVAS") {
                    element.replaceChild(canvas, firstChild);
                  } else {
                    element.insertBefore(canvas, firstChild);
                  }
                }
              } catch (err) {
                _iterator26.e(err);
              } finally {
                _iterator26.f();
              }
              annotationCanvasMap.clear();
            }
          },
          (__unused_webpack_module2, exports2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.ColorConverters = void 0;
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function makeColorComp(n) {
              return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
            }
            var ColorConverters = function() {
              function ColorConverters2() {
                _classCallCheck3(this, ColorConverters2);
              }
              _createClass3(ColorConverters2, null, [{
                key: "CMYK_G",
                value: function CMYK_G(_ref) {
                  var _ref2 = _slicedToArray3(_ref, 4), c = _ref2[0], y = _ref2[1], m = _ref2[2], k = _ref2[3];
                  return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];
                }
              }, {
                key: "G_CMYK",
                value: function G_CMYK(_ref3) {
                  var _ref4 = _slicedToArray3(_ref3, 1), g = _ref4[0];
                  return ["CMYK", 0, 0, 0, 1 - g];
                }
              }, {
                key: "G_RGB",
                value: function G_RGB(_ref5) {
                  var _ref6 = _slicedToArray3(_ref5, 1), g = _ref6[0];
                  return ["RGB", g, g, g];
                }
              }, {
                key: "G_HTML",
                value: function G_HTML(_ref7) {
                  var _ref8 = _slicedToArray3(_ref7, 1), g = _ref8[0];
                  var G = makeColorComp(g);
                  return "#".concat(G).concat(G).concat(G);
                }
              }, {
                key: "RGB_G",
                value: function RGB_G(_ref9) {
                  var _ref10 = _slicedToArray3(_ref9, 3), r = _ref10[0], g = _ref10[1], b = _ref10[2];
                  return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
                }
              }, {
                key: "RGB_HTML",
                value: function RGB_HTML(_ref11) {
                  var _ref12 = _slicedToArray3(_ref11, 3), r = _ref12[0], g = _ref12[1], b = _ref12[2];
                  var R = makeColorComp(r);
                  var G = makeColorComp(g);
                  var B = makeColorComp(b);
                  return "#".concat(R).concat(G).concat(B);
                }
              }, {
                key: "T_HTML",
                value: function T_HTML() {
                  return "#00000000";
                }
              }, {
                key: "CMYK_RGB",
                value: function CMYK_RGB(_ref13) {
                  var _ref14 = _slicedToArray3(_ref13, 4), c = _ref14[0], y = _ref14[1], m = _ref14[2], k = _ref14[3];
                  return ["RGB", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];
                }
              }, {
                key: "CMYK_HTML",
                value: function CMYK_HTML(components) {
                  return this.RGB_HTML(this.CMYK_RGB(components));
                }
              }, {
                key: "RGB_CMYK",
                value: function RGB_CMYK(_ref152) {
                  var _ref16 = _slicedToArray3(_ref152, 3), r = _ref16[0], g = _ref16[1], b = _ref16[2];
                  var c = 1 - r;
                  var m = 1 - g;
                  var y = 1 - b;
                  var k = Math.min(c, m, y);
                  return ["CMYK", c, m, y, k];
                }
              }]);
              return ColorConverters2;
            }();
            exports2.ColorConverters = ColorConverters;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.XfaLayer = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            var _xfa_text2 = __w_pdfjs_require__2(147);
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e2) {
                    throw _e2;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e3) {
                didErr = true;
                err = _e3;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            var XfaLayer = function() {
              function XfaLayer2() {
                _classCallCheck3(this, XfaLayer2);
              }
              _createClass3(XfaLayer2, null, [{
                key: "setupStorage",
                value: function setupStorage(html, id, element, storage, intent) {
                  var storedData = storage.getValue(id, {
                    value: null
                  });
                  switch (element.name) {
                    case "textarea":
                      if (storedData.value !== null) {
                        html.textContent = storedData.value;
                      }
                      if (intent === "print") {
                        break;
                      }
                      html.addEventListener("input", function(event) {
                        storage.setValue(id, {
                          value: event.target.value
                        });
                      });
                      break;
                    case "input":
                      if (element.attributes.type === "radio" || element.attributes.type === "checkbox") {
                        if (storedData.value === element.attributes.xfaOn) {
                          html.setAttribute("checked", true);
                        } else if (storedData.value === element.attributes.xfaOff) {
                          html.removeAttribute("checked");
                        }
                        if (intent === "print") {
                          break;
                        }
                        html.addEventListener("change", function(event) {
                          storage.setValue(id, {
                            value: event.target.checked ? event.target.getAttribute("xfaOn") : event.target.getAttribute("xfaOff")
                          });
                        });
                      } else {
                        if (storedData.value !== null) {
                          html.setAttribute("value", storedData.value);
                        }
                        if (intent === "print") {
                          break;
                        }
                        html.addEventListener("input", function(event) {
                          storage.setValue(id, {
                            value: event.target.value
                          });
                        });
                      }
                      break;
                    case "select":
                      if (storedData.value !== null) {
                        var _iterator = _createForOfIteratorHelper2(element.children), _step;
                        try {
                          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                            var option = _step.value;
                            if (option.attributes.value === storedData.value) {
                              option.attributes.selected = true;
                            }
                          }
                        } catch (err) {
                          _iterator.e(err);
                        } finally {
                          _iterator.f();
                        }
                      }
                      html.addEventListener("input", function(event) {
                        var options = event.target.options;
                        var value = options.selectedIndex === -1 ? "" : options[options.selectedIndex].value;
                        storage.setValue(id, {
                          value
                        });
                      });
                      break;
                  }
                }
              }, {
                key: "setAttributes",
                value: function setAttributes(_ref) {
                  var html = _ref.html, element = _ref.element, _ref$storage = _ref.storage, storage = _ref$storage === void 0 ? null : _ref$storage, intent = _ref.intent, linkService = _ref.linkService;
                  var attributes = element.attributes;
                  var isHTMLAnchorElement = html instanceof HTMLAnchorElement;
                  if (attributes.type === "radio") {
                    attributes.name = "".concat(attributes.name, "-").concat(intent);
                  }
                  for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {
                    var _Object$entries$_i = _slicedToArray3(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];
                    if (value === null || value === void 0 || key === "dataId") {
                      continue;
                    }
                    if (key !== "style") {
                      if (key === "textContent") {
                        html.textContent = value;
                      } else if (key === "class") {
                        if (value.length) {
                          html.setAttribute(key, value.join(" "));
                        }
                      } else {
                        if (isHTMLAnchorElement && (key === "href" || key === "newWindow")) {
                          continue;
                        }
                        html.setAttribute(key, value);
                      }
                    } else {
                      Object.assign(html.style, value);
                    }
                  }
                  if (isHTMLAnchorElement) {
                    var _linkService$addLinkA;
                    if (!linkService.addLinkAttributes) {
                      (0, _util2.warn)("XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.");
                    }
                    (_linkService$addLinkA = linkService.addLinkAttributes) === null || _linkService$addLinkA === void 0 ? void 0 : _linkService$addLinkA.call(linkService, html, attributes.href, attributes.newWindow);
                  }
                  if (storage && attributes.dataId) {
                    this.setupStorage(html, attributes.dataId, element, storage);
                  }
                }
              }, {
                key: "render",
                value: function render(parameters) {
                  var storage = parameters.annotationStorage;
                  var linkService = parameters.linkService;
                  var root = parameters.xfaHtml;
                  var intent = parameters.intent || "display";
                  var rootHtml = document.createElement(root.name);
                  if (root.attributes) {
                    this.setAttributes({
                      html: rootHtml,
                      element: root,
                      intent,
                      linkService
                    });
                  }
                  var stack = [[root, -1, rootHtml]];
                  var rootDiv = parameters.div;
                  rootDiv.appendChild(rootHtml);
                  if (parameters.viewport) {
                    var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
                    rootDiv.style.transform = transform;
                  }
                  if (intent !== "richText") {
                    rootDiv.setAttribute("class", "xfaLayer xfaFont");
                  }
                  var textDivs = [];
                  while (stack.length > 0) {
                    var _child$attributes;
                    var _stack = _slicedToArray3(stack[stack.length - 1], 3), parent = _stack[0], i = _stack[1], html = _stack[2];
                    if (i + 1 === parent.children.length) {
                      stack.pop();
                      continue;
                    }
                    var child = parent.children[++stack[stack.length - 1][1]];
                    if (child === null) {
                      continue;
                    }
                    var name = child.name;
                    if (name === "#text") {
                      var node = document.createTextNode(child.value);
                      textDivs.push(node);
                      html.appendChild(node);
                      continue;
                    }
                    var childHtml = void 0;
                    if (child !== null && child !== void 0 && (_child$attributes = child.attributes) !== null && _child$attributes !== void 0 && _child$attributes.xmlns) {
                      childHtml = document.createElementNS(child.attributes.xmlns, name);
                    } else {
                      childHtml = document.createElement(name);
                    }
                    html.appendChild(childHtml);
                    if (child.attributes) {
                      this.setAttributes({
                        html: childHtml,
                        element: child,
                        storage,
                        intent,
                        linkService
                      });
                    }
                    if (child.children && child.children.length > 0) {
                      stack.push([child, -1, childHtml]);
                    } else if (child.value) {
                      var _node = document.createTextNode(child.value);
                      if (_xfa_text2.XfaText.shouldBuildText(name)) {
                        textDivs.push(_node);
                      }
                      childHtml.appendChild(_node);
                    }
                  }
                  var _iterator2 = _createForOfIteratorHelper2(rootDiv.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea")), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var el = _step2.value;
                      el.setAttribute("readOnly", true);
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  return {
                    textDivs
                  };
                }
              }, {
                key: "update",
                value: function update(parameters) {
                  var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
                  parameters.div.style.transform = transform;
                  parameters.div.hidden = false;
                }
              }]);
              return XfaLayer2;
            }();
            exports2.XfaLayer = XfaLayer;
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.renderTextLayer = renderTextLayer;
            var _util2 = __w_pdfjs_require__2(4);
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            var MAX_TEXT_DIVS_TO_RENDER = 1e5;
            var DEFAULT_FONT_SIZE = 30;
            var DEFAULT_FONT_ASCENT = 0.8;
            var ascentCache = /* @__PURE__ */ new Map();
            var AllWhitespaceRegexp = /^\s+$/g;
            function getAscent(fontFamily, ctx) {
              var cachedAscent = ascentCache.get(fontFamily);
              if (cachedAscent) {
                return cachedAscent;
              }
              ctx.save();
              ctx.font = "".concat(DEFAULT_FONT_SIZE, "px ").concat(fontFamily);
              var metrics = ctx.measureText("");
              var ascent = metrics.fontBoundingBoxAscent;
              var descent = Math.abs(metrics.fontBoundingBoxDescent);
              if (ascent) {
                ctx.restore();
                var ratio = ascent / (ascent + descent);
                ascentCache.set(fontFamily, ratio);
                return ratio;
              }
              ctx.strokeStyle = "red";
              ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
              ctx.strokeText("g", 0, 0);
              var pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
              descent = 0;
              for (var i = pixels.length - 1 - 3; i >= 0; i -= 4) {
                if (pixels[i] > 0) {
                  descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
                  break;
                }
              }
              ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
              ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
              pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
              ascent = 0;
              for (var _i = 0, ii = pixels.length; _i < ii; _i += 4) {
                if (pixels[_i] > 0) {
                  ascent = DEFAULT_FONT_SIZE - Math.floor(_i / 4 / DEFAULT_FONT_SIZE);
                  break;
                }
              }
              ctx.restore();
              if (ascent) {
                var _ratio = ascent / (ascent + descent);
                ascentCache.set(fontFamily, _ratio);
                return _ratio;
              }
              ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
              return DEFAULT_FONT_ASCENT;
            }
            function appendText(task, geom, styles, ctx) {
              var textDiv = document.createElement("span");
              var textDivProperties = task._enhanceTextSelection ? {
                angle: 0,
                canvasWidth: 0,
                hasText: geom.str !== "",
                hasEOL: geom.hasEOL,
                originalTransform: null,
                paddingBottom: 0,
                paddingLeft: 0,
                paddingRight: 0,
                paddingTop: 0,
                scale: 1
              } : {
                angle: 0,
                canvasWidth: 0,
                hasText: geom.str !== "",
                hasEOL: geom.hasEOL
              };
              task._textDivs.push(textDiv);
              var tx = _util2.Util.transform(task._viewport.transform, geom.transform);
              var angle = Math.atan2(tx[1], tx[0]);
              var style = styles[geom.fontName];
              if (style.vertical) {
                angle += Math.PI / 2;
              }
              var fontHeight = Math.hypot(tx[2], tx[3]);
              var fontAscent = fontHeight * getAscent(style.fontFamily, ctx);
              var left, top;
              if (angle === 0) {
                left = tx[4];
                top = tx[5] - fontAscent;
              } else {
                left = tx[4] + fontAscent * Math.sin(angle);
                top = tx[5] - fontAscent * Math.cos(angle);
              }
              textDiv.style.left = "".concat(left, "px");
              textDiv.style.top = "".concat(top, "px");
              textDiv.style.fontSize = "".concat(fontHeight, "px");
              textDiv.style.fontFamily = style.fontFamily;
              textDiv.setAttribute("role", "presentation");
              textDiv.textContent = geom.str;
              textDiv.dir = geom.dir;
              if (task._fontInspectorEnabled) {
                textDiv.dataset.fontName = geom.fontName;
              }
              if (angle !== 0) {
                textDivProperties.angle = angle * (180 / Math.PI);
              }
              var shouldScaleText = false;
              if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {
                shouldScaleText = true;
              } else if (geom.str !== " " && geom.transform[0] !== geom.transform[3]) {
                var absScaleX = Math.abs(geom.transform[0]), absScaleY = Math.abs(geom.transform[3]);
                if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
                  shouldScaleText = true;
                }
              }
              if (shouldScaleText) {
                if (style.vertical) {
                  textDivProperties.canvasWidth = geom.height * task._viewport.scale;
                } else {
                  textDivProperties.canvasWidth = geom.width * task._viewport.scale;
                }
              }
              task._textDivProperties.set(textDiv, textDivProperties);
              if (task._textContentStream) {
                task._layoutText(textDiv);
              }
              if (task._enhanceTextSelection && textDivProperties.hasText) {
                var angleCos = 1, angleSin = 0;
                if (angle !== 0) {
                  angleCos = Math.cos(angle);
                  angleSin = Math.sin(angle);
                }
                var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;
                var divHeight = fontHeight;
                var m, b;
                if (angle !== 0) {
                  m = [angleCos, angleSin, -angleSin, angleCos, left, top];
                  b = _util2.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);
                } else {
                  b = [left, top, left + divWidth, top + divHeight];
                }
                task._bounds.push({
                  left: b[0],
                  top: b[1],
                  right: b[2],
                  bottom: b[3],
                  div: textDiv,
                  size: [divWidth, divHeight],
                  m
                });
              }
            }
            function render(task) {
              if (task._canceled) {
                return;
              }
              var textDivs = task._textDivs;
              var capability = task._capability;
              var textDivsLength = textDivs.length;
              if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
                task._renderingDone = true;
                capability.resolve();
                return;
              }
              if (!task._textContentStream) {
                for (var i = 0; i < textDivsLength; i++) {
                  task._layoutText(textDivs[i]);
                }
              }
              task._renderingDone = true;
              capability.resolve();
            }
            function findPositiveMin(ts, offset, count) {
              var result = 0;
              for (var i = 0; i < count; i++) {
                var t = ts[offset++];
                if (t > 0) {
                  result = result ? Math.min(t, result) : t;
                }
              }
              return result;
            }
            function expand(task) {
              var bounds = task._bounds;
              var viewport = task._viewport;
              var expanded = expandBounds(viewport.width, viewport.height, bounds);
              for (var i = 0; i < expanded.length; i++) {
                var div = bounds[i].div;
                var divProperties = task._textDivProperties.get(div);
                if (divProperties.angle === 0) {
                  divProperties.paddingLeft = bounds[i].left - expanded[i].left;
                  divProperties.paddingTop = bounds[i].top - expanded[i].top;
                  divProperties.paddingRight = expanded[i].right - bounds[i].right;
                  divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;
                  task._textDivProperties.set(div, divProperties);
                  continue;
                }
                var e = expanded[i], b = bounds[i];
                var m = b.m, c = m[0], s = m[1];
                var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];
                var ts = new Float64Array(64);
                for (var j = 0, jj = points.length; j < jj; j++) {
                  var t = _util2.Util.applyTransform(points[j], m);
                  ts[j + 0] = c && (e.left - t[0]) / c;
                  ts[j + 4] = s && (e.top - t[1]) / s;
                  ts[j + 8] = c && (e.right - t[0]) / c;
                  ts[j + 12] = s && (e.bottom - t[1]) / s;
                  ts[j + 16] = s && (e.left - t[0]) / -s;
                  ts[j + 20] = c && (e.top - t[1]) / c;
                  ts[j + 24] = s && (e.right - t[0]) / -s;
                  ts[j + 28] = c && (e.bottom - t[1]) / c;
                  ts[j + 32] = c && (e.left - t[0]) / -c;
                  ts[j + 36] = s && (e.top - t[1]) / -s;
                  ts[j + 40] = c && (e.right - t[0]) / -c;
                  ts[j + 44] = s && (e.bottom - t[1]) / -s;
                  ts[j + 48] = s && (e.left - t[0]) / s;
                  ts[j + 52] = c && (e.top - t[1]) / -c;
                  ts[j + 56] = s && (e.right - t[0]) / s;
                  ts[j + 60] = c && (e.bottom - t[1]) / -c;
                }
                var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));
                divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;
                divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;
                divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;
                divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;
                task._textDivProperties.set(div, divProperties);
              }
            }
            function expandBounds(width, height, boxes) {
              var bounds = boxes.map(function(box, i2) {
                return {
                  x1: box.left,
                  y1: box.top,
                  x2: box.right,
                  y2: box.bottom,
                  index: i2,
                  x1New: void 0,
                  x2New: void 0
                };
              });
              expandBoundsLTR(width, bounds);
              var expanded = new Array(boxes.length);
              var _iterator = _createForOfIteratorHelper2(bounds), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var b = _step.value;
                  var i = b.index;
                  expanded[i] = {
                    left: b.x1New,
                    top: 0,
                    right: b.x2New,
                    bottom: 0
                  };
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              boxes.map(function(box, i2) {
                var e = expanded[i2], b2 = bounds[i2];
                b2.x1 = box.top;
                b2.y1 = width - e.right;
                b2.x2 = box.bottom;
                b2.y2 = width - e.left;
                b2.index = i2;
                b2.x1New = void 0;
                b2.x2New = void 0;
              });
              expandBoundsLTR(height, bounds);
              var _iterator2 = _createForOfIteratorHelper2(bounds), _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                  var _b = _step2.value;
                  var _i2 = _b.index;
                  expanded[_i2].top = _b.x1New;
                  expanded[_i2].bottom = _b.x2New;
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              return expanded;
            }
            function expandBoundsLTR(width, bounds) {
              bounds.sort(function(a, b) {
                return a.x1 - b.x1 || a.index - b.index;
              });
              var fakeBoundary = {
                x1: -Infinity,
                y1: -Infinity,
                x2: 0,
                y2: Infinity,
                index: -1,
                x1New: 0,
                x2New: 0
              };
              var horizon = [{
                start: -Infinity,
                end: Infinity,
                boundary: fakeBoundary
              }];
              var _iterator3 = _createForOfIteratorHelper2(bounds), _step3;
              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                  var boundary = _step3.value;
                  var i = 0;
                  while (i < horizon.length && horizon[i].end <= boundary.y1) {
                    i++;
                  }
                  var j = horizon.length - 1;
                  while (j >= 0 && horizon[j].start >= boundary.y2) {
                    j--;
                  }
                  var _horizonPart = void 0, _affectedBoundary = void 0;
                  var q = void 0, k = void 0, maxXNew = -Infinity;
                  for (q = i; q <= j; q++) {
                    _horizonPart = horizon[q];
                    _affectedBoundary = _horizonPart.boundary;
                    var xNew = void 0;
                    if (_affectedBoundary.x2 > boundary.x1) {
                      xNew = _affectedBoundary.index > boundary.index ? _affectedBoundary.x1New : boundary.x1;
                    } else if (_affectedBoundary.x2New === void 0) {
                      xNew = (_affectedBoundary.x2 + boundary.x1) / 2;
                    } else {
                      xNew = _affectedBoundary.x2New;
                    }
                    if (xNew > maxXNew) {
                      maxXNew = xNew;
                    }
                  }
                  boundary.x1New = maxXNew;
                  for (q = i; q <= j; q++) {
                    _horizonPart = horizon[q];
                    _affectedBoundary = _horizonPart.boundary;
                    if (_affectedBoundary.x2New === void 0) {
                      if (_affectedBoundary.x2 > boundary.x1) {
                        if (_affectedBoundary.index > boundary.index) {
                          _affectedBoundary.x2New = _affectedBoundary.x2;
                        }
                      } else {
                        _affectedBoundary.x2New = maxXNew;
                      }
                    } else if (_affectedBoundary.x2New > maxXNew) {
                      _affectedBoundary.x2New = Math.max(maxXNew, _affectedBoundary.x2);
                    }
                  }
                  var changedHorizon = [];
                  var lastBoundary = null;
                  for (q = i; q <= j; q++) {
                    _horizonPart = horizon[q];
                    _affectedBoundary = _horizonPart.boundary;
                    var useBoundary = _affectedBoundary.x2 > boundary.x2 ? _affectedBoundary : boundary;
                    if (lastBoundary === useBoundary) {
                      changedHorizon[changedHorizon.length - 1].end = _horizonPart.end;
                    } else {
                      changedHorizon.push({
                        start: _horizonPart.start,
                        end: _horizonPart.end,
                        boundary: useBoundary
                      });
                      lastBoundary = useBoundary;
                    }
                  }
                  if (horizon[i].start < boundary.y1) {
                    changedHorizon[0].start = boundary.y1;
                    changedHorizon.unshift({
                      start: horizon[i].start,
                      end: boundary.y1,
                      boundary: horizon[i].boundary
                    });
                  }
                  if (boundary.y2 < horizon[j].end) {
                    changedHorizon[changedHorizon.length - 1].end = boundary.y2;
                    changedHorizon.push({
                      start: boundary.y2,
                      end: horizon[j].end,
                      boundary: horizon[j].boundary
                    });
                  }
                  for (q = i; q <= j; q++) {
                    _horizonPart = horizon[q];
                    _affectedBoundary = _horizonPart.boundary;
                    if (_affectedBoundary.x2New !== void 0) {
                      continue;
                    }
                    var used = false;
                    for (k = i - 1; !used && k >= 0 && horizon[k].start >= _affectedBoundary.y1; k--) {
                      used = horizon[k].boundary === _affectedBoundary;
                    }
                    for (k = j + 1; !used && k < horizon.length && horizon[k].end <= _affectedBoundary.y2; k++) {
                      used = horizon[k].boundary === _affectedBoundary;
                    }
                    for (k = 0; !used && k < changedHorizon.length; k++) {
                      used = changedHorizon[k].boundary === _affectedBoundary;
                    }
                    if (!used) {
                      _affectedBoundary.x2New = maxXNew;
                    }
                  }
                  Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
              for (var _i3 = 0, _horizon = horizon; _i3 < _horizon.length; _i3++) {
                var horizonPart = _horizon[_i3];
                var affectedBoundary = horizonPart.boundary;
                if (affectedBoundary.x2New === void 0) {
                  affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);
                }
              }
            }
            var TextLayerRenderTask = function() {
              function TextLayerRenderTask2(_ref) {
                var _globalThis$FontInspe, _this = this;
                var textContent = _ref.textContent, textContentStream = _ref.textContentStream, container = _ref.container, viewport = _ref.viewport, textDivs = _ref.textDivs, textContentItemsStr = _ref.textContentItemsStr, enhanceTextSelection = _ref.enhanceTextSelection;
                _classCallCheck3(this, TextLayerRenderTask2);
                this._textContent = textContent;
                this._textContentStream = textContentStream;
                this._container = container;
                this._document = container.ownerDocument;
                this._viewport = viewport;
                this._textDivs = textDivs || [];
                this._textContentItemsStr = textContentItemsStr || [];
                this._enhanceTextSelection = !!enhanceTextSelection;
                this._fontInspectorEnabled = !!((_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled);
                this._reader = null;
                this._layoutTextLastFontSize = null;
                this._layoutTextLastFontFamily = null;
                this._layoutTextCtx = null;
                this._textDivProperties = /* @__PURE__ */ new WeakMap();
                this._renderingDone = false;
                this._canceled = false;
                this._capability = (0, _util2.createPromiseCapability)();
                this._renderTimer = null;
                this._bounds = [];
                this._capability.promise["finally"](function() {
                  if (!_this._enhanceTextSelection) {
                    _this._textDivProperties = null;
                  }
                  if (_this._layoutTextCtx) {
                    _this._layoutTextCtx.canvas.width = 0;
                    _this._layoutTextCtx.canvas.height = 0;
                    _this._layoutTextCtx = null;
                  }
                })["catch"](function() {
                });
              }
              _createClass3(TextLayerRenderTask2, [{
                key: "promise",
                get: function get2() {
                  return this._capability.promise;
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  this._canceled = true;
                  if (this._reader) {
                    this._reader.cancel(new _util2.AbortException("TextLayer task cancelled."))["catch"](function() {
                    });
                    this._reader = null;
                  }
                  if (this._renderTimer !== null) {
                    clearTimeout(this._renderTimer);
                    this._renderTimer = null;
                  }
                  this._capability.reject(new Error("TextLayer task cancelled."));
                }
              }, {
                key: "_processItems",
                value: function _processItems(items, styleCache) {
                  for (var i = 0, len = items.length; i < len; i++) {
                    if (items[i].str === void 0) {
                      if (items[i].type === "beginMarkedContentProps" || items[i].type === "beginMarkedContent") {
                        var parent = this._container;
                        this._container = document.createElement("span");
                        this._container.classList.add("markedContent");
                        if (items[i].id !== null) {
                          this._container.setAttribute("id", "".concat(items[i].id));
                        }
                        parent.appendChild(this._container);
                      } else if (items[i].type === "endMarkedContent") {
                        this._container = this._container.parentNode;
                      }
                      continue;
                    }
                    this._textContentItemsStr.push(items[i].str);
                    appendText(this, items[i], styleCache, this._layoutTextCtx);
                  }
                }
              }, {
                key: "_layoutText",
                value: function _layoutText(textDiv) {
                  var textDivProperties = this._textDivProperties.get(textDiv);
                  var transform = "";
                  if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {
                    var _textDiv$style = textDiv.style, fontSize = _textDiv$style.fontSize, fontFamily = _textDiv$style.fontFamily;
                    if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {
                      this._layoutTextCtx.font = "".concat(fontSize, " ").concat(fontFamily);
                      this._layoutTextLastFontSize = fontSize;
                      this._layoutTextLastFontFamily = fontFamily;
                    }
                    var _this$_layoutTextCtx$ = this._layoutTextCtx.measureText(textDiv.textContent), width = _this$_layoutTextCtx$.width;
                    if (width > 0) {
                      var scale = textDivProperties.canvasWidth / width;
                      if (this._enhanceTextSelection) {
                        textDivProperties.scale = scale;
                      }
                      transform = "scaleX(".concat(scale, ")");
                    }
                  }
                  if (textDivProperties.angle !== 0) {
                    transform = "rotate(".concat(textDivProperties.angle, "deg) ").concat(transform);
                  }
                  if (transform.length > 0) {
                    if (this._enhanceTextSelection) {
                      textDivProperties.originalTransform = transform;
                    }
                    textDiv.style.transform = transform;
                  }
                  if (textDivProperties.hasText) {
                    this._container.appendChild(textDiv);
                  }
                  if (textDivProperties.hasEOL) {
                    var br = document.createElement("br");
                    br.setAttribute("role", "presentation");
                    this._container.appendChild(br);
                  }
                }
              }, {
                key: "_render",
                value: function _render() {
                  var _this2 = this;
                  var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var capability = (0, _util2.createPromiseCapability)();
                  var styleCache = /* @__PURE__ */ Object.create(null);
                  var canvas = this._document.createElement("canvas");
                  canvas.height = canvas.width = DEFAULT_FONT_SIZE;
                  canvas.mozOpaque = true;
                  this._layoutTextCtx = canvas.getContext("2d", {
                    alpha: false
                  });
                  if (this._textContent) {
                    var textItems = this._textContent.items;
                    var textStyles = this._textContent.styles;
                    this._processItems(textItems, textStyles);
                    capability.resolve();
                  } else if (this._textContentStream) {
                    var pump = function pump2() {
                      _this2._reader.read().then(function(_ref2) {
                        var value = _ref2.value, done = _ref2.done;
                        if (done) {
                          capability.resolve();
                          return;
                        }
                        Object.assign(styleCache, value.styles);
                        _this2._processItems(value.items, styleCache);
                        pump2();
                      }, capability.reject);
                    };
                    this._reader = this._textContentStream.getReader();
                    pump();
                  } else {
                    throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');
                  }
                  capability.promise.then(function() {
                    styleCache = null;
                    if (!timeout) {
                      render(_this2);
                    } else {
                      _this2._renderTimer = setTimeout(function() {
                        render(_this2);
                        _this2._renderTimer = null;
                      }, timeout);
                    }
                  }, this._capability.reject);
                }
              }, {
                key: "expandTextDivs",
                value: function expandTextDivs() {
                  var expandDivs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  if (!this._enhanceTextSelection || !this._renderingDone) {
                    return;
                  }
                  if (this._bounds !== null) {
                    expand(this);
                    this._bounds = null;
                  }
                  var transformBuf = [], paddingBuf = [];
                  for (var i = 0, ii = this._textDivs.length; i < ii; i++) {
                    var div = this._textDivs[i];
                    var divProps = this._textDivProperties.get(div);
                    if (!divProps.hasText) {
                      continue;
                    }
                    if (expandDivs) {
                      transformBuf.length = 0;
                      paddingBuf.length = 0;
                      if (divProps.originalTransform) {
                        transformBuf.push(divProps.originalTransform);
                      }
                      if (divProps.paddingTop > 0) {
                        paddingBuf.push("".concat(divProps.paddingTop, "px"));
                        transformBuf.push("translateY(".concat(-divProps.paddingTop, "px)"));
                      } else {
                        paddingBuf.push(0);
                      }
                      if (divProps.paddingRight > 0) {
                        paddingBuf.push("".concat(divProps.paddingRight / divProps.scale, "px"));
                      } else {
                        paddingBuf.push(0);
                      }
                      if (divProps.paddingBottom > 0) {
                        paddingBuf.push("".concat(divProps.paddingBottom, "px"));
                      } else {
                        paddingBuf.push(0);
                      }
                      if (divProps.paddingLeft > 0) {
                        paddingBuf.push("".concat(divProps.paddingLeft / divProps.scale, "px"));
                        transformBuf.push("translateX(".concat(-divProps.paddingLeft / divProps.scale, "px)"));
                      } else {
                        paddingBuf.push(0);
                      }
                      div.style.padding = paddingBuf.join(" ");
                      if (transformBuf.length) {
                        div.style.transform = transformBuf.join(" ");
                      }
                    } else {
                      div.style.padding = null;
                      div.style.transform = divProps.originalTransform;
                    }
                  }
                }
              }]);
              return TextLayerRenderTask2;
            }();
            function renderTextLayer(renderParameters) {
              var task = new TextLayerRenderTask({
                textContent: renderParameters.textContent,
                textContentStream: renderParameters.textContentStream,
                container: renderParameters.container,
                viewport: renderParameters.viewport,
                textDivs: renderParameters.textDivs,
                textContentItemsStr: renderParameters.textContentItemsStr,
                enhanceTextSelection: renderParameters.enhanceTextSelection
              });
              task._render(renderParameters.timeout);
              return task;
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.SVGGraphics = void 0;
            var _util2 = __w_pdfjs_require__2(4);
            var _display_utils2 = __w_pdfjs_require__2(1);
            var _is_node2 = __w_pdfjs_require__2(6);
            function _toConsumableArray3(arr) {
              return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread3();
            }
            function _nonIterableSpread3() {
              throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArray3(iter) {
              if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
                return Array.from(iter);
            }
            function _arrayWithoutHoles3(arr) {
              if (Array.isArray(arr))
                return _arrayLikeToArray3(arr);
            }
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e2) {
                    throw _e2;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e3) {
                didErr = true;
                err = _e3;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var SVGGraphics2 = function SVGGraphics3() {
              _classCallCheck3(this, SVGGraphics3);
              (0, _util2.unreachable)("Not implemented: SVGGraphics");
            };
            exports2.SVGGraphics = SVGGraphics2;
            {
              var opListToTree = function opListToTree2(opList) {
                var opTree = [];
                var tmp = [];
                var _iterator = _createForOfIteratorHelper2(opList), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var opListElement = _step.value;
                    if (opListElement.fn === "save") {
                      opTree.push({
                        fnId: 92,
                        fn: "group",
                        items: []
                      });
                      tmp.push(opTree);
                      opTree = opTree[opTree.length - 1].items;
                      continue;
                    }
                    if (opListElement.fn === "restore") {
                      opTree = tmp.pop();
                    } else {
                      opTree.push(opListElement);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                return opTree;
              };
              var pf = function pf2(value) {
                if (Number.isInteger(value)) {
                  return value.toString();
                }
                var s = value.toFixed(10);
                var i = s.length - 1;
                if (s[i] !== "0") {
                  return s;
                }
                do {
                  i--;
                } while (s[i] === "0");
                return s.substring(0, s[i] === "." ? i : i + 1);
              };
              var pm = function pm2(m) {
                if (m[4] === 0 && m[5] === 0) {
                  if (m[1] === 0 && m[2] === 0) {
                    if (m[0] === 1 && m[3] === 1) {
                      return "";
                    }
                    return "scale(".concat(pf(m[0]), " ").concat(pf(m[3]), ")");
                  }
                  if (m[0] === m[3] && m[1] === -m[2]) {
                    var a = Math.acos(m[0]) * 180 / Math.PI;
                    return "rotate(".concat(pf(a), ")");
                  }
                } else {
                  if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                    return "translate(".concat(pf(m[4]), " ").concat(pf(m[5]), ")");
                  }
                }
                return "matrix(".concat(pf(m[0]), " ").concat(pf(m[1]), " ").concat(pf(m[2]), " ").concat(pf(m[3]), " ").concat(pf(m[4]), " ") + "".concat(pf(m[5]), ")");
              };
              var SVG_DEFAULTS = {
                fontStyle: "normal",
                fontWeight: "normal",
                fillColor: "#000000"
              };
              var XML_NS = "http://www.w3.org/XML/1998/namespace";
              var XLINK_NS = "http://www.w3.org/1999/xlink";
              var LINE_CAP_STYLES = ["butt", "round", "square"];
              var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
              var convertImgDataToPng = function() {
                var PNG_HEADER = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
                var CHUNK_WRAPPER_SIZE = 12;
                var crcTable = new Int32Array(256);
                for (var i = 0; i < 256; i++) {
                  var c = i;
                  for (var h = 0; h < 8; h++) {
                    if (c & 1) {
                      c = 3988292384 ^ c >> 1 & 2147483647;
                    } else {
                      c = c >> 1 & 2147483647;
                    }
                  }
                  crcTable[i] = c;
                }
                function crc32(data, start, end) {
                  var crc = -1;
                  for (var _i = start; _i < end; _i++) {
                    var a = (crc ^ data[_i]) & 255;
                    var b = crcTable[a];
                    crc = crc >>> 8 ^ b;
                  }
                  return crc ^ -1;
                }
                function writePngChunk(type, body, data, offset) {
                  var p = offset;
                  var len = body.length;
                  data[p] = len >> 24 & 255;
                  data[p + 1] = len >> 16 & 255;
                  data[p + 2] = len >> 8 & 255;
                  data[p + 3] = len & 255;
                  p += 4;
                  data[p] = type.charCodeAt(0) & 255;
                  data[p + 1] = type.charCodeAt(1) & 255;
                  data[p + 2] = type.charCodeAt(2) & 255;
                  data[p + 3] = type.charCodeAt(3) & 255;
                  p += 4;
                  data.set(body, p);
                  p += body.length;
                  var crc = crc32(data, offset + 4, p);
                  data[p] = crc >> 24 & 255;
                  data[p + 1] = crc >> 16 & 255;
                  data[p + 2] = crc >> 8 & 255;
                  data[p + 3] = crc & 255;
                }
                function adler32(data, start, end) {
                  var a = 1;
                  var b = 0;
                  for (var _i2 = start; _i2 < end; ++_i2) {
                    a = (a + (data[_i2] & 255)) % 65521;
                    b = (b + a) % 65521;
                  }
                  return b << 16 | a;
                }
                function deflateSync(literals) {
                  if (!_is_node2.isNodeJS) {
                    return deflateSyncUncompressed(literals);
                  }
                  try {
                    var input;
                    if (parseInt(process.versions.node) >= 8) {
                      input = literals;
                    } else {
                      input = Buffer.from(literals);
                    }
                    var output = require_lib().deflateSync(input, {
                      level: 9
                    });
                    return output instanceof Uint8Array ? output : new Uint8Array(output);
                  } catch (e) {
                    (0, _util2.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
                  }
                  return deflateSyncUncompressed(literals);
                }
                function deflateSyncUncompressed(literals) {
                  var len = literals.length;
                  var maxBlockLength = 65535;
                  var deflateBlocks = Math.ceil(len / maxBlockLength);
                  var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
                  var pi = 0;
                  idat[pi++] = 120;
                  idat[pi++] = 156;
                  var pos = 0;
                  while (len > maxBlockLength) {
                    idat[pi++] = 0;
                    idat[pi++] = 255;
                    idat[pi++] = 255;
                    idat[pi++] = 0;
                    idat[pi++] = 0;
                    idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
                    pi += maxBlockLength;
                    pos += maxBlockLength;
                    len -= maxBlockLength;
                  }
                  idat[pi++] = 1;
                  idat[pi++] = len & 255;
                  idat[pi++] = len >> 8 & 255;
                  idat[pi++] = ~len & 65535 & 255;
                  idat[pi++] = (~len & 65535) >> 8 & 255;
                  idat.set(literals.subarray(pos), pi);
                  pi += literals.length - pos;
                  var adler = adler32(literals, 0, literals.length);
                  idat[pi++] = adler >> 24 & 255;
                  idat[pi++] = adler >> 16 & 255;
                  idat[pi++] = adler >> 8 & 255;
                  idat[pi++] = adler & 255;
                  return idat;
                }
                function encode(imgData, kind, forceDataSchema, isMask) {
                  var width = imgData.width;
                  var height = imgData.height;
                  var bitDepth, colorType, lineSize;
                  var bytes = imgData.data;
                  switch (kind) {
                    case _util2.ImageKind.GRAYSCALE_1BPP:
                      colorType = 0;
                      bitDepth = 1;
                      lineSize = width + 7 >> 3;
                      break;
                    case _util2.ImageKind.RGB_24BPP:
                      colorType = 2;
                      bitDepth = 8;
                      lineSize = width * 3;
                      break;
                    case _util2.ImageKind.RGBA_32BPP:
                      colorType = 6;
                      bitDepth = 8;
                      lineSize = width * 4;
                      break;
                    default:
                      throw new Error("invalid format");
                  }
                  var literals = new Uint8Array((1 + lineSize) * height);
                  var offsetLiterals = 0, offsetBytes = 0;
                  for (var y = 0; y < height; ++y) {
                    literals[offsetLiterals++] = 0;
                    literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
                    offsetBytes += lineSize;
                    offsetLiterals += lineSize;
                  }
                  if (kind === _util2.ImageKind.GRAYSCALE_1BPP && isMask) {
                    offsetLiterals = 0;
                    for (var _y = 0; _y < height; _y++) {
                      offsetLiterals++;
                      for (var _i3 = 0; _i3 < lineSize; _i3++) {
                        literals[offsetLiterals++] ^= 255;
                      }
                    }
                  }
                  var ihdr = new Uint8Array([width >> 24 & 255, width >> 16 & 255, width >> 8 & 255, width & 255, height >> 24 & 255, height >> 16 & 255, height >> 8 & 255, height & 255, bitDepth, colorType, 0, 0, 0]);
                  var idat = deflateSync(literals);
                  var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
                  var data = new Uint8Array(pngLength);
                  var offset = 0;
                  data.set(PNG_HEADER, offset);
                  offset += PNG_HEADER.length;
                  writePngChunk("IHDR", ihdr, data, offset);
                  offset += CHUNK_WRAPPER_SIZE + ihdr.length;
                  writePngChunk("IDATA", idat, data, offset);
                  offset += CHUNK_WRAPPER_SIZE + idat.length;
                  writePngChunk("IEND", new Uint8Array(0), data, offset);
                  return (0, _util2.createObjectURL)(data, "image/png", forceDataSchema);
                }
                return function convertImgDataToPng2(imgData, forceDataSchema, isMask) {
                  var kind = imgData.kind === void 0 ? _util2.ImageKind.GRAYSCALE_1BPP : imgData.kind;
                  return encode(imgData, kind, forceDataSchema, isMask);
                };
              }();
              var SVGExtraState = function() {
                function SVGExtraState2() {
                  _classCallCheck3(this, SVGExtraState2);
                  this.fontSizeScale = 1;
                  this.fontWeight = SVG_DEFAULTS.fontWeight;
                  this.fontSize = 0;
                  this.textMatrix = _util2.IDENTITY_MATRIX;
                  this.fontMatrix = _util2.FONT_IDENTITY_MATRIX;
                  this.leading = 0;
                  this.textRenderingMode = _util2.TextRenderingMode.FILL;
                  this.textMatrixScale = 1;
                  this.x = 0;
                  this.y = 0;
                  this.lineX = 0;
                  this.lineY = 0;
                  this.charSpacing = 0;
                  this.wordSpacing = 0;
                  this.textHScale = 1;
                  this.textRise = 0;
                  this.fillColor = SVG_DEFAULTS.fillColor;
                  this.strokeColor = "#000000";
                  this.fillAlpha = 1;
                  this.strokeAlpha = 1;
                  this.lineWidth = 1;
                  this.lineJoin = "";
                  this.lineCap = "";
                  this.miterLimit = 0;
                  this.dashArray = [];
                  this.dashPhase = 0;
                  this.dependencies = [];
                  this.activeClipUrl = null;
                  this.clipGroup = null;
                  this.maskId = "";
                }
                _createClass3(SVGExtraState2, [{
                  key: "clone",
                  value: function clone() {
                    return Object.create(this);
                  }
                }, {
                  key: "setCurrentPoint",
                  value: function setCurrentPoint(x, y) {
                    this.x = x;
                    this.y = y;
                  }
                }]);
                return SVGExtraState2;
              }();
              var clipCount = 0;
              var maskCount = 0;
              var shadingCount = 0;
              exports2.SVGGraphics = SVGGraphics2 = function() {
                function SVGGraphics3(commonObjs, objs) {
                  var forceDataSchema = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                  _classCallCheck3(this, SVGGraphics3);
                  this.svgFactory = new _display_utils2.DOMSVGFactory();
                  this.current = new SVGExtraState();
                  this.transformMatrix = _util2.IDENTITY_MATRIX;
                  this.transformStack = [];
                  this.extraStack = [];
                  this.commonObjs = commonObjs;
                  this.objs = objs;
                  this.pendingClip = null;
                  this.pendingEOFill = false;
                  this.embedFonts = false;
                  this.embeddedFonts = /* @__PURE__ */ Object.create(null);
                  this.cssStyle = null;
                  this.forceDataSchema = !!forceDataSchema;
                  this._operatorIdMapping = [];
                  for (var op in _util2.OPS) {
                    this._operatorIdMapping[_util2.OPS[op]] = op;
                  }
                }
                _createClass3(SVGGraphics3, [{
                  key: "save",
                  value: function save() {
                    this.transformStack.push(this.transformMatrix);
                    var old = this.current;
                    this.extraStack.push(old);
                    this.current = old.clone();
                  }
                }, {
                  key: "restore",
                  value: function restore() {
                    this.transformMatrix = this.transformStack.pop();
                    this.current = this.extraStack.pop();
                    this.pendingClip = null;
                    this.tgrp = null;
                  }
                }, {
                  key: "group",
                  value: function group(items) {
                    this.save();
                    this.executeOpTree(items);
                    this.restore();
                  }
                }, {
                  key: "loadDependencies",
                  value: function loadDependencies(operatorList) {
                    var _this = this;
                    var fnArray = operatorList.fnArray;
                    var argsArray = operatorList.argsArray;
                    for (var i = 0, ii = fnArray.length; i < ii; i++) {
                      if (fnArray[i] !== _util2.OPS.dependency) {
                        continue;
                      }
                      var _iterator2 = _createForOfIteratorHelper2(argsArray[i]), _step2;
                      try {
                        var _loop = function _loop2() {
                          var obj = _step2.value;
                          var objsPool = obj.startsWith("g_") ? _this.commonObjs : _this.objs;
                          var promise = new Promise(function(resolve) {
                            objsPool.get(obj, resolve);
                          });
                          _this.current.dependencies.push(promise);
                        };
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                          _loop();
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }
                    }
                    return Promise.all(this.current.dependencies);
                  }
                }, {
                  key: "transform",
                  value: function transform(a, b, c, d, e, f) {
                    var transformMatrix = [a, b, c, d, e, f];
                    this.transformMatrix = _util2.Util.transform(this.transformMatrix, transformMatrix);
                    this.tgrp = null;
                  }
                }, {
                  key: "getSVG",
                  value: function getSVG(operatorList, viewport) {
                    var _this2 = this;
                    this.viewport = viewport;
                    var svgElement = this._initialize(viewport);
                    return this.loadDependencies(operatorList).then(function() {
                      _this2.transformMatrix = _util2.IDENTITY_MATRIX;
                      _this2.executeOpTree(_this2.convertOpList(operatorList));
                      return svgElement;
                    });
                  }
                }, {
                  key: "convertOpList",
                  value: function convertOpList(operatorList) {
                    var operatorIdMapping = this._operatorIdMapping;
                    var argsArray = operatorList.argsArray;
                    var fnArray = operatorList.fnArray;
                    var opList = [];
                    for (var i = 0, ii = fnArray.length; i < ii; i++) {
                      var fnId = fnArray[i];
                      opList.push({
                        fnId,
                        fn: operatorIdMapping[fnId],
                        args: argsArray[i]
                      });
                    }
                    return opListToTree(opList);
                  }
                }, {
                  key: "executeOpTree",
                  value: function executeOpTree(opTree) {
                    var _iterator3 = _createForOfIteratorHelper2(opTree), _step3;
                    try {
                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                        var opTreeElement = _step3.value;
                        var fn = opTreeElement.fn;
                        var fnId = opTreeElement.fnId;
                        var args = opTreeElement.args;
                        switch (fnId | 0) {
                          case _util2.OPS.beginText:
                            this.beginText();
                            break;
                          case _util2.OPS.dependency:
                            break;
                          case _util2.OPS.setLeading:
                            this.setLeading(args);
                            break;
                          case _util2.OPS.setLeadingMoveText:
                            this.setLeadingMoveText(args[0], args[1]);
                            break;
                          case _util2.OPS.setFont:
                            this.setFont(args);
                            break;
                          case _util2.OPS.showText:
                            this.showText(args[0]);
                            break;
                          case _util2.OPS.showSpacedText:
                            this.showText(args[0]);
                            break;
                          case _util2.OPS.endText:
                            this.endText();
                            break;
                          case _util2.OPS.moveText:
                            this.moveText(args[0], args[1]);
                            break;
                          case _util2.OPS.setCharSpacing:
                            this.setCharSpacing(args[0]);
                            break;
                          case _util2.OPS.setWordSpacing:
                            this.setWordSpacing(args[0]);
                            break;
                          case _util2.OPS.setHScale:
                            this.setHScale(args[0]);
                            break;
                          case _util2.OPS.setTextMatrix:
                            this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                            break;
                          case _util2.OPS.setTextRise:
                            this.setTextRise(args[0]);
                            break;
                          case _util2.OPS.setTextRenderingMode:
                            this.setTextRenderingMode(args[0]);
                            break;
                          case _util2.OPS.setLineWidth:
                            this.setLineWidth(args[0]);
                            break;
                          case _util2.OPS.setLineJoin:
                            this.setLineJoin(args[0]);
                            break;
                          case _util2.OPS.setLineCap:
                            this.setLineCap(args[0]);
                            break;
                          case _util2.OPS.setMiterLimit:
                            this.setMiterLimit(args[0]);
                            break;
                          case _util2.OPS.setFillRGBColor:
                            this.setFillRGBColor(args[0], args[1], args[2]);
                            break;
                          case _util2.OPS.setStrokeRGBColor:
                            this.setStrokeRGBColor(args[0], args[1], args[2]);
                            break;
                          case _util2.OPS.setStrokeColorN:
                            this.setStrokeColorN(args);
                            break;
                          case _util2.OPS.setFillColorN:
                            this.setFillColorN(args);
                            break;
                          case _util2.OPS.shadingFill:
                            this.shadingFill(args[0]);
                            break;
                          case _util2.OPS.setDash:
                            this.setDash(args[0], args[1]);
                            break;
                          case _util2.OPS.setRenderingIntent:
                            this.setRenderingIntent(args[0]);
                            break;
                          case _util2.OPS.setFlatness:
                            this.setFlatness(args[0]);
                            break;
                          case _util2.OPS.setGState:
                            this.setGState(args[0]);
                            break;
                          case _util2.OPS.fill:
                            this.fill();
                            break;
                          case _util2.OPS.eoFill:
                            this.eoFill();
                            break;
                          case _util2.OPS.stroke:
                            this.stroke();
                            break;
                          case _util2.OPS.fillStroke:
                            this.fillStroke();
                            break;
                          case _util2.OPS.eoFillStroke:
                            this.eoFillStroke();
                            break;
                          case _util2.OPS.clip:
                            this.clip("nonzero");
                            break;
                          case _util2.OPS.eoClip:
                            this.clip("evenodd");
                            break;
                          case _util2.OPS.paintSolidColorImageMask:
                            this.paintSolidColorImageMask();
                            break;
                          case _util2.OPS.paintImageXObject:
                            this.paintImageXObject(args[0]);
                            break;
                          case _util2.OPS.paintInlineImageXObject:
                            this.paintInlineImageXObject(args[0]);
                            break;
                          case _util2.OPS.paintImageMaskXObject:
                            this.paintImageMaskXObject(args[0]);
                            break;
                          case _util2.OPS.paintFormXObjectBegin:
                            this.paintFormXObjectBegin(args[0], args[1]);
                            break;
                          case _util2.OPS.paintFormXObjectEnd:
                            this.paintFormXObjectEnd();
                            break;
                          case _util2.OPS.closePath:
                            this.closePath();
                            break;
                          case _util2.OPS.closeStroke:
                            this.closeStroke();
                            break;
                          case _util2.OPS.closeFillStroke:
                            this.closeFillStroke();
                            break;
                          case _util2.OPS.closeEOFillStroke:
                            this.closeEOFillStroke();
                            break;
                          case _util2.OPS.nextLine:
                            this.nextLine();
                            break;
                          case _util2.OPS.transform:
                            this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                            break;
                          case _util2.OPS.constructPath:
                            this.constructPath(args[0], args[1]);
                            break;
                          case _util2.OPS.endPath:
                            this.endPath();
                            break;
                          case 92:
                            this.group(opTreeElement.items);
                            break;
                          default:
                            (0, _util2.warn)("Unimplemented operator ".concat(fn));
                            break;
                        }
                      }
                    } catch (err) {
                      _iterator3.e(err);
                    } finally {
                      _iterator3.f();
                    }
                  }
                }, {
                  key: "setWordSpacing",
                  value: function setWordSpacing(wordSpacing) {
                    this.current.wordSpacing = wordSpacing;
                  }
                }, {
                  key: "setCharSpacing",
                  value: function setCharSpacing(charSpacing) {
                    this.current.charSpacing = charSpacing;
                  }
                }, {
                  key: "nextLine",
                  value: function nextLine() {
                    this.moveText(0, this.current.leading);
                  }
                }, {
                  key: "setTextMatrix",
                  value: function setTextMatrix(a, b, c, d, e, f) {
                    var current = this.current;
                    current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];
                    current.textMatrixScale = Math.hypot(a, b);
                    current.x = current.lineX = 0;
                    current.y = current.lineY = 0;
                    current.xcoords = [];
                    current.ycoords = [];
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                    current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                    current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    current.txtElement = this.svgFactory.createElement("svg:text");
                    current.txtElement.appendChild(current.tspan);
                  }
                }, {
                  key: "beginText",
                  value: function beginText() {
                    var current = this.current;
                    current.x = current.lineX = 0;
                    current.y = current.lineY = 0;
                    current.textMatrix = _util2.IDENTITY_MATRIX;
                    current.lineMatrix = _util2.IDENTITY_MATRIX;
                    current.textMatrixScale = 1;
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.txtElement = this.svgFactory.createElement("svg:text");
                    current.txtgrp = this.svgFactory.createElement("svg:g");
                    current.xcoords = [];
                    current.ycoords = [];
                  }
                }, {
                  key: "moveText",
                  value: function moveText(x, y) {
                    var current = this.current;
                    current.x = current.lineX += x;
                    current.y = current.lineY += y;
                    current.xcoords = [];
                    current.ycoords = [];
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                    current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                    current.tspan.setAttributeNS(null, "y", pf(-current.y));
                  }
                }, {
                  key: "showText",
                  value: function showText(glyphs) {
                    var current = this.current;
                    var font = current.font;
                    var fontSize = current.fontSize;
                    if (fontSize === 0) {
                      return;
                    }
                    var fontSizeScale = current.fontSizeScale;
                    var charSpacing = current.charSpacing;
                    var wordSpacing = current.wordSpacing;
                    var fontDirection = current.fontDirection;
                    var textHScale = current.textHScale * fontDirection;
                    var vertical = font.vertical;
                    var spacingDir = vertical ? 1 : -1;
                    var defaultVMetrics = font.defaultVMetrics;
                    var widthAdvanceScale = fontSize * current.fontMatrix[0];
                    var x = 0;
                    var _iterator4 = _createForOfIteratorHelper2(glyphs), _step4;
                    try {
                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                        var glyph = _step4.value;
                        if (glyph === null) {
                          x += fontDirection * wordSpacing;
                          continue;
                        } else if ((0, _util2.isNum)(glyph)) {
                          x += spacingDir * glyph * fontSize / 1e3;
                          continue;
                        }
                        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                        var character = glyph.fontChar;
                        var scaledX = void 0, scaledY = void 0;
                        var width = glyph.width;
                        if (vertical) {
                          var vx = void 0;
                          var vmetric = glyph.vmetric || defaultVMetrics;
                          vx = glyph.vmetric ? vmetric[1] : width * 0.5;
                          vx = -vx * widthAdvanceScale;
                          var vy = vmetric[2] * widthAdvanceScale;
                          width = vmetric ? -vmetric[0] : width;
                          scaledX = vx / fontSizeScale;
                          scaledY = (x + vy) / fontSizeScale;
                        } else {
                          scaledX = x / fontSizeScale;
                          scaledY = 0;
                        }
                        if (glyph.isInFont || font.missingFile) {
                          current.xcoords.push(current.x + scaledX);
                          if (vertical) {
                            current.ycoords.push(-current.y + scaledY);
                          }
                          current.tspan.textContent += character;
                        } else {
                        }
                        var charWidth = void 0;
                        if (vertical) {
                          charWidth = width * widthAdvanceScale - spacing * fontDirection;
                        } else {
                          charWidth = width * widthAdvanceScale + spacing * fontDirection;
                        }
                        x += charWidth;
                      }
                    } catch (err) {
                      _iterator4.e(err);
                    } finally {
                      _iterator4.f();
                    }
                    current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));
                    if (vertical) {
                      current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));
                    } else {
                      current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    }
                    if (vertical) {
                      current.y -= x;
                    } else {
                      current.x += x * textHScale;
                    }
                    current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
                    current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
                    if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                      current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
                    }
                    if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                      current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
                    }
                    var fillStrokeMode = current.textRenderingMode & _util2.TextRenderingMode.FILL_STROKE_MASK;
                    if (fillStrokeMode === _util2.TextRenderingMode.FILL || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                        current.tspan.setAttributeNS(null, "fill", current.fillColor);
                      }
                      if (current.fillAlpha < 1) {
                        current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                      }
                    } else if (current.textRenderingMode === _util2.TextRenderingMode.ADD_TO_PATH) {
                      current.tspan.setAttributeNS(null, "fill", "transparent");
                    } else {
                      current.tspan.setAttributeNS(null, "fill", "none");
                    }
                    if (fillStrokeMode === _util2.TextRenderingMode.STROKE || fillStrokeMode === _util2.TextRenderingMode.FILL_STROKE) {
                      var lineWidthScale = 1 / (current.textMatrixScale || 1);
                      this._setStrokeAttributes(current.tspan, lineWidthScale);
                    }
                    var textMatrix = current.textMatrix;
                    if (current.textRise !== 0) {
                      textMatrix = textMatrix.slice();
                      textMatrix[5] += current.textRise;
                    }
                    current.txtElement.setAttributeNS(null, "transform", "".concat(pm(textMatrix), " scale(").concat(pf(textHScale), ", -1)"));
                    current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
                    current.txtElement.appendChild(current.tspan);
                    current.txtgrp.appendChild(current.txtElement);
                    this._ensureTransformGroup().appendChild(current.txtElement);
                  }
                }, {
                  key: "setLeadingMoveText",
                  value: function setLeadingMoveText(x, y) {
                    this.setLeading(-y);
                    this.moveText(x, y);
                  }
                }, {
                  key: "addFontStyle",
                  value: function addFontStyle(fontObj) {
                    if (!fontObj.data) {
                      throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');
                    }
                    if (!this.cssStyle) {
                      this.cssStyle = this.svgFactory.createElement("svg:style");
                      this.cssStyle.setAttributeNS(null, "type", "text/css");
                      this.defs.appendChild(this.cssStyle);
                    }
                    var url = (0, _util2.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);
                    this.cssStyle.textContent += '@font-face { font-family: "'.concat(fontObj.loadedName, '";') + " src: url(".concat(url, "); }\n");
                  }
                }, {
                  key: "setFont",
                  value: function setFont(details) {
                    var current = this.current;
                    var fontObj = this.commonObjs.get(details[0]);
                    var size = details[1];
                    current.font = fontObj;
                    if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {
                      this.addFontStyle(fontObj);
                      this.embeddedFonts[fontObj.loadedName] = fontObj;
                    }
                    current.fontMatrix = fontObj.fontMatrix || _util2.FONT_IDENTITY_MATRIX;
                    var bold = "normal";
                    if (fontObj.black) {
                      bold = "900";
                    } else if (fontObj.bold) {
                      bold = "bold";
                    }
                    var italic = fontObj.italic ? "italic" : "normal";
                    if (size < 0) {
                      size = -size;
                      current.fontDirection = -1;
                    } else {
                      current.fontDirection = 1;
                    }
                    current.fontSize = size;
                    current.fontFamily = fontObj.loadedName;
                    current.fontWeight = bold;
                    current.fontStyle = italic;
                    current.tspan = this.svgFactory.createElement("svg:tspan");
                    current.tspan.setAttributeNS(null, "y", pf(-current.y));
                    current.xcoords = [];
                    current.ycoords = [];
                  }
                }, {
                  key: "endText",
                  value: function endText() {
                    var _current$txtElement;
                    var current = this.current;
                    if (current.textRenderingMode & _util2.TextRenderingMode.ADD_TO_PATH_FLAG && (_current$txtElement = current.txtElement) !== null && _current$txtElement !== void 0 && _current$txtElement.hasChildNodes()) {
                      current.element = current.txtElement;
                      this.clip("nonzero");
                      this.endPath();
                    }
                  }
                }, {
                  key: "setLineWidth",
                  value: function setLineWidth(width) {
                    if (width > 0) {
                      this.current.lineWidth = width;
                    }
                  }
                }, {
                  key: "setLineCap",
                  value: function setLineCap(style) {
                    this.current.lineCap = LINE_CAP_STYLES[style];
                  }
                }, {
                  key: "setLineJoin",
                  value: function setLineJoin(style) {
                    this.current.lineJoin = LINE_JOIN_STYLES[style];
                  }
                }, {
                  key: "setMiterLimit",
                  value: function setMiterLimit(limit) {
                    this.current.miterLimit = limit;
                  }
                }, {
                  key: "setStrokeAlpha",
                  value: function setStrokeAlpha(strokeAlpha) {
                    this.current.strokeAlpha = strokeAlpha;
                  }
                }, {
                  key: "setStrokeRGBColor",
                  value: function setStrokeRGBColor(r, g, b) {
                    this.current.strokeColor = _util2.Util.makeHexColor(r, g, b);
                  }
                }, {
                  key: "setFillAlpha",
                  value: function setFillAlpha(fillAlpha) {
                    this.current.fillAlpha = fillAlpha;
                  }
                }, {
                  key: "setFillRGBColor",
                  value: function setFillRGBColor(r, g, b) {
                    this.current.fillColor = _util2.Util.makeHexColor(r, g, b);
                    this.current.tspan = this.svgFactory.createElement("svg:tspan");
                    this.current.xcoords = [];
                    this.current.ycoords = [];
                  }
                }, {
                  key: "setStrokeColorN",
                  value: function setStrokeColorN(args) {
                    this.current.strokeColor = this._makeColorN_Pattern(args);
                  }
                }, {
                  key: "setFillColorN",
                  value: function setFillColorN(args) {
                    this.current.fillColor = this._makeColorN_Pattern(args);
                  }
                }, {
                  key: "shadingFill",
                  value: function shadingFill(args) {
                    var width = this.viewport.width;
                    var height = this.viewport.height;
                    var inv = _util2.Util.inverseTransform(this.transformMatrix);
                    var bl = _util2.Util.applyTransform([0, 0], inv);
                    var br = _util2.Util.applyTransform([0, height], inv);
                    var ul = _util2.Util.applyTransform([width, 0], inv);
                    var ur = _util2.Util.applyTransform([width, height], inv);
                    var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);
                    var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);
                    var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);
                    var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);
                    var rect = this.svgFactory.createElement("svg:rect");
                    rect.setAttributeNS(null, "x", x0);
                    rect.setAttributeNS(null, "y", y0);
                    rect.setAttributeNS(null, "width", x1 - x0);
                    rect.setAttributeNS(null, "height", y1 - y0);
                    rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));
                    if (this.current.fillAlpha < 1) {
                      rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);
                    }
                    this._ensureTransformGroup().appendChild(rect);
                  }
                }, {
                  key: "_makeColorN_Pattern",
                  value: function _makeColorN_Pattern(args) {
                    if (args[0] === "TilingPattern") {
                      return this._makeTilingPattern(args);
                    }
                    return this._makeShadingPattern(args);
                  }
                }, {
                  key: "_makeTilingPattern",
                  value: function _makeTilingPattern(args) {
                    var color = args[1];
                    var operatorList = args[2];
                    var matrix = args[3] || _util2.IDENTITY_MATRIX;
                    var _args$ = _slicedToArray3(args[4], 4), x0 = _args$[0], y0 = _args$[1], x1 = _args$[2], y1 = _args$[3];
                    var xstep = args[5];
                    var ystep = args[6];
                    var paintType = args[7];
                    var tilingId = "shading".concat(shadingCount++);
                    var _Util$normalizeRect = _util2.Util.normalizeRect([].concat(_toConsumableArray3(_util2.Util.applyTransform([x0, y0], matrix)), _toConsumableArray3(_util2.Util.applyTransform([x1, y1], matrix)))), _Util$normalizeRect2 = _slicedToArray3(_Util$normalizeRect, 4), tx0 = _Util$normalizeRect2[0], ty0 = _Util$normalizeRect2[1], tx1 = _Util$normalizeRect2[2], ty1 = _Util$normalizeRect2[3];
                    var _Util$singularValueDe = _util2.Util.singularValueDecompose2dScale(matrix), _Util$singularValueDe2 = _slicedToArray3(_Util$singularValueDe, 2), xscale = _Util$singularValueDe2[0], yscale = _Util$singularValueDe2[1];
                    var txstep = xstep * xscale;
                    var tystep = ystep * yscale;
                    var tiling = this.svgFactory.createElement("svg:pattern");
                    tiling.setAttributeNS(null, "id", tilingId);
                    tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
                    tiling.setAttributeNS(null, "width", txstep);
                    tiling.setAttributeNS(null, "height", tystep);
                    tiling.setAttributeNS(null, "x", "".concat(tx0));
                    tiling.setAttributeNS(null, "y", "".concat(ty0));
                    var svg = this.svg;
                    var transformMatrix = this.transformMatrix;
                    var fillColor = this.current.fillColor;
                    var strokeColor = this.current.strokeColor;
                    var bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);
                    this.svg = bbox;
                    this.transformMatrix = matrix;
                    if (paintType === 2) {
                      var cssColor = _util2.Util.makeHexColor.apply(_util2.Util, _toConsumableArray3(color));
                      this.current.fillColor = cssColor;
                      this.current.strokeColor = cssColor;
                    }
                    this.executeOpTree(this.convertOpList(operatorList));
                    this.svg = svg;
                    this.transformMatrix = transformMatrix;
                    this.current.fillColor = fillColor;
                    this.current.strokeColor = strokeColor;
                    tiling.appendChild(bbox.childNodes[0]);
                    this.defs.appendChild(tiling);
                    return "url(#".concat(tilingId, ")");
                  }
                }, {
                  key: "_makeShadingPattern",
                  value: function _makeShadingPattern(args) {
                    if (typeof args === "string") {
                      args = this.objs.get(args);
                    }
                    switch (args[0]) {
                      case "RadialAxial":
                        var shadingId = "shading".concat(shadingCount++);
                        var colorStops = args[3];
                        var gradient;
                        switch (args[1]) {
                          case "axial":
                            var point0 = args[4];
                            var point1 = args[5];
                            gradient = this.svgFactory.createElement("svg:linearGradient");
                            gradient.setAttributeNS(null, "id", shadingId);
                            gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                            gradient.setAttributeNS(null, "x1", point0[0]);
                            gradient.setAttributeNS(null, "y1", point0[1]);
                            gradient.setAttributeNS(null, "x2", point1[0]);
                            gradient.setAttributeNS(null, "y2", point1[1]);
                            break;
                          case "radial":
                            var focalPoint = args[4];
                            var circlePoint = args[5];
                            var focalRadius = args[6];
                            var circleRadius = args[7];
                            gradient = this.svgFactory.createElement("svg:radialGradient");
                            gradient.setAttributeNS(null, "id", shadingId);
                            gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                            gradient.setAttributeNS(null, "cx", circlePoint[0]);
                            gradient.setAttributeNS(null, "cy", circlePoint[1]);
                            gradient.setAttributeNS(null, "r", circleRadius);
                            gradient.setAttributeNS(null, "fx", focalPoint[0]);
                            gradient.setAttributeNS(null, "fy", focalPoint[1]);
                            gradient.setAttributeNS(null, "fr", focalRadius);
                            break;
                          default:
                            throw new Error("Unknown RadialAxial type: ".concat(args[1]));
                        }
                        var _iterator5 = _createForOfIteratorHelper2(colorStops), _step5;
                        try {
                          for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                            var colorStop = _step5.value;
                            var stop = this.svgFactory.createElement("svg:stop");
                            stop.setAttributeNS(null, "offset", colorStop[0]);
                            stop.setAttributeNS(null, "stop-color", colorStop[1]);
                            gradient.appendChild(stop);
                          }
                        } catch (err) {
                          _iterator5.e(err);
                        } finally {
                          _iterator5.f();
                        }
                        this.defs.appendChild(gradient);
                        return "url(#".concat(shadingId, ")");
                      case "Mesh":
                        (0, _util2.warn)("Unimplemented pattern Mesh");
                        return null;
                      case "Dummy":
                        return "hotpink";
                      default:
                        throw new Error("Unknown IR type: ".concat(args[0]));
                    }
                  }
                }, {
                  key: "setDash",
                  value: function setDash(dashArray, dashPhase) {
                    this.current.dashArray = dashArray;
                    this.current.dashPhase = dashPhase;
                  }
                }, {
                  key: "constructPath",
                  value: function constructPath(ops, args) {
                    var current = this.current;
                    var x = current.x, y = current.y;
                    var d = [];
                    var j = 0;
                    var _iterator6 = _createForOfIteratorHelper2(ops), _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                        var op = _step6.value;
                        switch (op | 0) {
                          case _util2.OPS.rectangle:
                            x = args[j++];
                            y = args[j++];
                            var width = args[j++];
                            var height = args[j++];
                            var xw = x + width;
                            var yh = y + height;
                            d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                            break;
                          case _util2.OPS.moveTo:
                            x = args[j++];
                            y = args[j++];
                            d.push("M", pf(x), pf(y));
                            break;
                          case _util2.OPS.lineTo:
                            x = args[j++];
                            y = args[j++];
                            d.push("L", pf(x), pf(y));
                            break;
                          case _util2.OPS.curveTo:
                            x = args[j + 4];
                            y = args[j + 5];
                            d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                            j += 6;
                            break;
                          case _util2.OPS.curveTo2:
                            d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                            x = args[j + 2];
                            y = args[j + 3];
                            j += 4;
                            break;
                          case _util2.OPS.curveTo3:
                            x = args[j + 2];
                            y = args[j + 3];
                            d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                            j += 4;
                            break;
                          case _util2.OPS.closePath:
                            d.push("Z");
                            break;
                        }
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                    d = d.join(" ");
                    if (current.path && ops.length > 0 && ops[0] !== _util2.OPS.rectangle && ops[0] !== _util2.OPS.moveTo) {
                      d = current.path.getAttributeNS(null, "d") + d;
                    } else {
                      current.path = this.svgFactory.createElement("svg:path");
                      this._ensureTransformGroup().appendChild(current.path);
                    }
                    current.path.setAttributeNS(null, "d", d);
                    current.path.setAttributeNS(null, "fill", "none");
                    current.element = current.path;
                    current.setCurrentPoint(x, y);
                  }
                }, {
                  key: "endPath",
                  value: function endPath() {
                    var current = this.current;
                    current.path = null;
                    if (!this.pendingClip) {
                      return;
                    }
                    if (!current.element) {
                      this.pendingClip = null;
                      return;
                    }
                    var clipId = "clippath".concat(clipCount++);
                    var clipPath = this.svgFactory.createElement("svg:clipPath");
                    clipPath.setAttributeNS(null, "id", clipId);
                    clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
                    var clipElement = current.element.cloneNode(true);
                    if (this.pendingClip === "evenodd") {
                      clipElement.setAttributeNS(null, "clip-rule", "evenodd");
                    } else {
                      clipElement.setAttributeNS(null, "clip-rule", "nonzero");
                    }
                    this.pendingClip = null;
                    clipPath.appendChild(clipElement);
                    this.defs.appendChild(clipPath);
                    if (current.activeClipUrl) {
                      current.clipGroup = null;
                      var _iterator7 = _createForOfIteratorHelper2(this.extraStack), _step7;
                      try {
                        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                          var prev = _step7.value;
                          prev.clipGroup = null;
                        }
                      } catch (err) {
                        _iterator7.e(err);
                      } finally {
                        _iterator7.f();
                      }
                      clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
                    }
                    current.activeClipUrl = "url(#".concat(clipId, ")");
                    this.tgrp = null;
                  }
                }, {
                  key: "clip",
                  value: function clip(type) {
                    this.pendingClip = type;
                  }
                }, {
                  key: "closePath",
                  value: function closePath() {
                    var current = this.current;
                    if (current.path) {
                      var d = "".concat(current.path.getAttributeNS(null, "d"), "Z");
                      current.path.setAttributeNS(null, "d", d);
                    }
                  }
                }, {
                  key: "setLeading",
                  value: function setLeading(leading) {
                    this.current.leading = -leading;
                  }
                }, {
                  key: "setTextRise",
                  value: function setTextRise(textRise) {
                    this.current.textRise = textRise;
                  }
                }, {
                  key: "setTextRenderingMode",
                  value: function setTextRenderingMode(textRenderingMode) {
                    this.current.textRenderingMode = textRenderingMode;
                  }
                }, {
                  key: "setHScale",
                  value: function setHScale(scale) {
                    this.current.textHScale = scale / 100;
                  }
                }, {
                  key: "setRenderingIntent",
                  value: function setRenderingIntent(intent) {
                  }
                }, {
                  key: "setFlatness",
                  value: function setFlatness(flatness) {
                  }
                }, {
                  key: "setGState",
                  value: function setGState(states) {
                    var _iterator8 = _createForOfIteratorHelper2(states), _step8;
                    try {
                      for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                        var _step8$value = _slicedToArray3(_step8.value, 2), key = _step8$value[0], value = _step8$value[1];
                        switch (key) {
                          case "LW":
                            this.setLineWidth(value);
                            break;
                          case "LC":
                            this.setLineCap(value);
                            break;
                          case "LJ":
                            this.setLineJoin(value);
                            break;
                          case "ML":
                            this.setMiterLimit(value);
                            break;
                          case "D":
                            this.setDash(value[0], value[1]);
                            break;
                          case "RI":
                            this.setRenderingIntent(value);
                            break;
                          case "FL":
                            this.setFlatness(value);
                            break;
                          case "Font":
                            this.setFont(value);
                            break;
                          case "CA":
                            this.setStrokeAlpha(value);
                            break;
                          case "ca":
                            this.setFillAlpha(value);
                            break;
                          default:
                            (0, _util2.warn)("Unimplemented graphic state operator ".concat(key));
                            break;
                        }
                      }
                    } catch (err) {
                      _iterator8.e(err);
                    } finally {
                      _iterator8.f();
                    }
                  }
                }, {
                  key: "fill",
                  value: function fill() {
                    var current = this.current;
                    if (current.element) {
                      current.element.setAttributeNS(null, "fill", current.fillColor);
                      current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                      this.endPath();
                    }
                  }
                }, {
                  key: "stroke",
                  value: function stroke() {
                    var current = this.current;
                    if (current.element) {
                      this._setStrokeAttributes(current.element);
                      current.element.setAttributeNS(null, "fill", "none");
                      this.endPath();
                    }
                  }
                }, {
                  key: "_setStrokeAttributes",
                  value: function _setStrokeAttributes(element) {
                    var lineWidthScale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
                    var current = this.current;
                    var dashArray = current.dashArray;
                    if (lineWidthScale !== 1 && dashArray.length > 0) {
                      dashArray = dashArray.map(function(value) {
                        return lineWidthScale * value;
                      });
                    }
                    element.setAttributeNS(null, "stroke", current.strokeColor);
                    element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
                    element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
                    element.setAttributeNS(null, "stroke-linecap", current.lineCap);
                    element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
                    element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
                    element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
                    element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
                  }
                }, {
                  key: "eoFill",
                  value: function eoFill() {
                    if (this.current.element) {
                      this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                    }
                    this.fill();
                  }
                }, {
                  key: "fillStroke",
                  value: function fillStroke() {
                    this.stroke();
                    this.fill();
                  }
                }, {
                  key: "eoFillStroke",
                  value: function eoFillStroke() {
                    if (this.current.element) {
                      this.current.element.setAttributeNS(null, "fill-rule", "evenodd");
                    }
                    this.fillStroke();
                  }
                }, {
                  key: "closeStroke",
                  value: function closeStroke() {
                    this.closePath();
                    this.stroke();
                  }
                }, {
                  key: "closeFillStroke",
                  value: function closeFillStroke() {
                    this.closePath();
                    this.fillStroke();
                  }
                }, {
                  key: "closeEOFillStroke",
                  value: function closeEOFillStroke() {
                    this.closePath();
                    this.eoFillStroke();
                  }
                }, {
                  key: "paintSolidColorImageMask",
                  value: function paintSolidColorImageMask() {
                    var rect = this.svgFactory.createElement("svg:rect");
                    rect.setAttributeNS(null, "x", "0");
                    rect.setAttributeNS(null, "y", "0");
                    rect.setAttributeNS(null, "width", "1px");
                    rect.setAttributeNS(null, "height", "1px");
                    rect.setAttributeNS(null, "fill", this.current.fillColor);
                    this._ensureTransformGroup().appendChild(rect);
                  }
                }, {
                  key: "paintImageXObject",
                  value: function paintImageXObject(objId) {
                    var imgData = objId.startsWith("g_") ? this.commonObjs.get(objId) : this.objs.get(objId);
                    if (!imgData) {
                      (0, _util2.warn)("Dependent image with object ID ".concat(objId, " is not ready yet"));
                      return;
                    }
                    this.paintInlineImageXObject(imgData);
                  }
                }, {
                  key: "paintInlineImageXObject",
                  value: function paintInlineImageXObject(imgData, mask) {
                    var width = imgData.width;
                    var height = imgData.height;
                    var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
                    var cliprect = this.svgFactory.createElement("svg:rect");
                    cliprect.setAttributeNS(null, "x", "0");
                    cliprect.setAttributeNS(null, "y", "0");
                    cliprect.setAttributeNS(null, "width", pf(width));
                    cliprect.setAttributeNS(null, "height", pf(height));
                    this.current.element = cliprect;
                    this.clip("nonzero");
                    var imgEl = this.svgFactory.createElement("svg:image");
                    imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
                    imgEl.setAttributeNS(null, "x", "0");
                    imgEl.setAttributeNS(null, "y", pf(-height));
                    imgEl.setAttributeNS(null, "width", pf(width) + "px");
                    imgEl.setAttributeNS(null, "height", pf(height) + "px");
                    imgEl.setAttributeNS(null, "transform", "scale(".concat(pf(1 / width), " ").concat(pf(-1 / height), ")"));
                    if (mask) {
                      mask.appendChild(imgEl);
                    } else {
                      this._ensureTransformGroup().appendChild(imgEl);
                    }
                  }
                }, {
                  key: "paintImageMaskXObject",
                  value: function paintImageMaskXObject(imgData) {
                    var current = this.current;
                    var width = imgData.width;
                    var height = imgData.height;
                    var fillColor = current.fillColor;
                    current.maskId = "mask".concat(maskCount++);
                    var mask = this.svgFactory.createElement("svg:mask");
                    mask.setAttributeNS(null, "id", current.maskId);
                    var rect = this.svgFactory.createElement("svg:rect");
                    rect.setAttributeNS(null, "x", "0");
                    rect.setAttributeNS(null, "y", "0");
                    rect.setAttributeNS(null, "width", pf(width));
                    rect.setAttributeNS(null, "height", pf(height));
                    rect.setAttributeNS(null, "fill", fillColor);
                    rect.setAttributeNS(null, "mask", "url(#".concat(current.maskId, ")"));
                    this.defs.appendChild(mask);
                    this._ensureTransformGroup().appendChild(rect);
                    this.paintInlineImageXObject(imgData, mask);
                  }
                }, {
                  key: "paintFormXObjectBegin",
                  value: function paintFormXObjectBegin(matrix, bbox) {
                    if (Array.isArray(matrix) && matrix.length === 6) {
                      this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
                    }
                    if (bbox) {
                      var width = bbox[2] - bbox[0];
                      var height = bbox[3] - bbox[1];
                      var cliprect = this.svgFactory.createElement("svg:rect");
                      cliprect.setAttributeNS(null, "x", bbox[0]);
                      cliprect.setAttributeNS(null, "y", bbox[1]);
                      cliprect.setAttributeNS(null, "width", pf(width));
                      cliprect.setAttributeNS(null, "height", pf(height));
                      this.current.element = cliprect;
                      this.clip("nonzero");
                      this.endPath();
                    }
                  }
                }, {
                  key: "paintFormXObjectEnd",
                  value: function paintFormXObjectEnd() {
                  }
                }, {
                  key: "_initialize",
                  value: function _initialize(viewport) {
                    var svg = this.svgFactory.create(viewport.width, viewport.height);
                    var definitions = this.svgFactory.createElement("svg:defs");
                    svg.appendChild(definitions);
                    this.defs = definitions;
                    var rootGroup = this.svgFactory.createElement("svg:g");
                    rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
                    svg.appendChild(rootGroup);
                    this.svg = rootGroup;
                    return svg;
                  }
                }, {
                  key: "_ensureClipGroup",
                  value: function _ensureClipGroup() {
                    if (!this.current.clipGroup) {
                      var clipGroup = this.svgFactory.createElement("svg:g");
                      clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                      this.svg.appendChild(clipGroup);
                      this.current.clipGroup = clipGroup;
                    }
                    return this.current.clipGroup;
                  }
                }, {
                  key: "_ensureTransformGroup",
                  value: function _ensureTransformGroup() {
                    if (!this.tgrp) {
                      this.tgrp = this.svgFactory.createElement("svg:g");
                      this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));
                      if (this.current.activeClipUrl) {
                        this._ensureClipGroup().appendChild(this.tgrp);
                      } else {
                        this.svg.appendChild(this.tgrp);
                      }
                    }
                    return this.tgrp;
                  }
                }]);
                return SVGGraphics3;
              }();
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            function _typeof3(obj) {
              "@babel/helpers - typeof";
              if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof3 = function _typeof4(obj2) {
                  return typeof obj2;
                };
              } else {
                _typeof3 = function _typeof4(obj2) {
                  return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
              }
              return _typeof3(obj);
            }
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.PDFNodeStream = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            var _network_utils = __w_pdfjs_require__2(154);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function _inherits2(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
              if (superClass)
                _setPrototypeOf2(subClass, superClass);
            }
            function _setPrototypeOf2(o, p) {
              _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf2(o, p);
            }
            function _createSuper10(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct10();
              return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf2(this).constructor;
                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
              };
            }
            function _possibleConstructorReturn2(self2, call) {
              if (call && (_typeof3(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }
              return _assertThisInitialized2(self2);
            }
            function _assertThisInitialized2(self2) {
              if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return self2;
            }
            function _isNativeReflectConstruct10() {
              if (typeof Reflect === "undefined" || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if (typeof Proxy === "function")
                return true;
              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                }));
                return true;
              } catch (e) {
                return false;
              }
            }
            function _getPrototypeOf2(o) {
              _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
              };
              return _getPrototypeOf2(o);
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            ;
            var fs = require_fs();
            var http = require_http();
            var https = require_https();
            var url = require_url();
            var fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;
            function parseUrl(sourceUrl) {
              var parsedUrl = url.parse(sourceUrl);
              if (parsedUrl.protocol === "file:" || parsedUrl.host) {
                return parsedUrl;
              }
              if (/^[a-z]:[/\\]/i.test(sourceUrl)) {
                return url.parse("file:///".concat(sourceUrl));
              }
              if (!parsedUrl.host) {
                parsedUrl.protocol = "file:";
              }
              return parsedUrl;
            }
            var PDFNodeStream = function() {
              function PDFNodeStream2(source) {
                _classCallCheck3(this, PDFNodeStream2);
                this.source = source;
                this.url = parseUrl(source.url);
                this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
                this.isFsUrl = this.url.protocol === "file:";
                this.httpHeaders = this.isHttp && source.httpHeaders || {};
                this._fullRequestReader = null;
                this._rangeRequestReaders = [];
              }
              _createClass3(PDFNodeStream2, [{
                key: "_progressiveDataLength",
                get: function get2() {
                  var _this$_fullRequestRea, _this$_fullRequestRea2;
                  return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;
                }
              }, {
                key: "getFullReader",
                value: function getFullReader() {
                  (0, _util2.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
                  this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
                  return this._fullRequestReader;
                }
              }, {
                key: "getRangeReader",
                value: function getRangeReader(start, end) {
                  if (end <= this._progressiveDataLength) {
                    return null;
                  }
                  var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);
                  this._rangeRequestReaders.push(rangeReader);
                  return rangeReader;
                }
              }, {
                key: "cancelAllRequests",
                value: function cancelAllRequests(reason) {
                  if (this._fullRequestReader) {
                    this._fullRequestReader.cancel(reason);
                  }
                  var _iterator = _createForOfIteratorHelper2(this._rangeRequestReaders.slice(0)), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var reader = _step.value;
                      reader.cancel(reason);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                }
              }]);
              return PDFNodeStream2;
            }();
            exports2.PDFNodeStream = PDFNodeStream;
            var BaseFullReader = function() {
              function BaseFullReader2(stream) {
                _classCallCheck3(this, BaseFullReader2);
                this._url = stream.url;
                this._done = false;
                this._storedError = null;
                this.onProgress = null;
                var source = stream.source;
                this._contentLength = source.length;
                this._loaded = 0;
                this._filename = null;
                this._disableRange = source.disableRange || false;
                this._rangeChunkSize = source.rangeChunkSize;
                if (!this._rangeChunkSize && !this._disableRange) {
                  this._disableRange = true;
                }
                this._isStreamingSupported = !source.disableStream;
                this._isRangeSupported = !source.disableRange;
                this._readableStream = null;
                this._readCapability = (0, _util2.createPromiseCapability)();
                this._headersCapability = (0, _util2.createPromiseCapability)();
              }
              _createClass3(BaseFullReader2, [{
                key: "headersReady",
                get: function get2() {
                  return this._headersCapability.promise;
                }
              }, {
                key: "filename",
                get: function get2() {
                  return this._filename;
                }
              }, {
                key: "contentLength",
                get: function get2() {
                  return this._contentLength;
                }
              }, {
                key: "isRangeSupported",
                get: function get2() {
                  return this._isRangeSupported;
                }
              }, {
                key: "isStreamingSupported",
                get: function get2() {
                  return this._isStreamingSupported;
                }
              }, {
                key: "read",
                value: function() {
                  var _read = _asyncToGenerator2(_regenerator2["default"].mark(function _callee() {
                    var chunk, buffer;
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return this._readCapability.promise;
                          case 2:
                            if (!this._done) {
                              _context.next = 4;
                              break;
                            }
                            return _context.abrupt("return", {
                              value: void 0,
                              done: true
                            });
                          case 4:
                            if (!this._storedError) {
                              _context.next = 6;
                              break;
                            }
                            throw this._storedError;
                          case 6:
                            chunk = this._readableStream.read();
                            if (!(chunk === null)) {
                              _context.next = 10;
                              break;
                            }
                            this._readCapability = (0, _util2.createPromiseCapability)();
                            return _context.abrupt("return", this.read());
                          case 10:
                            this._loaded += chunk.length;
                            if (this.onProgress) {
                              this.onProgress({
                                loaded: this._loaded,
                                total: this._contentLength
                              });
                            }
                            buffer = new Uint8Array(chunk).buffer;
                            return _context.abrupt("return", {
                              value: buffer,
                              done: false
                            });
                          case 14:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function read() {
                    return _read.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  if (!this._readableStream) {
                    this._error(reason);
                    return;
                  }
                  this._readableStream.destroy(reason);
                }
              }, {
                key: "_error",
                value: function _error(reason) {
                  this._storedError = reason;
                  this._readCapability.resolve();
                }
              }, {
                key: "_setReadableStream",
                value: function _setReadableStream(readableStream) {
                  var _this = this;
                  this._readableStream = readableStream;
                  readableStream.on("readable", function() {
                    _this._readCapability.resolve();
                  });
                  readableStream.on("end", function() {
                    readableStream.destroy();
                    _this._done = true;
                    _this._readCapability.resolve();
                  });
                  readableStream.on("error", function(reason) {
                    _this._error(reason);
                  });
                  if (!this._isStreamingSupported && this._isRangeSupported) {
                    this._error(new _util2.AbortException("streaming is disabled"));
                  }
                  if (this._storedError) {
                    this._readableStream.destroy(this._storedError);
                  }
                }
              }]);
              return BaseFullReader2;
            }();
            var BaseRangeReader = function() {
              function BaseRangeReader2(stream) {
                _classCallCheck3(this, BaseRangeReader2);
                this._url = stream.url;
                this._done = false;
                this._storedError = null;
                this.onProgress = null;
                this._loaded = 0;
                this._readableStream = null;
                this._readCapability = (0, _util2.createPromiseCapability)();
                var source = stream.source;
                this._isStreamingSupported = !source.disableStream;
              }
              _createClass3(BaseRangeReader2, [{
                key: "isStreamingSupported",
                get: function get2() {
                  return this._isStreamingSupported;
                }
              }, {
                key: "read",
                value: function() {
                  var _read2 = _asyncToGenerator2(_regenerator2["default"].mark(function _callee2() {
                    var chunk, buffer;
                    return _regenerator2["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return this._readCapability.promise;
                          case 2:
                            if (!this._done) {
                              _context2.next = 4;
                              break;
                            }
                            return _context2.abrupt("return", {
                              value: void 0,
                              done: true
                            });
                          case 4:
                            if (!this._storedError) {
                              _context2.next = 6;
                              break;
                            }
                            throw this._storedError;
                          case 6:
                            chunk = this._readableStream.read();
                            if (!(chunk === null)) {
                              _context2.next = 10;
                              break;
                            }
                            this._readCapability = (0, _util2.createPromiseCapability)();
                            return _context2.abrupt("return", this.read());
                          case 10:
                            this._loaded += chunk.length;
                            if (this.onProgress) {
                              this.onProgress({
                                loaded: this._loaded
                              });
                            }
                            buffer = new Uint8Array(chunk).buffer;
                            return _context2.abrupt("return", {
                              value: buffer,
                              done: false
                            });
                          case 14:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));
                  function read() {
                    return _read2.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  if (!this._readableStream) {
                    this._error(reason);
                    return;
                  }
                  this._readableStream.destroy(reason);
                }
              }, {
                key: "_error",
                value: function _error(reason) {
                  this._storedError = reason;
                  this._readCapability.resolve();
                }
              }, {
                key: "_setReadableStream",
                value: function _setReadableStream(readableStream) {
                  var _this2 = this;
                  this._readableStream = readableStream;
                  readableStream.on("readable", function() {
                    _this2._readCapability.resolve();
                  });
                  readableStream.on("end", function() {
                    readableStream.destroy();
                    _this2._done = true;
                    _this2._readCapability.resolve();
                  });
                  readableStream.on("error", function(reason) {
                    _this2._error(reason);
                  });
                  if (this._storedError) {
                    this._readableStream.destroy(this._storedError);
                  }
                }
              }]);
              return BaseRangeReader2;
            }();
            function createRequestOptions(parsedUrl, headers) {
              return {
                protocol: parsedUrl.protocol,
                auth: parsedUrl.auth,
                host: parsedUrl.hostname,
                port: parsedUrl.port,
                path: parsedUrl.path,
                method: "GET",
                headers
              };
            }
            var PDFNodeStreamFullReader = function(_BaseFullReader) {
              _inherits2(PDFNodeStreamFullReader2, _BaseFullReader);
              var _super = _createSuper10(PDFNodeStreamFullReader2);
              function PDFNodeStreamFullReader2(stream) {
                var _this3;
                _classCallCheck3(this, PDFNodeStreamFullReader2);
                _this3 = _super.call(this, stream);
                var handleResponse = function handleResponse2(response) {
                  if (response.statusCode === 404) {
                    var error = new _util2.MissingPDFException('Missing PDF "'.concat(_this3._url, '".'));
                    _this3._storedError = error;
                    _this3._headersCapability.reject(error);
                    return;
                  }
                  _this3._headersCapability.resolve();
                  _this3._setReadableStream(response);
                  var getResponseHeader = function getResponseHeader2(name) {
                    return _this3._readableStream.headers[name.toLowerCase()];
                  };
                  var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
                    getResponseHeader,
                    isHttp: stream.isHttp,
                    rangeChunkSize: _this3._rangeChunkSize,
                    disableRange: _this3._disableRange
                  }), allowRangeRequests = _validateRangeRequest.allowRangeRequests, suggestedLength = _validateRangeRequest.suggestedLength;
                  _this3._isRangeSupported = allowRangeRequests;
                  _this3._contentLength = suggestedLength || _this3._contentLength;
                  _this3._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                };
                _this3._request = null;
                if (_this3._url.protocol === "http:") {
                  _this3._request = http.request(createRequestOptions(_this3._url, stream.httpHeaders), handleResponse);
                } else {
                  _this3._request = https.request(createRequestOptions(_this3._url, stream.httpHeaders), handleResponse);
                }
                _this3._request.on("error", function(reason) {
                  _this3._storedError = reason;
                  _this3._headersCapability.reject(reason);
                });
                _this3._request.end();
                return _this3;
              }
              return PDFNodeStreamFullReader2;
            }(BaseFullReader);
            var PDFNodeStreamRangeReader = function(_BaseRangeReader) {
              _inherits2(PDFNodeStreamRangeReader2, _BaseRangeReader);
              var _super2 = _createSuper10(PDFNodeStreamRangeReader2);
              function PDFNodeStreamRangeReader2(stream, start, end) {
                var _this4;
                _classCallCheck3(this, PDFNodeStreamRangeReader2);
                _this4 = _super2.call(this, stream);
                _this4._httpHeaders = {};
                for (var property in stream.httpHeaders) {
                  var value = stream.httpHeaders[property];
                  if (typeof value === "undefined") {
                    continue;
                  }
                  _this4._httpHeaders[property] = value;
                }
                _this4._httpHeaders.Range = "bytes=".concat(start, "-").concat(end - 1);
                var handleResponse = function handleResponse2(response) {
                  if (response.statusCode === 404) {
                    var error = new _util2.MissingPDFException('Missing PDF "'.concat(_this4._url, '".'));
                    _this4._storedError = error;
                    return;
                  }
                  _this4._setReadableStream(response);
                };
                _this4._request = null;
                if (_this4._url.protocol === "http:") {
                  _this4._request = http.request(createRequestOptions(_this4._url, _this4._httpHeaders), handleResponse);
                } else {
                  _this4._request = https.request(createRequestOptions(_this4._url, _this4._httpHeaders), handleResponse);
                }
                _this4._request.on("error", function(reason) {
                  _this4._storedError = reason;
                });
                _this4._request.end();
                return _this4;
              }
              return PDFNodeStreamRangeReader2;
            }(BaseRangeReader);
            var PDFNodeStreamFsFullReader = function(_BaseFullReader2) {
              _inherits2(PDFNodeStreamFsFullReader2, _BaseFullReader2);
              var _super3 = _createSuper10(PDFNodeStreamFsFullReader2);
              function PDFNodeStreamFsFullReader2(stream) {
                var _this5;
                _classCallCheck3(this, PDFNodeStreamFsFullReader2);
                _this5 = _super3.call(this, stream);
                var path = decodeURIComponent(_this5._url.path);
                if (fileUriRegex.test(_this5._url.href)) {
                  path = path.replace(/^\//, "");
                }
                fs.lstat(path, function(error, stat) {
                  if (error) {
                    if (error.code === "ENOENT") {
                      error = new _util2.MissingPDFException('Missing PDF "'.concat(path, '".'));
                    }
                    _this5._storedError = error;
                    _this5._headersCapability.reject(error);
                    return;
                  }
                  _this5._contentLength = stat.size;
                  _this5._setReadableStream(fs.createReadStream(path));
                  _this5._headersCapability.resolve();
                });
                return _this5;
              }
              return PDFNodeStreamFsFullReader2;
            }(BaseFullReader);
            var PDFNodeStreamFsRangeReader = function(_BaseRangeReader2) {
              _inherits2(PDFNodeStreamFsRangeReader2, _BaseRangeReader2);
              var _super4 = _createSuper10(PDFNodeStreamFsRangeReader2);
              function PDFNodeStreamFsRangeReader2(stream, start, end) {
                var _this6;
                _classCallCheck3(this, PDFNodeStreamFsRangeReader2);
                _this6 = _super4.call(this, stream);
                var path = decodeURIComponent(_this6._url.path);
                if (fileUriRegex.test(_this6._url.href)) {
                  path = path.replace(/^\//, "");
                }
                _this6._setReadableStream(fs.createReadStream(path, {
                  start,
                  end: end - 1
                }));
                return _this6;
              }
              return PDFNodeStreamFsRangeReader2;
            }(BaseRangeReader);
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.createResponseStatusError = createResponseStatusError;
            exports2.extractFilenameFromHeader = extractFilenameFromHeader;
            exports2.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
            exports2.validateResponseStatus = validateResponseStatus;
            var _util2 = __w_pdfjs_require__2(4);
            var _content_disposition = __w_pdfjs_require__2(155);
            var _display_utils2 = __w_pdfjs_require__2(1);
            function validateRangeRequestCapabilities(_ref) {
              var getResponseHeader = _ref.getResponseHeader, isHttp = _ref.isHttp, rangeChunkSize = _ref.rangeChunkSize, disableRange = _ref.disableRange;
              (0, _util2.assert)(rangeChunkSize > 0, "Range chunk size must be larger than zero");
              var returnValues = {
                allowRangeRequests: false,
                suggestedLength: void 0
              };
              var length = parseInt(getResponseHeader("Content-Length"), 10);
              if (!Number.isInteger(length)) {
                return returnValues;
              }
              returnValues.suggestedLength = length;
              if (length <= 2 * rangeChunkSize) {
                return returnValues;
              }
              if (disableRange || !isHttp) {
                return returnValues;
              }
              if (getResponseHeader("Accept-Ranges") !== "bytes") {
                return returnValues;
              }
              var contentEncoding = getResponseHeader("Content-Encoding") || "identity";
              if (contentEncoding !== "identity") {
                return returnValues;
              }
              returnValues.allowRangeRequests = true;
              return returnValues;
            }
            function extractFilenameFromHeader(getResponseHeader) {
              var contentDisposition = getResponseHeader("Content-Disposition");
              if (contentDisposition) {
                var filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);
                if (filename.includes("%")) {
                  try {
                    filename = decodeURIComponent(filename);
                  } catch (ex) {
                  }
                }
                if ((0, _display_utils2.isPdfFile)(filename)) {
                  return filename;
                }
              }
              return null;
            }
            function createResponseStatusError(status, url) {
              if (status === 404 || status === 0 && url.startsWith("file:")) {
                return new _util2.MissingPDFException('Missing PDF "' + url + '".');
              }
              return new _util2.UnexpectedResponseException("Unexpected server response (".concat(status, ') while retrieving PDF "').concat(url, '".'), status);
            }
            function validateResponseStatus(status) {
              return status === 200 || status === 206;
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;
            var _util2 = __w_pdfjs_require__2(4);
            function _slicedToArray3(arr, i) {
              return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
            }
            function _nonIterableRest3() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _iterableToArrayLimit3(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
              if (_i == null)
                return;
              var _arr = [];
              var _n = true;
              var _d = false;
              var _s, _e;
              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);
                  if (i && _arr.length === i)
                    break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null)
                    _i["return"]();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }
            function _arrayWithHoles3(arr) {
              if (Array.isArray(arr))
                return arr;
            }
            function getFilenameFromContentDispositionHeader(contentDisposition) {
              var needsEncodingFixup = true;
              var tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);
              if (tmp) {
                tmp = tmp[1];
                var filename = rfc2616unquote(tmp);
                filename = unescape(filename);
                filename = rfc5987decode(filename);
                filename = rfc2047decode(filename);
                return fixupEncoding(filename);
              }
              tmp = rfc2231getparam(contentDisposition);
              if (tmp) {
                var _filename = rfc2047decode(tmp);
                return fixupEncoding(_filename);
              }
              tmp = toParamRegExp("filename", "i").exec(contentDisposition);
              if (tmp) {
                tmp = tmp[1];
                var _filename2 = rfc2616unquote(tmp);
                _filename2 = rfc2047decode(_filename2);
                return fixupEncoding(_filename2);
              }
              function toParamRegExp(attributePattern, flags) {
                return new RegExp("(?:^|;)\\s*" + attributePattern + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', flags);
              }
              function textdecode(encoding, value) {
                if (encoding) {
                  if (!/^[\x00-\xFF]+$/.test(value)) {
                    return value;
                  }
                  try {
                    var decoder = new TextDecoder(encoding, {
                      fatal: true
                    });
                    var buffer = (0, _util2.stringToBytes)(value);
                    value = decoder.decode(buffer);
                    needsEncodingFixup = false;
                  } catch (e) {
                    if (/^utf-?8$/i.test(encoding)) {
                      try {
                        value = decodeURIComponent(escape(value));
                        needsEncodingFixup = false;
                      } catch (err) {
                      }
                    }
                  }
                }
                return value;
              }
              function fixupEncoding(value) {
                if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
                  value = textdecode("utf-8", value);
                  if (needsEncodingFixup) {
                    value = textdecode("iso-8859-1", value);
                  }
                }
                return value;
              }
              function rfc2231getparam(contentDispositionStr) {
                var matches = [];
                var match;
                var iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
                while ((match = iter.exec(contentDispositionStr)) !== null) {
                  var _match = match, _match2 = _slicedToArray3(_match, 4), n = _match2[1], quot = _match2[2], part = _match2[3];
                  n = parseInt(n, 10);
                  if (n in matches) {
                    if (n === 0) {
                      break;
                    }
                    continue;
                  }
                  matches[n] = [quot, part];
                }
                var parts = [];
                for (var _n2 = 0; _n2 < matches.length; ++_n2) {
                  if (!(_n2 in matches)) {
                    break;
                  }
                  var _matches$_n = _slicedToArray3(matches[_n2], 2), _quot = _matches$_n[0], _part = _matches$_n[1];
                  _part = rfc2616unquote(_part);
                  if (_quot) {
                    _part = unescape(_part);
                    if (_n2 === 0) {
                      _part = rfc5987decode(_part);
                    }
                  }
                  parts.push(_part);
                }
                return parts.join("");
              }
              function rfc2616unquote(value) {
                if (value.startsWith('"')) {
                  var parts = value.slice(1).split('\\"');
                  for (var i = 0; i < parts.length; ++i) {
                    var quotindex = parts[i].indexOf('"');
                    if (quotindex !== -1) {
                      parts[i] = parts[i].slice(0, quotindex);
                      parts.length = i + 1;
                    }
                    parts[i] = parts[i].replace(/\\(.)/g, "$1");
                  }
                  value = parts.join('"');
                }
                return value;
              }
              function rfc5987decode(extvalue) {
                var encodingend = extvalue.indexOf("'");
                if (encodingend === -1) {
                  return extvalue;
                }
                var encoding = extvalue.slice(0, encodingend);
                var langvalue = extvalue.slice(encodingend + 1);
                var value = langvalue.replace(/^[^']*'/, "");
                return textdecode(encoding, value);
              }
              function rfc2047decode(value) {
                if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
                  return value;
                }
                return value.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(matches, charset, encoding, text) {
                  if (encoding === "q" || encoding === "Q") {
                    text = text.replace(/_/g, " ");
                    text = text.replace(/=([0-9a-fA-F]{2})/g, function(match, hex) {
                      return String.fromCharCode(parseInt(hex, 16));
                    });
                    return textdecode(charset, text);
                  }
                  try {
                    text = atob(text);
                  } catch (e) {
                  }
                  return textdecode(charset, text);
                });
              }
              return "";
            }
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.PDFNetworkStream = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            var _network_utils = __w_pdfjs_require__2(154);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            ;
            var OK_RESPONSE = 200;
            var PARTIAL_CONTENT_RESPONSE = 206;
            function getArrayBuffer(xhr) {
              var data = xhr.response;
              if (typeof data !== "string") {
                return data;
              }
              var array = (0, _util2.stringToBytes)(data);
              return array.buffer;
            }
            var NetworkManager = function() {
              function NetworkManager2(url) {
                var args = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck3(this, NetworkManager2);
                this.url = url;
                this.isHttp = /^https?:/i.test(url);
                this.httpHeaders = this.isHttp && args.httpHeaders || /* @__PURE__ */ Object.create(null);
                this.withCredentials = args.withCredentials || false;
                this.getXhr = args.getXhr || function NetworkManager_getXhr() {
                  return new XMLHttpRequest();
                };
                this.currXhrId = 0;
                this.pendingRequests = /* @__PURE__ */ Object.create(null);
              }
              _createClass3(NetworkManager2, [{
                key: "requestRange",
                value: function requestRange(begin, end, listeners) {
                  var args = {
                    begin,
                    end
                  };
                  for (var prop in listeners) {
                    args[prop] = listeners[prop];
                  }
                  return this.request(args);
                }
              }, {
                key: "requestFull",
                value: function requestFull(listeners) {
                  return this.request(listeners);
                }
              }, {
                key: "request",
                value: function request(args) {
                  var xhr = this.getXhr();
                  var xhrId = this.currXhrId++;
                  var pendingRequest = this.pendingRequests[xhrId] = {
                    xhr
                  };
                  xhr.open("GET", this.url);
                  xhr.withCredentials = this.withCredentials;
                  for (var property in this.httpHeaders) {
                    var value = this.httpHeaders[property];
                    if (typeof value === "undefined") {
                      continue;
                    }
                    xhr.setRequestHeader(property, value);
                  }
                  if (this.isHttp && "begin" in args && "end" in args) {
                    xhr.setRequestHeader("Range", "bytes=".concat(args.begin, "-").concat(args.end - 1));
                    pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
                  } else {
                    pendingRequest.expectedStatus = OK_RESPONSE;
                  }
                  xhr.responseType = "arraybuffer";
                  if (args.onError) {
                    xhr.onerror = function(evt) {
                      args.onError(xhr.status);
                    };
                  }
                  xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
                  xhr.onprogress = this.onProgress.bind(this, xhrId);
                  pendingRequest.onHeadersReceived = args.onHeadersReceived;
                  pendingRequest.onDone = args.onDone;
                  pendingRequest.onError = args.onError;
                  pendingRequest.onProgress = args.onProgress;
                  xhr.send(null);
                  return xhrId;
                }
              }, {
                key: "onProgress",
                value: function onProgress(xhrId, evt) {
                  var _pendingRequest$onPro;
                  var pendingRequest = this.pendingRequests[xhrId];
                  if (!pendingRequest) {
                    return;
                  }
                  (_pendingRequest$onPro = pendingRequest.onProgress) === null || _pendingRequest$onPro === void 0 ? void 0 : _pendingRequest$onPro.call(pendingRequest, evt);
                }
              }, {
                key: "onStateChange",
                value: function onStateChange(xhrId, evt) {
                  var pendingRequest = this.pendingRequests[xhrId];
                  if (!pendingRequest) {
                    return;
                  }
                  var xhr = pendingRequest.xhr;
                  if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
                    pendingRequest.onHeadersReceived();
                    delete pendingRequest.onHeadersReceived;
                  }
                  if (xhr.readyState !== 4) {
                    return;
                  }
                  if (!(xhrId in this.pendingRequests)) {
                    return;
                  }
                  delete this.pendingRequests[xhrId];
                  if (xhr.status === 0 && this.isHttp) {
                    var _pendingRequest$onErr;
                    (_pendingRequest$onErr = pendingRequest.onError) === null || _pendingRequest$onErr === void 0 ? void 0 : _pendingRequest$onErr.call(pendingRequest, xhr.status);
                    return;
                  }
                  var xhrStatus = xhr.status || OK_RESPONSE;
                  var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
                  if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
                    var _pendingRequest$onErr2;
                    (_pendingRequest$onErr2 = pendingRequest.onError) === null || _pendingRequest$onErr2 === void 0 ? void 0 : _pendingRequest$onErr2.call(pendingRequest, xhr.status);
                    return;
                  }
                  var chunk = getArrayBuffer(xhr);
                  if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                    var rangeHeader = xhr.getResponseHeader("Content-Range");
                    var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
                    pendingRequest.onDone({
                      begin: parseInt(matches[1], 10),
                      chunk
                    });
                  } else if (chunk) {
                    pendingRequest.onDone({
                      begin: 0,
                      chunk
                    });
                  } else {
                    var _pendingRequest$onErr3;
                    (_pendingRequest$onErr3 = pendingRequest.onError) === null || _pendingRequest$onErr3 === void 0 ? void 0 : _pendingRequest$onErr3.call(pendingRequest, xhr.status);
                  }
                }
              }, {
                key: "getRequestXhr",
                value: function getRequestXhr(xhrId) {
                  return this.pendingRequests[xhrId].xhr;
                }
              }, {
                key: "isPendingRequest",
                value: function isPendingRequest(xhrId) {
                  return xhrId in this.pendingRequests;
                }
              }, {
                key: "abortRequest",
                value: function abortRequest(xhrId) {
                  var xhr = this.pendingRequests[xhrId].xhr;
                  delete this.pendingRequests[xhrId];
                  xhr.abort();
                }
              }]);
              return NetworkManager2;
            }();
            var PDFNetworkStream = function() {
              function PDFNetworkStream2(source) {
                _classCallCheck3(this, PDFNetworkStream2);
                this._source = source;
                this._manager = new NetworkManager(source.url, {
                  httpHeaders: source.httpHeaders,
                  withCredentials: source.withCredentials
                });
                this._rangeChunkSize = source.rangeChunkSize;
                this._fullRequestReader = null;
                this._rangeRequestReaders = [];
              }
              _createClass3(PDFNetworkStream2, [{
                key: "_onRangeRequestReaderClosed",
                value: function _onRangeRequestReaderClosed(reader) {
                  var i = this._rangeRequestReaders.indexOf(reader);
                  if (i >= 0) {
                    this._rangeRequestReaders.splice(i, 1);
                  }
                }
              }, {
                key: "getFullReader",
                value: function getFullReader() {
                  (0, _util2.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
                  this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
                  return this._fullRequestReader;
                }
              }, {
                key: "getRangeReader",
                value: function getRangeReader(begin, end) {
                  var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
                  reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
                  this._rangeRequestReaders.push(reader);
                  return reader;
                }
              }, {
                key: "cancelAllRequests",
                value: function cancelAllRequests(reason) {
                  var _this$_fullRequestRea;
                  (_this$_fullRequestRea = this._fullRequestReader) === null || _this$_fullRequestRea === void 0 ? void 0 : _this$_fullRequestRea.cancel(reason);
                  var _iterator = _createForOfIteratorHelper2(this._rangeRequestReaders.slice(0)), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var reader = _step.value;
                      reader.cancel(reason);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                }
              }]);
              return PDFNetworkStream2;
            }();
            exports2.PDFNetworkStream = PDFNetworkStream;
            var PDFNetworkStreamFullRequestReader = function() {
              function PDFNetworkStreamFullRequestReader2(manager, source) {
                _classCallCheck3(this, PDFNetworkStreamFullRequestReader2);
                this._manager = manager;
                var args = {
                  onHeadersReceived: this._onHeadersReceived.bind(this),
                  onDone: this._onDone.bind(this),
                  onError: this._onError.bind(this),
                  onProgress: this._onProgress.bind(this)
                };
                this._url = source.url;
                this._fullRequestId = manager.requestFull(args);
                this._headersReceivedCapability = (0, _util2.createPromiseCapability)();
                this._disableRange = source.disableRange || false;
                this._contentLength = source.length;
                this._rangeChunkSize = source.rangeChunkSize;
                if (!this._rangeChunkSize && !this._disableRange) {
                  this._disableRange = true;
                }
                this._isStreamingSupported = false;
                this._isRangeSupported = false;
                this._cachedChunks = [];
                this._requests = [];
                this._done = false;
                this._storedError = void 0;
                this._filename = null;
                this.onProgress = null;
              }
              _createClass3(PDFNetworkStreamFullRequestReader2, [{
                key: "_onHeadersReceived",
                value: function _onHeadersReceived() {
                  var fullRequestXhrId = this._fullRequestId;
                  var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);
                  var getResponseHeader = function getResponseHeader2(name) {
                    return fullRequestXhr.getResponseHeader(name);
                  };
                  var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
                    getResponseHeader,
                    isHttp: this._manager.isHttp,
                    rangeChunkSize: this._rangeChunkSize,
                    disableRange: this._disableRange
                  }), allowRangeRequests = _validateRangeRequest.allowRangeRequests, suggestedLength = _validateRangeRequest.suggestedLength;
                  if (allowRangeRequests) {
                    this._isRangeSupported = true;
                  }
                  this._contentLength = suggestedLength || this._contentLength;
                  this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                  if (this._isRangeSupported) {
                    this._manager.abortRequest(fullRequestXhrId);
                  }
                  this._headersReceivedCapability.resolve();
                }
              }, {
                key: "_onDone",
                value: function _onDone(data) {
                  if (data) {
                    if (this._requests.length > 0) {
                      var requestCapability = this._requests.shift();
                      requestCapability.resolve({
                        value: data.chunk,
                        done: false
                      });
                    } else {
                      this._cachedChunks.push(data.chunk);
                    }
                  }
                  this._done = true;
                  if (this._cachedChunks.length > 0) {
                    return;
                  }
                  var _iterator2 = _createForOfIteratorHelper2(this._requests), _step2;
                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                      var _requestCapability = _step2.value;
                      _requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                  this._requests.length = 0;
                }
              }, {
                key: "_onError",
                value: function _onError(status) {
                  this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);
                  this._headersReceivedCapability.reject(this._storedError);
                  var _iterator3 = _createForOfIteratorHelper2(this._requests), _step3;
                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                      var requestCapability = _step3.value;
                      requestCapability.reject(this._storedError);
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                  this._requests.length = 0;
                  this._cachedChunks.length = 0;
                }
              }, {
                key: "_onProgress",
                value: function _onProgress(evt) {
                  var _this$onProgress;
                  (_this$onProgress = this.onProgress) === null || _this$onProgress === void 0 ? void 0 : _this$onProgress.call(this, {
                    loaded: evt.loaded,
                    total: evt.lengthComputable ? evt.total : this._contentLength
                  });
                }
              }, {
                key: "filename",
                get: function get2() {
                  return this._filename;
                }
              }, {
                key: "isRangeSupported",
                get: function get2() {
                  return this._isRangeSupported;
                }
              }, {
                key: "isStreamingSupported",
                get: function get2() {
                  return this._isStreamingSupported;
                }
              }, {
                key: "contentLength",
                get: function get2() {
                  return this._contentLength;
                }
              }, {
                key: "headersReady",
                get: function get2() {
                  return this._headersReceivedCapability.promise;
                }
              }, {
                key: "read",
                value: function() {
                  var _read = _asyncToGenerator2(_regenerator2["default"].mark(function _callee() {
                    var chunk, requestCapability;
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!this._storedError) {
                              _context.next = 2;
                              break;
                            }
                            throw this._storedError;
                          case 2:
                            if (!(this._cachedChunks.length > 0)) {
                              _context.next = 5;
                              break;
                            }
                            chunk = this._cachedChunks.shift();
                            return _context.abrupt("return", {
                              value: chunk,
                              done: false
                            });
                          case 5:
                            if (!this._done) {
                              _context.next = 7;
                              break;
                            }
                            return _context.abrupt("return", {
                              value: void 0,
                              done: true
                            });
                          case 7:
                            requestCapability = (0, _util2.createPromiseCapability)();
                            this._requests.push(requestCapability);
                            return _context.abrupt("return", requestCapability.promise);
                          case 10:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function read() {
                    return _read.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  this._done = true;
                  this._headersReceivedCapability.reject(reason);
                  var _iterator4 = _createForOfIteratorHelper2(this._requests), _step4;
                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                      var requestCapability = _step4.value;
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                  this._requests.length = 0;
                  if (this._manager.isPendingRequest(this._fullRequestId)) {
                    this._manager.abortRequest(this._fullRequestId);
                  }
                  this._fullRequestReader = null;
                }
              }]);
              return PDFNetworkStreamFullRequestReader2;
            }();
            var PDFNetworkStreamRangeRequestReader = function() {
              function PDFNetworkStreamRangeRequestReader2(manager, begin, end) {
                _classCallCheck3(this, PDFNetworkStreamRangeRequestReader2);
                this._manager = manager;
                var args = {
                  onDone: this._onDone.bind(this),
                  onError: this._onError.bind(this),
                  onProgress: this._onProgress.bind(this)
                };
                this._url = manager.url;
                this._requestId = manager.requestRange(begin, end, args);
                this._requests = [];
                this._queuedChunk = null;
                this._done = false;
                this._storedError = void 0;
                this.onProgress = null;
                this.onClosed = null;
              }
              _createClass3(PDFNetworkStreamRangeRequestReader2, [{
                key: "_close",
                value: function _close() {
                  var _this$onClosed;
                  (_this$onClosed = this.onClosed) === null || _this$onClosed === void 0 ? void 0 : _this$onClosed.call(this, this);
                }
              }, {
                key: "_onDone",
                value: function _onDone(data) {
                  var chunk = data.chunk;
                  if (this._requests.length > 0) {
                    var requestCapability = this._requests.shift();
                    requestCapability.resolve({
                      value: chunk,
                      done: false
                    });
                  } else {
                    this._queuedChunk = chunk;
                  }
                  this._done = true;
                  var _iterator5 = _createForOfIteratorHelper2(this._requests), _step5;
                  try {
                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                      var _requestCapability2 = _step5.value;
                      _requestCapability2.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                  } catch (err) {
                    _iterator5.e(err);
                  } finally {
                    _iterator5.f();
                  }
                  this._requests.length = 0;
                  this._close();
                }
              }, {
                key: "_onError",
                value: function _onError(status) {
                  this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);
                  var _iterator6 = _createForOfIteratorHelper2(this._requests), _step6;
                  try {
                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
                      var requestCapability = _step6.value;
                      requestCapability.reject(this._storedError);
                    }
                  } catch (err) {
                    _iterator6.e(err);
                  } finally {
                    _iterator6.f();
                  }
                  this._requests.length = 0;
                  this._queuedChunk = null;
                }
              }, {
                key: "_onProgress",
                value: function _onProgress(evt) {
                  if (!this.isStreamingSupported) {
                    var _this$onProgress2;
                    (_this$onProgress2 = this.onProgress) === null || _this$onProgress2 === void 0 ? void 0 : _this$onProgress2.call(this, {
                      loaded: evt.loaded
                    });
                  }
                }
              }, {
                key: "isStreamingSupported",
                get: function get2() {
                  return false;
                }
              }, {
                key: "read",
                value: function() {
                  var _read2 = _asyncToGenerator2(_regenerator2["default"].mark(function _callee2() {
                    var chunk, requestCapability;
                    return _regenerator2["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (!this._storedError) {
                              _context2.next = 2;
                              break;
                            }
                            throw this._storedError;
                          case 2:
                            if (!(this._queuedChunk !== null)) {
                              _context2.next = 6;
                              break;
                            }
                            chunk = this._queuedChunk;
                            this._queuedChunk = null;
                            return _context2.abrupt("return", {
                              value: chunk,
                              done: false
                            });
                          case 6:
                            if (!this._done) {
                              _context2.next = 8;
                              break;
                            }
                            return _context2.abrupt("return", {
                              value: void 0,
                              done: true
                            });
                          case 8:
                            requestCapability = (0, _util2.createPromiseCapability)();
                            this._requests.push(requestCapability);
                            return _context2.abrupt("return", requestCapability.promise);
                          case 11:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));
                  function read() {
                    return _read2.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  this._done = true;
                  var _iterator7 = _createForOfIteratorHelper2(this._requests), _step7;
                  try {
                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                      var requestCapability = _step7.value;
                      requestCapability.resolve({
                        value: void 0,
                        done: true
                      });
                    }
                  } catch (err) {
                    _iterator7.e(err);
                  } finally {
                    _iterator7.f();
                  }
                  this._requests.length = 0;
                  if (this._manager.isPendingRequest(this._requestId)) {
                    this._manager.abortRequest(this._requestId);
                  }
                  this._close();
                }
              }]);
              return PDFNetworkStreamRangeRequestReader2;
            }();
          },
          (__unused_webpack_module2, exports2, __w_pdfjs_require__2) => {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.PDFFetchStream = void 0;
            var _regenerator2 = _interopRequireDefault2(__w_pdfjs_require__2(2));
            var _util2 = __w_pdfjs_require__2(4);
            var _network_utils = __w_pdfjs_require__2(154);
            function _interopRequireDefault2(obj) {
              return obj && obj.__esModule ? obj : { "default": obj };
            }
            function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator2(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
            function _createForOfIteratorHelper2(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (!it) {
                if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
                  if (it)
                    o = it;
                  var i = 0;
                  var F = function F2() {
                  };
                  return { s: F, n: function n() {
                    if (i >= o.length)
                      return { done: true };
                    return { done: false, value: o[i++] };
                  }, e: function e(_e) {
                    throw _e;
                  }, f: F };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var normalCompletion = true, didErr = false, err;
              return { s: function s() {
                it = it.call(o);
              }, n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              }, e: function e(_e2) {
                didErr = true;
                err = _e2;
              }, f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              } };
            }
            function _unsupportedIterableToArray3(o, minLen) {
              if (!o)
                return;
              if (typeof o === "string")
                return _arrayLikeToArray3(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor)
                n = o.constructor.name;
              if (n === "Map" || n === "Set")
                return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray3(o, minLen);
            }
            function _arrayLikeToArray3(arr, len) {
              if (len == null || len > arr.length)
                len = arr.length;
              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }
              return arr2;
            }
            function _classCallCheck3(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _defineProperties3(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            function _createClass3(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties3(Constructor, staticProps);
              return Constructor;
            }
            ;
            function createFetchOptions(headers, withCredentials, abortController) {
              return {
                method: "GET",
                headers,
                signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal,
                mode: "cors",
                credentials: withCredentials ? "include" : "same-origin",
                redirect: "follow"
              };
            }
            function createHeaders(httpHeaders) {
              var headers = new Headers();
              for (var property in httpHeaders) {
                var value = httpHeaders[property];
                if (typeof value === "undefined") {
                  continue;
                }
                headers.append(property, value);
              }
              return headers;
            }
            var PDFFetchStream = function() {
              function PDFFetchStream2(source) {
                _classCallCheck3(this, PDFFetchStream2);
                this.source = source;
                this.isHttp = /^https?:/i.test(source.url);
                this.httpHeaders = this.isHttp && source.httpHeaders || {};
                this._fullRequestReader = null;
                this._rangeRequestReaders = [];
              }
              _createClass3(PDFFetchStream2, [{
                key: "_progressiveDataLength",
                get: function get2() {
                  var _this$_fullRequestRea, _this$_fullRequestRea2;
                  return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;
                }
              }, {
                key: "getFullReader",
                value: function getFullReader() {
                  (0, _util2.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
                  this._fullRequestReader = new PDFFetchStreamReader(this);
                  return this._fullRequestReader;
                }
              }, {
                key: "getRangeReader",
                value: function getRangeReader(begin, end) {
                  if (end <= this._progressiveDataLength) {
                    return null;
                  }
                  var reader = new PDFFetchStreamRangeReader(this, begin, end);
                  this._rangeRequestReaders.push(reader);
                  return reader;
                }
              }, {
                key: "cancelAllRequests",
                value: function cancelAllRequests(reason) {
                  if (this._fullRequestReader) {
                    this._fullRequestReader.cancel(reason);
                  }
                  var _iterator = _createForOfIteratorHelper2(this._rangeRequestReaders.slice(0)), _step;
                  try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                      var reader = _step.value;
                      reader.cancel(reason);
                    }
                  } catch (err) {
                    _iterator.e(err);
                  } finally {
                    _iterator.f();
                  }
                }
              }]);
              return PDFFetchStream2;
            }();
            exports2.PDFFetchStream = PDFFetchStream;
            var PDFFetchStreamReader = function() {
              function PDFFetchStreamReader2(stream) {
                var _this = this;
                _classCallCheck3(this, PDFFetchStreamReader2);
                this._stream = stream;
                this._reader = null;
                this._loaded = 0;
                this._filename = null;
                var source = stream.source;
                this._withCredentials = source.withCredentials || false;
                this._contentLength = source.length;
                this._headersCapability = (0, _util2.createPromiseCapability)();
                this._disableRange = source.disableRange || false;
                this._rangeChunkSize = source.rangeChunkSize;
                if (!this._rangeChunkSize && !this._disableRange) {
                  this._disableRange = true;
                }
                if (typeof AbortController !== "undefined") {
                  this._abortController = new AbortController();
                }
                this._isStreamingSupported = !source.disableStream;
                this._isRangeSupported = !source.disableRange;
                this._headers = createHeaders(this._stream.httpHeaders);
                var url = source.url;
                fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function(response) {
                  if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                    throw (0, _network_utils.createResponseStatusError)(response.status, url);
                  }
                  _this._reader = response.body.getReader();
                  _this._headersCapability.resolve();
                  var getResponseHeader = function getResponseHeader2(name) {
                    return response.headers.get(name);
                  };
                  var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({
                    getResponseHeader,
                    isHttp: _this._stream.isHttp,
                    rangeChunkSize: _this._rangeChunkSize,
                    disableRange: _this._disableRange
                  }), allowRangeRequests = _validateRangeRequest.allowRangeRequests, suggestedLength = _validateRangeRequest.suggestedLength;
                  _this._isRangeSupported = allowRangeRequests;
                  _this._contentLength = suggestedLength || _this._contentLength;
                  _this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
                  if (!_this._isStreamingSupported && _this._isRangeSupported) {
                    _this.cancel(new _util2.AbortException("Streaming is disabled."));
                  }
                })["catch"](this._headersCapability.reject);
                this.onProgress = null;
              }
              _createClass3(PDFFetchStreamReader2, [{
                key: "headersReady",
                get: function get2() {
                  return this._headersCapability.promise;
                }
              }, {
                key: "filename",
                get: function get2() {
                  return this._filename;
                }
              }, {
                key: "contentLength",
                get: function get2() {
                  return this._contentLength;
                }
              }, {
                key: "isRangeSupported",
                get: function get2() {
                  return this._isRangeSupported;
                }
              }, {
                key: "isStreamingSupported",
                get: function get2() {
                  return this._isStreamingSupported;
                }
              }, {
                key: "read",
                value: function() {
                  var _read = _asyncToGenerator2(_regenerator2["default"].mark(function _callee() {
                    var _yield$this$_reader$r, value, done, buffer;
                    return _regenerator2["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return this._headersCapability.promise;
                          case 2:
                            _context.next = 4;
                            return this._reader.read();
                          case 4:
                            _yield$this$_reader$r = _context.sent;
                            value = _yield$this$_reader$r.value;
                            done = _yield$this$_reader$r.done;
                            if (!done) {
                              _context.next = 9;
                              break;
                            }
                            return _context.abrupt("return", {
                              value,
                              done
                            });
                          case 9:
                            this._loaded += value.byteLength;
                            if (this.onProgress) {
                              this.onProgress({
                                loaded: this._loaded,
                                total: this._contentLength
                              });
                            }
                            buffer = new Uint8Array(value).buffer;
                            return _context.abrupt("return", {
                              value: buffer,
                              done: false
                            });
                          case 13:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                  function read() {
                    return _read.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  if (this._reader) {
                    this._reader.cancel(reason);
                  }
                  if (this._abortController) {
                    this._abortController.abort();
                  }
                }
              }]);
              return PDFFetchStreamReader2;
            }();
            var PDFFetchStreamRangeReader = function() {
              function PDFFetchStreamRangeReader2(stream, begin, end) {
                var _this2 = this;
                _classCallCheck3(this, PDFFetchStreamRangeReader2);
                this._stream = stream;
                this._reader = null;
                this._loaded = 0;
                var source = stream.source;
                this._withCredentials = source.withCredentials || false;
                this._readCapability = (0, _util2.createPromiseCapability)();
                this._isStreamingSupported = !source.disableStream;
                if (typeof AbortController !== "undefined") {
                  this._abortController = new AbortController();
                }
                this._headers = createHeaders(this._stream.httpHeaders);
                this._headers.append("Range", "bytes=".concat(begin, "-").concat(end - 1));
                var url = source.url;
                fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function(response) {
                  if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                    throw (0, _network_utils.createResponseStatusError)(response.status, url);
                  }
                  _this2._readCapability.resolve();
                  _this2._reader = response.body.getReader();
                })["catch"](this._readCapability.reject);
                this.onProgress = null;
              }
              _createClass3(PDFFetchStreamRangeReader2, [{
                key: "isStreamingSupported",
                get: function get2() {
                  return this._isStreamingSupported;
                }
              }, {
                key: "read",
                value: function() {
                  var _read2 = _asyncToGenerator2(_regenerator2["default"].mark(function _callee2() {
                    var _yield$this$_reader$r2, value, done, buffer;
                    return _regenerator2["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return this._readCapability.promise;
                          case 2:
                            _context2.next = 4;
                            return this._reader.read();
                          case 4:
                            _yield$this$_reader$r2 = _context2.sent;
                            value = _yield$this$_reader$r2.value;
                            done = _yield$this$_reader$r2.done;
                            if (!done) {
                              _context2.next = 9;
                              break;
                            }
                            return _context2.abrupt("return", {
                              value,
                              done
                            });
                          case 9:
                            this._loaded += value.byteLength;
                            if (this.onProgress) {
                              this.onProgress({
                                loaded: this._loaded
                              });
                            }
                            buffer = new Uint8Array(value).buffer;
                            return _context2.abrupt("return", {
                              value: buffer,
                              done: false
                            });
                          case 13:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2, this);
                  }));
                  function read() {
                    return _read2.apply(this, arguments);
                  }
                  return read;
                }()
              }, {
                key: "cancel",
                value: function cancel(reason) {
                  if (this._reader) {
                    this._reader.cancel(reason);
                  }
                  if (this._abortController) {
                    this._abortController.abort();
                  }
                }
              }]);
              return PDFFetchStreamRangeReader2;
            }();
          }
        ];
        var __webpack_module_cache__ = {};
        function __w_pdfjs_require__(moduleId) {
          var cachedModule = __webpack_module_cache__[moduleId];
          if (cachedModule !== void 0) {
            return cachedModule.exports;
          }
          var module2 = __webpack_module_cache__[moduleId] = {
            id: moduleId,
            loaded: false,
            exports: {}
          };
          __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __w_pdfjs_require__);
          module2.loaded = true;
          return module2.exports;
        }
        (() => {
          __w_pdfjs_require__.nmd = (module2) => {
            module2.paths = [];
            if (!module2.children)
              module2.children = [];
            return module2;
          };
        })();
        var __webpack_exports__ = {};
        (() => {
          "use strict";
          var exports2 = __webpack_exports__;
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          Object.defineProperty(exports2, "AnnotationLayer", {
            enumerable: true,
            get: function get2() {
              return _annotation_layer.AnnotationLayer;
            }
          });
          Object.defineProperty(exports2, "AnnotationMode", {
            enumerable: true,
            get: function get2() {
              return _util2.AnnotationMode;
            }
          });
          Object.defineProperty(exports2, "CMapCompressionType", {
            enumerable: true,
            get: function get2() {
              return _util2.CMapCompressionType;
            }
          });
          Object.defineProperty(exports2, "GlobalWorkerOptions", {
            enumerable: true,
            get: function get2() {
              return _worker_options2.GlobalWorkerOptions;
            }
          });
          Object.defineProperty(exports2, "InvalidPDFException", {
            enumerable: true,
            get: function get2() {
              return _util2.InvalidPDFException;
            }
          });
          Object.defineProperty(exports2, "LinkTarget", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.LinkTarget;
            }
          });
          Object.defineProperty(exports2, "LoopbackPort", {
            enumerable: true,
            get: function get2() {
              return _api.LoopbackPort;
            }
          });
          Object.defineProperty(exports2, "MissingPDFException", {
            enumerable: true,
            get: function get2() {
              return _util2.MissingPDFException;
            }
          });
          Object.defineProperty(exports2, "OPS", {
            enumerable: true,
            get: function get2() {
              return _util2.OPS;
            }
          });
          Object.defineProperty(exports2, "PDFDataRangeTransport", {
            enumerable: true,
            get: function get2() {
              return _api.PDFDataRangeTransport;
            }
          });
          Object.defineProperty(exports2, "PDFDateString", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.PDFDateString;
            }
          });
          Object.defineProperty(exports2, "PDFWorker", {
            enumerable: true,
            get: function get2() {
              return _api.PDFWorker;
            }
          });
          Object.defineProperty(exports2, "PasswordResponses", {
            enumerable: true,
            get: function get2() {
              return _util2.PasswordResponses;
            }
          });
          Object.defineProperty(exports2, "PermissionFlag", {
            enumerable: true,
            get: function get2() {
              return _util2.PermissionFlag;
            }
          });
          Object.defineProperty(exports2, "PixelsPerInch", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.PixelsPerInch;
            }
          });
          Object.defineProperty(exports2, "RenderingCancelledException", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.RenderingCancelledException;
            }
          });
          Object.defineProperty(exports2, "SVGGraphics", {
            enumerable: true,
            get: function get2() {
              return _svg.SVGGraphics;
            }
          });
          Object.defineProperty(exports2, "UNSUPPORTED_FEATURES", {
            enumerable: true,
            get: function get2() {
              return _util2.UNSUPPORTED_FEATURES;
            }
          });
          Object.defineProperty(exports2, "UnexpectedResponseException", {
            enumerable: true,
            get: function get2() {
              return _util2.UnexpectedResponseException;
            }
          });
          Object.defineProperty(exports2, "Util", {
            enumerable: true,
            get: function get2() {
              return _util2.Util;
            }
          });
          Object.defineProperty(exports2, "VerbosityLevel", {
            enumerable: true,
            get: function get2() {
              return _util2.VerbosityLevel;
            }
          });
          Object.defineProperty(exports2, "XfaLayer", {
            enumerable: true,
            get: function get2() {
              return _xfa_layer.XfaLayer;
            }
          });
          Object.defineProperty(exports2, "addLinkAttributes", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.addLinkAttributes;
            }
          });
          Object.defineProperty(exports2, "build", {
            enumerable: true,
            get: function get2() {
              return _api.build;
            }
          });
          Object.defineProperty(exports2, "createObjectURL", {
            enumerable: true,
            get: function get2() {
              return _util2.createObjectURL;
            }
          });
          Object.defineProperty(exports2, "createPromiseCapability", {
            enumerable: true,
            get: function get2() {
              return _util2.createPromiseCapability;
            }
          });
          Object.defineProperty(exports2, "createValidAbsoluteUrl", {
            enumerable: true,
            get: function get2() {
              return _util2.createValidAbsoluteUrl;
            }
          });
          Object.defineProperty(exports2, "getDocument", {
            enumerable: true,
            get: function get2() {
              return _api.getDocument;
            }
          });
          Object.defineProperty(exports2, "getFilenameFromUrl", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.getFilenameFromUrl;
            }
          });
          Object.defineProperty(exports2, "getPdfFilenameFromUrl", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.getPdfFilenameFromUrl;
            }
          });
          Object.defineProperty(exports2, "getXfaPageViewport", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.getXfaPageViewport;
            }
          });
          Object.defineProperty(exports2, "isPdfFile", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.isPdfFile;
            }
          });
          Object.defineProperty(exports2, "loadScript", {
            enumerable: true,
            get: function get2() {
              return _display_utils2.loadScript;
            }
          });
          Object.defineProperty(exports2, "removeNullCharacters", {
            enumerable: true,
            get: function get2() {
              return _util2.removeNullCharacters;
            }
          });
          Object.defineProperty(exports2, "renderTextLayer", {
            enumerable: true,
            get: function get2() {
              return _text_layer.renderTextLayer;
            }
          });
          Object.defineProperty(exports2, "shadow", {
            enumerable: true,
            get: function get2() {
              return _util2.shadow;
            }
          });
          Object.defineProperty(exports2, "version", {
            enumerable: true,
            get: function get2() {
              return _api.version;
            }
          });
          var _display_utils2 = __w_pdfjs_require__(1);
          var _util2 = __w_pdfjs_require__(4);
          var _api = __w_pdfjs_require__(136);
          var _annotation_layer = __w_pdfjs_require__(148);
          var _worker_options2 = __w_pdfjs_require__(142);
          var _is_node2 = __w_pdfjs_require__(6);
          var _text_layer = __w_pdfjs_require__(151);
          var _svg = __w_pdfjs_require__(152);
          var _xfa_layer = __w_pdfjs_require__(150);
          var pdfjsVersion = "2.12.313";
          var pdfjsBuild = "a2ae56f39";
          {
            if (_is_node2.isNodeJS) {
              var _require = __w_pdfjs_require__(153), PDFNodeStream = _require.PDFNodeStream;
              (0, _api.setPDFNetworkStreamFactory)(function(params) {
                return new PDFNodeStream(params);
              });
            } else {
              var _require2 = __w_pdfjs_require__(156), PDFNetworkStream = _require2.PDFNetworkStream;
              var _require3 = __w_pdfjs_require__(157), PDFFetchStream = _require3.PDFFetchStream;
              (0, _api.setPDFNetworkStreamFactory)(function(params) {
                if ((0, _display_utils2.isValidFetchUrl)(params.url)) {
                  return new PDFFetchStream(params);
                }
                return new PDFNetworkStream(params);
              });
            }
          }
        })();
        return __webpack_exports__;
      })();
    });
  }
});

// node_modules/react-pdf/dist/esm/entry.js
var pdfjs5 = __toESM(require_pdf());

// node_modules/react-pdf/dist/esm/Document.js
init_extends();

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
init_objectWithoutPropertiesLoose();
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self2, call) {
  if (call && (_typeof2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/react-pdf/dist/esm/Document.js
init_defineProperty();
var import_react3 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/make-event-props/dist/esm/index.js
var clipboardEvents = ["onCopy", "onCut", "onPaste"];
var compositionEvents = ["onCompositionEnd", "onCompositionStart", "onCompositionUpdate"];
var keyboardEvents = ["onKeyDown", "onKeyPress", "onKeyUp"];
var focusEvents = ["onFocus", "onBlur"];
var formEvents = ["onChange", "onInput", "onInvalid", "onReset", "onSubmit"];
var genericEvents = ["onError", "onLoad"];
var mouseEvents = ["onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp"];
var pointerEvents = ["onPointerDown", "onPointerMove", "onPointerUp", "onPointerCancel", "onGotPointerCapture", "onLostPointerCapture", "onPointerEnter", "onPointerLeave", "onPointerOver", "onPointerOut"];
var selectionEvents = ["onSelect"];
var touchEvents = ["onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart"];
var uiEvents = ["onScroll"];
var wheelEvents = ["onWheel"];
var mediaEvents = ["onAbort", "onCanPlay", "onCanPlayThrough", "onDurationChange", "onEmptied", "onEncrypted", "onEnded", "onError", "onLoadedData", "onLoadedMetadata", "onLoadStart", "onPause", "onPlay", "onPlaying", "onProgress", "onRateChange", "onSeeked", "onSeeking", "onStalled", "onSuspend", "onTimeUpdate", "onVolumeChange", "onWaiting"];
var imageEvents = ["onLoad", "onError"];
var animationEvents = ["onAnimationStart", "onAnimationEnd", "onAnimationIteration"];
var transitionEvents = ["onTransitionEnd"];
var otherEvents = ["onToggle"];
var allEvents = [].concat(clipboardEvents, compositionEvents, keyboardEvents, focusEvents, formEvents, genericEvents, mouseEvents, pointerEvents, selectionEvents, touchEvents, uiEvents, wheelEvents, mediaEvents, imageEvents, animationEvents, transitionEvents, otherEvents);
var makeEventProps = function makeEventProps2(props, getArgs) {
  var eventProps2 = {};
  allEvents.forEach(function(eventName) {
    if (!(eventName in props)) {
      return;
    }
    if (!getArgs) {
      eventProps2[eventName] = props[eventName];
      return;
    }
    eventProps2[eventName] = function(event) {
      return props[eventName](event, getArgs(eventName));
    };
  });
  return eventProps2;
};
var esm_default = makeEventProps;

// node_modules/make-cancellable-promise/dist/esm/index.js
function makeCancellablePromise(promise) {
  var isCancelled = false;
  var wrappedPromise = new Promise(function(resolve, reject) {
    promise.then(function() {
      return !isCancelled && resolve.apply(void 0, arguments);
    })["catch"](function(error) {
      return !isCancelled && reject(error);
    });
  });
  return {
    promise: wrappedPromise,
    cancel: function cancel() {
      isCancelled = true;
    }
  };
}

// node_modules/merge-class-names/dist/esm/index.js
function mergeClassNames() {
  return Array.prototype.slice.call(arguments).reduce(function(classList, arg) {
    return classList.concat(arg);
  }, []).filter(function(arg) {
    return typeof arg === "string";
  }).join(" ");
}

// node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix);
  }
  var provided = typeof message === "function" ? message() : message;
  var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
  throw new Error(value);
}

// node_modules/react-pdf/dist/esm/Document.js
var pdfjs = __toESM(require_pdf());

// node_modules/react-pdf/dist/esm/DocumentContext.js
var import_react = __toESM(require_react());
var DocumentContext_default = (0, import_react.createContext)(null);

// node_modules/react-pdf/dist/esm/Message.js
var import_react2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
function Message(_ref) {
  var children = _ref.children, type = _ref.type;
  return import_react2.default.createElement("div", {
    className: "react-pdf__message react-pdf__message--".concat(type)
  }, children);
}
Message.propTypes = {
  children: import_prop_types.default.node,
  type: import_prop_types.default.oneOf(["error", "loading", "no-data"]).isRequired
};

// node_modules/react-pdf/dist/esm/LinkService.js
var DEFAULT_LINK_REL = "noopener noreferrer nofollow";
var LinkService = function() {
  function LinkService2() {
    _classCallCheck2(this, LinkService2);
    this.externalLinkTarget = null;
    this.externalLinkRel = null;
  }
  _createClass2(LinkService2, [{
    key: "setDocument",
    value: function setDocument(pdfDocument) {
      this.pdfDocument = pdfDocument;
    }
  }, {
    key: "setViewer",
    value: function setViewer(pdfViewer) {
      this.pdfViewer = pdfViewer;
    }
  }, {
    key: "setExternalLinkRel",
    value: function setExternalLinkRel(externalLinkRel) {
      this.externalLinkRel = externalLinkRel;
    }
  }, {
    key: "setExternalLinkTarget",
    value: function setExternalLinkTarget(externalLinkTarget) {
      this.externalLinkTarget = externalLinkTarget;
    }
  }, {
    key: "setHistory",
    value: function setHistory() {
    }
  }, {
    key: "pagesCount",
    get: function get2() {
      return this.pdfDocument ? this.pdfDocument.numPages : 0;
    }
  }, {
    key: "page",
    get: function get2() {
      return this.pdfViewer.currentPageNumber;
    },
    set: function set(value) {
      this.pdfViewer.currentPageNumber = value;
    }
  }, {
    key: "rotation",
    get: function get2() {
      return 0;
    },
    set: function set(value) {
    }
  }, {
    key: "goToDestination",
    value: function goToDestination(dest) {
      var _this = this;
      new Promise(function(resolve) {
        if (typeof dest === "string") {
          _this.pdfDocument.getDestination(dest).then(resolve);
        } else if (Array.isArray(dest)) {
          resolve(dest);
        } else {
          dest.then(resolve);
        }
      }).then(function(explicitDest) {
        invariant(Array.isArray(explicitDest), '"'.concat(explicitDest, '" is not a valid destination array.'));
        var destRef = explicitDest[0];
        new Promise(function(resolve) {
          if (destRef instanceof Object) {
            _this.pdfDocument.getPageIndex(destRef).then(function(pageIndex) {
              resolve(pageIndex);
            })["catch"](function() {
              invariant(false, '"'.concat(destRef, '" is not a valid page reference.'));
            });
          } else if (typeof destRef === "number") {
            resolve(destRef);
          } else {
            invariant(false, '"'.concat(destRef, '" is not a valid destination reference.'));
          }
        }).then(function(pageIndex) {
          var pageNumber = pageIndex + 1;
          invariant(pageNumber >= 1 && pageNumber <= _this.pagesCount, '"'.concat(pageNumber, '" is not a valid page number.'));
          _this.pdfViewer.scrollPageIntoView({
            dest,
            pageIndex,
            pageNumber
          });
        });
      });
    }
  }, {
    key: "navigateTo",
    value: function navigateTo(dest) {
      this.goToDestination(dest);
    }
  }, {
    key: "goToPage",
    value: function goToPage() {
    }
  }, {
    key: "addLinkAttributes",
    value: function addLinkAttributes(link, url, newWindow) {
      link.href = url;
      link.rel = this.externalLinkRel || DEFAULT_LINK_REL;
      link.target = newWindow ? "_blank" : this.externalLinkTarget || "";
    }
  }, {
    key: "getDestinationHash",
    value: function getDestinationHash() {
      return "#";
    }
  }, {
    key: "getAnchorUrl",
    value: function getAnchorUrl() {
      return "#";
    }
  }, {
    key: "setHash",
    value: function setHash() {
    }
  }, {
    key: "executeNamedAction",
    value: function executeNamedAction() {
    }
  }, {
    key: "cachePageRef",
    value: function cachePageRef() {
    }
  }, {
    key: "isPageVisible",
    value: function isPageVisible() {
      return true;
    }
  }, {
    key: "isPageCached",
    value: function isPageCached() {
      return true;
    }
  }]);
  return LinkService2;
}();

// node_modules/react-pdf/dist/esm/PasswordResponses.js
var PasswordResponses = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};
var PasswordResponses_default = PasswordResponses;

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}

// node_modules/react-pdf/dist/esm/shared/utils.js
var isBrowser = typeof window !== "undefined";
var isLocalFileSystem = isBrowser && window.location.protocol === "file:";
function isDefined(variable) {
  return typeof variable !== "undefined";
}
function isProvided(variable) {
  return isDefined(variable) && variable !== null;
}
function isString(variable) {
  return typeof variable === "string";
}
function isArrayBuffer(variable) {
  return variable instanceof ArrayBuffer;
}
function isBlob(variable) {
  invariant(isBrowser, "isBlob can only be used in a browser environment");
  return variable instanceof Blob;
}
function isFile(variable) {
  invariant(isBrowser, "isFile can only be used in a browser environment");
  return variable instanceof File;
}
function isDataURI(str) {
  return isString(str) && /^data:/.test(str);
}
function dataURItoByteString(dataURI) {
  invariant(isDataURI(dataURI), "Invalid data URI.");
  var _dataURI$split = dataURI.split(","), _dataURI$split2 = _slicedToArray2(_dataURI$split, 2), headersString = _dataURI$split2[0], dataString = _dataURI$split2[1];
  var headers = headersString.split(";");
  if (headers.indexOf("base64") !== -1) {
    return atob(dataString);
  }
  return unescape(dataString);
}
function getPixelRatio() {
  return isBrowser && window.devicePixelRatio || 1;
}
var allowFileAccessFromFilesTip = "On Chromium based browsers, you can use --allow-file-access-from-files flag for debugging purposes.";
function displayCORSWarning() {
  tiny_warning_esm_default(!isLocalFileSystem, "Loading PDF as base64 strings/URLs may not work on protocols other than HTTP/HTTPS. ".concat(allowFileAccessFromFilesTip));
}
function displayWorkerWarning() {
  tiny_warning_esm_default(!isLocalFileSystem, "Loading PDF.js worker may not work on protocols other than HTTP/HTTPS. ".concat(allowFileAccessFromFilesTip));
}
function cancelRunningTask(runningTask) {
  if (runningTask && runningTask.cancel)
    runningTask.cancel();
}
function makePageCallback(page, scale) {
  Object.defineProperty(page, "width", {
    get: function get2() {
      return this.view[2] * scale;
    },
    configurable: true
  });
  Object.defineProperty(page, "height", {
    get: function get2() {
      return this.view[3] * scale;
    },
    configurable: true
  });
  Object.defineProperty(page, "originalWidth", {
    get: function get2() {
      return this.view[2];
    },
    configurable: true
  });
  Object.defineProperty(page, "originalHeight", {
    get: function get2() {
      return this.view[3];
    },
    configurable: true
  });
  return page;
}
function isCancelException(error) {
  return error.name === "RenderingCancelledException";
}
function loadFromFile(file) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onload = function() {
      return resolve(new Uint8Array(reader.result));
    };
    reader.onerror = function(event) {
      switch (event.target.error.code) {
        case event.target.error.NOT_FOUND_ERR:
          return reject(new Error("Error while reading a file: File not found."));
        case event.target.error.NOT_READABLE_ERR:
          return reject(new Error("Error while reading a file: File not readable."));
        case event.target.error.SECURITY_ERR:
          return reject(new Error("Error while reading a file: Security error."));
        case event.target.error.ABORT_ERR:
          return reject(new Error("Error while reading a file: Aborted."));
        default:
          return reject(new Error("Error while reading a file."));
      }
    };
    reader.readAsArrayBuffer(file);
    return null;
  });
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray2(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}

// node_modules/react-pdf/dist/esm/shared/propTypes.js
var import_prop_types2 = __toESM(require_prop_types());
var eventProps = function() {
  var result = {};
  [].concat(_toConsumableArray2(mouseEvents), _toConsumableArray2(touchEvents), _toConsumableArray2(keyboardEvents)).forEach(function(eventName) {
    result[eventName] = import_prop_types2.default.func;
  });
  return result;
}();
var fileTypes = [import_prop_types2.default.string, import_prop_types2.default.instanceOf(ArrayBuffer), import_prop_types2.default.shape({
  data: import_prop_types2.default.oneOfType([import_prop_types2.default.object, import_prop_types2.default.string]),
  httpHeaders: import_prop_types2.default.object,
  range: import_prop_types2.default.object,
  url: import_prop_types2.default.string,
  withCredentials: import_prop_types2.default.bool
})];
if (typeof File !== "undefined") {
  fileTypes.push(import_prop_types2.default.instanceOf(File));
}
if (typeof Blob !== "undefined") {
  fileTypes.push(import_prop_types2.default.instanceOf(Blob));
}
var isClassName = import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.arrayOf(import_prop_types2.default.string)]);
var isFile2 = import_prop_types2.default.oneOfType(fileTypes);
var isLinkService = import_prop_types2.default.instanceOf(LinkService);
var isLinkTarget = import_prop_types2.default.oneOf(["_self", "_blank", "_parent", "_top"]);
var isPage = import_prop_types2.default.shape({
  _transport: import_prop_types2.default.shape({
    fontLoader: import_prop_types2.default.object.isRequired
  }).isRequired,
  commonObjs: import_prop_types2.default.shape({
    _objs: import_prop_types2.default.object.isRequired
  }).isRequired,
  getAnnotations: import_prop_types2.default.func.isRequired,
  getTextContent: import_prop_types2.default.func.isRequired,
  getViewport: import_prop_types2.default.func.isRequired,
  render: import_prop_types2.default.func.isRequired
});
var isPageIndex = function isPageIndex2(props, propName, componentName) {
  var pageIndex = props[propName], pageNumber = props.pageNumber, pdf = props.pdf;
  if (!isDefined(pdf)) {
    return null;
  }
  if (isDefined(pageIndex)) {
    if (typeof pageIndex !== "number") {
      return new Error("`".concat(propName, "` of type `").concat(_typeof2(pageIndex), "` supplied to `").concat(componentName, "`, expected `number`."));
    }
    if (pageIndex < 0) {
      return new Error("Expected `".concat(propName, "` to be greater or equal to 0."));
    }
    var numPages = pdf.numPages;
    if (pageIndex + 1 > numPages) {
      return new Error("Expected `".concat(propName, "` to be less or equal to ").concat(numPages - 1, "."));
    }
  } else if (!isDefined(pageNumber)) {
    return new Error("`".concat(propName, "` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(componentName, "`."));
  }
  return null;
};
var isPageNumber = function isPageNumber2(props, propName, componentName) {
  var pageNumber = props[propName], pageIndex = props.pageIndex, pdf = props.pdf;
  if (!isDefined(pdf)) {
    return null;
  }
  if (isDefined(pageNumber)) {
    if (typeof pageNumber !== "number") {
      return new Error("`".concat(propName, "` of type `").concat(_typeof2(pageNumber), "` supplied to `").concat(componentName, "`, expected `number`."));
    }
    if (pageNumber < 1) {
      return new Error("Expected `".concat(propName, "` to be greater or equal to 1."));
    }
    var numPages = pdf.numPages;
    if (pageNumber > numPages) {
      return new Error("Expected `".concat(propName, "` to be less or equal to ").concat(numPages, "."));
    }
  } else if (!isDefined(pageIndex)) {
    return new Error("`".concat(propName, "` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(componentName, "`."));
  }
  return null;
};
var isPdf = import_prop_types2.default.oneOfType([import_prop_types2.default.shape({
  getDestination: import_prop_types2.default.func.isRequired,
  getOutline: import_prop_types2.default.func.isRequired,
  getPage: import_prop_types2.default.func.isRequired,
  numPages: import_prop_types2.default.number.isRequired
}), import_prop_types2.default.bool]);
var isRef = import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.shape({
  current: import_prop_types2.default.any
})]);
var isRenderMode = import_prop_types2.default.oneOf(["canvas", "none", "svg"]);
var isRotate = import_prop_types2.default.oneOf([0, 90, 180, 270]);

// node_modules/react-pdf/dist/esm/Document.js
var _excluded = ["url"];
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var PDFDataRangeTransport3 = pdfjs.PDFDataRangeTransport;
var Document = function(_PureComponent) {
  _inherits(Document2, _PureComponent);
  var _super = _createSuper(Document2);
  function Document2() {
    var _this;
    _classCallCheck2(this, Document2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      pdf: null
    });
    _defineProperty(_assertThisInitialized(_this), "viewer", {
      scrollPageIntoView: function scrollPageIntoView(_ref) {
        var dest = _ref.dest, pageIndex = _ref.pageIndex, pageNumber = _ref.pageNumber;
        var onItemClick = _this.props.onItemClick;
        if (onItemClick) {
          onItemClick({
            dest,
            pageIndex,
            pageNumber
          });
          return;
        }
        var page = _this.pages[pageIndex];
        if (page) {
          page.scrollIntoView();
          return;
        }
        tiny_warning_esm_default(false, "An internal link leading to page ".concat(pageNumber, " was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>."));
      }
    });
    _defineProperty(_assertThisInitialized(_this), "linkService", new LinkService());
    _defineProperty(_assertThisInitialized(_this), "loadDocument", function() {
      cancelRunningTask(_this.runningTask);
      if (_this.loadingTask)
        _this.loadingTask.destroy();
      var cancellable = makeCancellablePromise(_this.findDocumentSource());
      _this.runningTask = cancellable;
      cancellable.promise.then(function(source) {
        _this.onSourceSuccess();
        if (!source) {
          return;
        }
        _this.setState(function(prevState) {
          if (!prevState.pdf) {
            return null;
          }
          return {
            pdf: null
          };
        });
        var _this$props = _this.props, options = _this$props.options, onLoadProgress = _this$props.onLoadProgress, onPassword2 = _this$props.onPassword;
        _this.loadingTask = pdfjs.getDocument(_objectSpread(_objectSpread({}, source), options));
        _this.loadingTask.onPassword = onPassword2;
        if (onLoadProgress) {
          _this.loadingTask.onProgress = onLoadProgress;
        }
        var cancellable2 = makeCancellablePromise(_this.loadingTask.promise);
        _this.runningTask = cancellable2;
        cancellable2.promise.then(function(pdf) {
          _this.setState(function(prevState) {
            if (prevState.pdf && prevState.pdf.fingerprint === pdf.fingerprint) {
              return null;
            }
            return {
              pdf
            };
          }, _this.onLoadSuccess);
        })["catch"](function(error) {
          _this.onLoadError(error);
        });
      })["catch"](function(error) {
        _this.onSourceError(error);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "setupLinkService", function() {
      var _this$props2 = _this.props, externalLinkRel = _this$props2.externalLinkRel, externalLinkTarget = _this$props2.externalLinkTarget;
      _this.linkService.setViewer(_this.viewer);
      _this.linkService.setExternalLinkRel(externalLinkRel);
      _this.linkService.setExternalLinkTarget(externalLinkTarget);
    });
    _defineProperty(_assertThisInitialized(_this), "onSourceSuccess", function() {
      var onSourceSuccess = _this.props.onSourceSuccess;
      if (onSourceSuccess)
        onSourceSuccess();
    });
    _defineProperty(_assertThisInitialized(_this), "onSourceError", function(error) {
      tiny_warning_esm_default(error);
      var onSourceError = _this.props.onSourceError;
      if (onSourceError)
        onSourceError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadSuccess", function() {
      var onLoadSuccess = _this.props.onLoadSuccess;
      var pdf = _this.state.pdf;
      if (onLoadSuccess)
        onLoadSuccess(pdf);
      _this.pages = new Array(pdf.numPages);
      _this.linkService.setDocument(pdf);
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadError", function(error) {
      _this.setState({
        pdf: false
      });
      tiny_warning_esm_default(error);
      var onLoadError = _this.props.onLoadError;
      if (onLoadError)
        onLoadError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "findDocumentSource", function() {
      return new Promise(function(resolve) {
        var file = _this.props.file;
        if (!file) {
          resolve(null);
        }
        if (typeof file === "string") {
          if (isDataURI(file)) {
            var fileByteString = dataURItoByteString(file);
            resolve({
              data: fileByteString
            });
          }
          displayCORSWarning();
          resolve({
            url: file
          });
        }
        if (file instanceof PDFDataRangeTransport3) {
          resolve({
            range: file
          });
        }
        if (isArrayBuffer(file)) {
          resolve({
            data: file
          });
        }
        if (isBrowser) {
          if (isBlob(file) || isFile(file)) {
            loadFromFile(file).then(function(data) {
              resolve({
                data
              });
            });
            return;
          }
        }
        invariant(_typeof2(file) === "object", "Invalid parameter in file, need either Uint8Array, string or a parameter object");
        invariant(file.url || file.data || file.range, "Invalid parameter object: need either .data, .range or .url");
        if (typeof file.url === "string") {
          if (isDataURI(file.url)) {
            var url = file.url, otherParams = _objectWithoutProperties(file, _excluded);
            var _fileByteString = dataURItoByteString(url);
            resolve(_objectSpread({
              data: _fileByteString
            }, otherParams));
          }
          displayCORSWarning();
        }
        resolve(file);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "registerPage", function(pageIndex, ref) {
      _this.pages[pageIndex] = ref;
    });
    _defineProperty(_assertThisInitialized(_this), "unregisterPage", function(pageIndex) {
      delete _this.pages[pageIndex];
    });
    return _this;
  }
  _createClass2(Document2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.loadDocument();
      this.setupLinkService();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var file = this.props.file;
      if (file !== prevProps.file) {
        this.loadDocument();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      cancelRunningTask(this.runningTask);
      if (this.loadingTask)
        this.loadingTask.destroy();
    }
  }, {
    key: "childContext",
    get: function get2() {
      var linkService = this.linkService, registerPage = this.registerPage, unregisterPage = this.unregisterPage;
      var _this$props3 = this.props, imageResourcesPath = _this$props3.imageResourcesPath, renderMode = _this$props3.renderMode, rotate = _this$props3.rotate;
      var pdf = this.state.pdf;
      return {
        imageResourcesPath,
        linkService,
        pdf,
        registerPage,
        renderMode,
        rotate,
        unregisterPage
      };
    }
  }, {
    key: "eventProps",
    get: function get2() {
      var _this2 = this;
      return esm_default(this.props, function() {
        return _this2.state.pdf;
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var children = this.props.children;
      return import_react3.default.createElement(DocumentContext_default.Provider, {
        value: this.childContext
      }, children);
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var file = this.props.file;
      var pdf = this.state.pdf;
      if (!file) {
        var noData = this.props.noData;
        return import_react3.default.createElement(Message, {
          type: "no-data"
        }, typeof noData === "function" ? noData() : noData);
      }
      if (pdf === null) {
        var loading = this.props.loading;
        return import_react3.default.createElement(Message, {
          type: "loading"
        }, typeof loading === "function" ? loading() : loading);
      }
      if (pdf === false) {
        var error = this.props.error;
        return import_react3.default.createElement(Message, {
          type: "error"
        }, typeof error === "function" ? error() : error);
      }
      return this.renderChildren();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props, className = _this$props4.className, inputRef = _this$props4.inputRef;
      return import_react3.default.createElement("div", _extends({
        className: mergeClassNames("react-pdf__Document", className),
        ref: inputRef
      }, this.eventProps), this.renderContent());
    }
  }]);
  return Document2;
}(import_react3.PureComponent);
Document.defaultProps = {
  error: "Failed to load PDF file.",
  loading: "Loading PDF\u2026",
  noData: "No PDF file specified.",
  onPassword: function onPassword(callback, reason) {
    switch (reason) {
      case PasswordResponses_default.NEED_PASSWORD: {
        var password = prompt("Enter the password to open this PDF file.");
        callback(password);
        break;
      }
      case PasswordResponses_default.INCORRECT_PASSWORD: {
        var _password = prompt("Invalid password. Please try again.");
        callback(_password);
        break;
      }
      default:
    }
  }
};
var isFunctionOrNode = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.node]);
Document.propTypes = _objectSpread(_objectSpread({}, eventProps), {}, {
  children: import_prop_types3.default.node,
  className: isClassName,
  error: isFunctionOrNode,
  externalLinkRel: import_prop_types3.default.string,
  externalLinkTarget: import_prop_types3.default.string,
  file: isFile2,
  imageResourcesPath: import_prop_types3.default.string,
  inputRef: isRef,
  loading: isFunctionOrNode,
  noData: isFunctionOrNode,
  onItemClick: import_prop_types3.default.func,
  onLoadError: import_prop_types3.default.func,
  onLoadProgress: import_prop_types3.default.func,
  onLoadSuccess: import_prop_types3.default.func,
  onPassword: import_prop_types3.default.func,
  onSourceError: import_prop_types3.default.func,
  onSourceSuccess: import_prop_types3.default.func,
  rotate: import_prop_types3.default.number
});

// node_modules/react-pdf/dist/esm/Outline.js
init_extends();
init_defineProperty();
var import_react6 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());

// node_modules/react-pdf/dist/esm/OutlineContext.js
var import_react4 = __toESM(require_react());
var OutlineContext_default = (0, import_react4.createContext)(null);

// node_modules/react-pdf/dist/esm/OutlineItem.js
init_extends();
init_defineProperty();
var import_react5 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/react-pdf/dist/esm/Ref.js
var Ref = function() {
  function Ref2(_ref) {
    var num = _ref.num, gen = _ref.gen;
    _classCallCheck2(this, Ref2);
    this.num = num;
    this.gen = gen;
  }
  _createClass2(Ref2, [{
    key: "toString",
    value: function toString() {
      var str = "".concat(this.num, "R");
      if (this.gen !== 0) {
        str += this.gen;
      }
      return str;
    }
  }]);
  return Ref2;
}();

// node_modules/react-pdf/dist/esm/OutlineItem.js
var _excluded2 = ["item"];
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var OutlineItemInternal = function(_PureComponent) {
  _inherits(OutlineItemInternal2, _PureComponent);
  var _super = _createSuper2(OutlineItemInternal2);
  function OutlineItemInternal2() {
    var _this;
    _classCallCheck2(this, OutlineItemInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "getDestination", function() {
      return new Promise(function(resolve, reject) {
        var _this$props = _this.props, item = _this$props.item, pdf = _this$props.pdf;
        if (!isDefined(_this.destination)) {
          if (typeof item.dest === "string") {
            pdf.getDestination(item.dest).then(resolve)["catch"](reject);
          } else {
            resolve(item.dest);
          }
        }
        return _this.destination;
      }).then(function(destination) {
        _this.destination = destination;
        return destination;
      });
    });
    _defineProperty(_assertThisInitialized(_this), "getPageIndex", function() {
      return new Promise(function(resolve, reject) {
        var pdf = _this.props.pdf;
        if (isDefined(_this.pageIndex)) {
          resolve(_this.pageIndex);
        }
        _this.getDestination().then(function(destination) {
          if (!destination) {
            return;
          }
          var _destination = _slicedToArray2(destination, 1), ref = _destination[0];
          pdf.getPageIndex(new Ref(ref)).then(resolve)["catch"](reject);
        });
      }).then(function(pageIndex) {
        _this.pageIndex = pageIndex;
        return _this.pageIndex;
      });
    });
    _defineProperty(_assertThisInitialized(_this), "getPageNumber", function() {
      return new Promise(function(resolve, reject) {
        if (isDefined(_this.pageNumber)) {
          resolve(_this.pageNumber);
        }
        _this.getPageIndex().then(function(pageIndex) {
          resolve(pageIndex + 1);
        })["catch"](reject);
      }).then(function(pageNumber) {
        _this.pageNumber = pageNumber;
        return pageNumber;
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onClick", function(event) {
      var onClick = _this.props.onClick;
      event.preventDefault();
      if (!onClick) {
        return false;
      }
      return Promise.all([_this.getDestination(), _this.getPageIndex(), _this.getPageNumber()]).then(function(_ref) {
        var _ref2 = _slicedToArray2(_ref, 3), dest = _ref2[0], pageIndex = _ref2[1], pageNumber = _ref2[2];
        onClick({
          dest,
          pageIndex,
          pageNumber
        });
      });
    });
    return _this;
  }
  _createClass2(OutlineItemInternal2, [{
    key: "renderSubitems",
    value: function renderSubitems() {
      var _this$props2 = this.props, item = _this$props2.item, otherProps = _objectWithoutProperties(_this$props2, _excluded2);
      if (!item.items || !item.items.length) {
        return null;
      }
      var subitems = item.items;
      return import_react5.default.createElement("ul", null, subitems.map(function(subitem, subitemIndex) {
        return import_react5.default.createElement(OutlineItemInternal2, _extends({
          key: typeof subitem.destination === "string" ? subitem.destination : subitemIndex,
          item: subitem
        }, otherProps));
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var item = this.props.item;
      return import_react5.default.createElement("li", null, import_react5.default.createElement("a", {
        href: "#",
        onClick: this.onClick
      }, item.title), this.renderSubitems());
    }
  }]);
  return OutlineItemInternal2;
}(import_react5.PureComponent);
var isDestination = import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.arrayOf(import_prop_types4.default.any)]);
OutlineItemInternal.propTypes = {
  item: import_prop_types4.default.shape({
    dest: isDestination,
    items: import_prop_types4.default.arrayOf(import_prop_types4.default.shape({
      dest: isDestination,
      title: import_prop_types4.default.string
    })),
    title: import_prop_types4.default.string
  }).isRequired,
  onClick: import_prop_types4.default.func,
  pdf: isPdf.isRequired
};
var OutlineItem = function OutlineItem2(props) {
  return import_react5.default.createElement(DocumentContext_default.Consumer, null, function(documentContext) {
    return import_react5.default.createElement(OutlineContext_default.Consumer, null, function(outlineContext) {
      return import_react5.default.createElement(OutlineItemInternal, _extends({}, documentContext, outlineContext, props));
    });
  });
};
var OutlineItem_default = OutlineItem;

// node_modules/react-pdf/dist/esm/Outline.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var OutlineInternal = function(_PureComponent) {
  _inherits(OutlineInternal2, _PureComponent);
  var _super = _createSuper3(OutlineInternal2);
  function OutlineInternal2() {
    var _this;
    _classCallCheck2(this, OutlineInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      outline: null
    });
    _defineProperty(_assertThisInitialized(_this), "loadOutline", function() {
      var pdf = _this.props.pdf;
      _this.setState(function(prevState) {
        if (!prevState.outline) {
          return null;
        }
        return {
          outline: null
        };
      });
      var cancellable = makeCancellablePromise(pdf.getOutline());
      _this.runningTask = cancellable;
      cancellable.promise.then(function(outline) {
        _this.setState({
          outline
        }, _this.onLoadSuccess);
      })["catch"](function(error) {
        _this.onLoadError(error);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadSuccess", function() {
      var onLoadSuccess = _this.props.onLoadSuccess;
      var outline = _this.state.outline;
      if (onLoadSuccess)
        onLoadSuccess(outline);
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadError", function(error) {
      _this.setState({
        outline: false
      });
      tiny_warning_esm_default(error);
      var onLoadError = _this.props.onLoadError;
      if (onLoadError)
        onLoadError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "onItemClick", function(_ref) {
      var dest = _ref.dest, pageIndex = _ref.pageIndex, pageNumber = _ref.pageNumber;
      var onItemClick = _this.props.onItemClick;
      if (onItemClick) {
        onItemClick({
          dest,
          pageIndex,
          pageNumber
        });
      }
    });
    return _this;
  }
  _createClass2(OutlineInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var pdf = this.props.pdf;
      invariant(pdf, "Attempted to load an outline, but no document was specified.");
      this.loadOutline();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var pdf = this.props.pdf;
      if (prevProps.pdf && pdf !== prevProps.pdf) {
        this.loadOutline();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      cancelRunningTask(this.runningTask);
    }
  }, {
    key: "childContext",
    get: function get2() {
      return {
        onClick: this.onItemClick
      };
    }
  }, {
    key: "eventProps",
    get: function get2() {
      var _this2 = this;
      return esm_default(this.props, function() {
        return _this2.state.outline;
      });
    }
  }, {
    key: "renderOutline",
    value: function renderOutline() {
      var outline = this.state.outline;
      return import_react6.default.createElement("ul", null, outline.map(function(item, itemIndex) {
        return import_react6.default.createElement(OutlineItem_default, {
          key: typeof item.destination === "string" ? item.destination : itemIndex,
          item
        });
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var pdf = this.props.pdf;
      var outline = this.state.outline;
      if (!pdf || !outline) {
        return null;
      }
      var _this$props = this.props, className = _this$props.className, inputRef = _this$props.inputRef;
      return import_react6.default.createElement("div", _extends({
        className: mergeClassNames("react-pdf__Outline", className),
        ref: inputRef
      }, this.eventProps), import_react6.default.createElement(OutlineContext_default.Provider, {
        value: this.childContext
      }, this.renderOutline()));
    }
  }]);
  return OutlineInternal2;
}(import_react6.PureComponent);
OutlineInternal.propTypes = _objectSpread2({
  className: isClassName,
  inputRef: isRef,
  onItemClick: import_prop_types5.default.func,
  onLoadError: import_prop_types5.default.func,
  onLoadSuccess: import_prop_types5.default.func,
  pdf: isPdf
}, eventProps);
function Outline(props, ref) {
  return import_react6.default.createElement(DocumentContext_default.Consumer, null, function(context) {
    return import_react6.default.createElement(OutlineInternal, _extends({
      ref
    }, context, props));
  });
}
var Outline_default = import_react6.default.forwardRef(Outline);

// node_modules/react-pdf/dist/esm/Page.js
init_extends();
init_defineProperty();
var import_react13 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());

// node_modules/merge-refs/dist/esm/index.js
function mergeRefs() {
  for (var _len = arguments.length, inputRefs = new Array(_len), _key = 0; _key < _len; _key++) {
    inputRefs[_key] = arguments[_key];
  }
  var filteredInputRefs = inputRefs.filter(Boolean);
  if (filteredInputRefs.length <= 1) {
    return filteredInputRefs[0];
  }
  return function mergedRefs(ref) {
    filteredInputRefs.forEach(function(inputRef) {
      if (typeof inputRef === "function") {
        inputRef(ref);
      } else {
        inputRef.current = ref;
      }
    });
  };
}

// node_modules/react-pdf/dist/esm/PageContext.js
var import_react7 = __toESM(require_react());
var PageContext_default = (0, import_react7.createContext)(null);

// node_modules/react-pdf/dist/esm/Page/PageCanvas.js
init_extends();
init_defineProperty();
var import_react8 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var pdfjs2 = __toESM(require_pdf());
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ANNOTATION_MODE = pdfjs2.AnnotationMode;
var PageCanvasInternal = function(_PureComponent) {
  _inherits(PageCanvasInternal2, _PureComponent);
  var _super = _createSuper4(PageCanvasInternal2);
  function PageCanvasInternal2() {
    var _this;
    _classCallCheck2(this, PageCanvasInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "canvasElement", (0, import_react8.createRef)());
    _defineProperty(_assertThisInitialized(_this), "onRenderSuccess", function() {
      _this.renderer = null;
      var _this$props = _this.props, onRenderSuccess = _this$props.onRenderSuccess, page = _this$props.page, scale = _this$props.scale;
      if (onRenderSuccess)
        onRenderSuccess(makePageCallback(page, scale));
    });
    _defineProperty(_assertThisInitialized(_this), "onRenderError", function(error) {
      if (isCancelException(error)) {
        return;
      }
      tiny_warning_esm_default(error);
      var onRenderError = _this.props.onRenderError;
      if (onRenderError)
        onRenderError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "drawPageOnCanvas", function() {
      var canvas = _this.canvasElement.current;
      if (!canvas) {
        return null;
      }
      var _assertThisInitialize = _assertThisInitialized(_this), renderViewport = _assertThisInitialize.renderViewport, viewport = _assertThisInitialize.viewport;
      var _this$props2 = _this.props, canvasBackground = _this$props2.canvasBackground, page = _this$props2.page, renderForms = _this$props2.renderForms;
      canvas.width = renderViewport.width;
      canvas.height = renderViewport.height;
      canvas.style.width = "".concat(Math.floor(viewport.width), "px");
      canvas.style.height = "".concat(Math.floor(viewport.height), "px");
      var renderContext = {
        annotationMode: renderForms ? ANNOTATION_MODE.ENABLE_FORMS : ANNOTATION_MODE.ENABLE,
        get canvasContext() {
          return canvas.getContext("2d");
        },
        viewport: renderViewport
      };
      if (canvasBackground) {
        renderContext.background = canvasBackground;
      }
      _this.cancelRenderingTask();
      _this.renderer = page.render(renderContext);
      return _this.renderer.promise.then(_this.onRenderSuccess)["catch"](_this.onRenderError);
    });
    return _this;
  }
  _createClass2(PageCanvasInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.drawPageOnCanvas();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props3 = this.props, canvasBackground = _this$props3.canvasBackground, page = _this$props3.page, renderForms = _this$props3.renderForms;
      if (canvasBackground !== prevProps.canvasBackground || renderForms !== prevProps.renderForms) {
        page.cleanup();
        this.drawPageOnCanvas();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelRenderingTask();
      var canvas = this.canvasElement.current;
      if (canvas) {
        canvas.width = 0;
        canvas.height = 0;
      }
    }
  }, {
    key: "cancelRenderingTask",
    value: function cancelRenderingTask() {
      if (this.renderer) {
        this.renderer.cancel();
        this.renderer = null;
      }
    }
  }, {
    key: "renderViewport",
    get: function get2() {
      var _this$props4 = this.props, page = _this$props4.page, rotate = _this$props4.rotate, scale = _this$props4.scale;
      var pixelRatio = getPixelRatio();
      return page.getViewport({
        scale: scale * pixelRatio,
        rotation: rotate
      });
    }
  }, {
    key: "viewport",
    get: function get2() {
      var _this$props5 = this.props, page = _this$props5.page, rotate = _this$props5.rotate, scale = _this$props5.scale;
      return page.getViewport({
        scale,
        rotation: rotate
      });
    }
  }, {
    key: "render",
    value: function render() {
      var canvasRef = this.props.canvasRef;
      return import_react8.default.createElement("canvas", {
        className: "react-pdf__Page__canvas",
        dir: "ltr",
        ref: mergeRefs(canvasRef, this.canvasElement),
        style: {
          display: "block",
          userSelect: "none"
        }
      });
    }
  }]);
  return PageCanvasInternal2;
}(import_react8.PureComponent);
PageCanvasInternal.propTypes = {
  canvasBackground: import_prop_types6.default.string,
  canvasRef: isRef,
  onRenderError: import_prop_types6.default.func,
  onRenderSuccess: import_prop_types6.default.func,
  page: isPage.isRequired,
  renderForms: import_prop_types6.default.bool,
  rotate: isRotate,
  scale: import_prop_types6.default.number.isRequired
};
function PageCanvas(props) {
  return import_react8.default.createElement(PageContext_default.Consumer, null, function(context) {
    return import_react8.default.createElement(PageCanvasInternal, _extends({}, context, props));
  });
}

// node_modules/react-pdf/dist/esm/Page/PageSVG.js
init_extends();
init_defineProperty();
var import_react9 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var pdfjs3 = __toESM(require_pdf());
function _createSuper5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct5() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var PageSVGInternal = function(_PureComponent) {
  _inherits(PageSVGInternal2, _PureComponent);
  var _super = _createSuper5(PageSVGInternal2);
  function PageSVGInternal2() {
    var _this;
    _classCallCheck2(this, PageSVGInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      svg: null
    });
    _defineProperty(_assertThisInitialized(_this), "onRenderSuccess", function() {
      _this.renderer = null;
      var _this$props = _this.props, onRenderSuccess = _this$props.onRenderSuccess, page = _this$props.page, scale = _this$props.scale;
      if (onRenderSuccess)
        onRenderSuccess(makePageCallback(page, scale));
    });
    _defineProperty(_assertThisInitialized(_this), "onRenderError", function(error) {
      if (isCancelException(error)) {
        return;
      }
      tiny_warning_esm_default(error);
      var onRenderError = _this.props.onRenderError;
      if (onRenderError)
        onRenderError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "renderSVG", function() {
      var page = _this.props.page;
      _this.renderer = page.getOperatorList();
      return _this.renderer.then(function(operatorList) {
        var svgGfx = new pdfjs3.SVGGraphics(page.commonObjs, page.objs);
        _this.renderer = svgGfx.getSVG(operatorList, _this.viewport).then(function(svg) {
          _this.setState({
            svg
          }, _this.onRenderSuccess);
        })["catch"](_this.onRenderError);
      })["catch"](_this.onRenderError);
    });
    _defineProperty(_assertThisInitialized(_this), "drawPageOnContainer", function(element) {
      var svg = _this.state.svg;
      if (!element || !svg) {
        return;
      }
      if (!element.firstElementChild) {
        element.appendChild(svg);
      }
      var _this$viewport = _this.viewport, width = _this$viewport.width, height = _this$viewport.height;
      svg.setAttribute("width", width);
      svg.setAttribute("height", height);
    });
    return _this;
  }
  _createClass2(PageSVGInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderSVG();
    }
  }, {
    key: "viewport",
    get: function get2() {
      var _this$props2 = this.props, page = _this$props2.page, rotate = _this$props2.rotate, scale = _this$props2.scale;
      return page.getViewport({
        scale,
        rotation: rotate
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$viewport2 = this.viewport, width = _this$viewport2.width, height = _this$viewport2.height;
      return import_react9.default.createElement("div", {
        className: "react-pdf__Page__svg",
        ref: function ref(_ref) {
          return _this2.drawPageOnContainer(_ref);
        },
        style: {
          display: "block",
          backgroundColor: "white",
          overflow: "hidden",
          width,
          height,
          userSelect: "none"
        }
      });
    }
  }]);
  return PageSVGInternal2;
}(import_react9.PureComponent);
PageSVGInternal.propTypes = {
  onRenderError: import_prop_types7.default.func,
  onRenderSuccess: import_prop_types7.default.func,
  page: isPage.isRequired,
  rotate: isRotate,
  scale: import_prop_types7.default.number.isRequired
};
function PageSVG(props) {
  return import_react9.default.createElement(PageContext_default.Consumer, null, function(context) {
    return import_react9.default.createElement(PageSVGInternal, _extends({}, context, props));
  });
}

// node_modules/react-pdf/dist/esm/Page/TextLayer.js
init_extends();
init_defineProperty();
var import_react11 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/react-pdf/dist/esm/Page/TextLayerItem.js
init_extends();
init_defineProperty();
var import_react10 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
function _createSuper6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct6() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var TextLayerItemInternal = function(_PureComponent) {
  _inherits(TextLayerItemInternal2, _PureComponent);
  var _super = _createSuper6(TextLayerItemInternal2);
  function TextLayerItemInternal2() {
    var _this;
    _classCallCheck2(this, TextLayerItemInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "itemElement", (0, import_react10.createRef)());
    _defineProperty(_assertThisInitialized(_this), "getElementWidth", function(element) {
      var _assertThisInitialize = _assertThisInitialized(_this), sideways = _assertThisInitialize.sideways;
      return element.getBoundingClientRect()[sideways ? "height" : "width"];
    });
    return _this;
  }
  _createClass2(TextLayerItemInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.alignTextItem();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.alignTextItem();
    }
  }, {
    key: "unrotatedViewport",
    get: function get2() {
      var _this$props = this.props, page = _this$props.page, scale = _this$props.scale;
      return page.getViewport({
        scale
      });
    }
  }, {
    key: "rotate",
    get: function get2() {
      var _this$props2 = this.props, page = _this$props2.page, rotate = _this$props2.rotate;
      return rotate - page.rotate;
    }
  }, {
    key: "sideways",
    get: function get2() {
      var rotate = this.rotate;
      return rotate % 180 !== 0;
    }
  }, {
    key: "defaultSideways",
    get: function get2() {
      var rotation = this.unrotatedViewport.rotation;
      return rotation % 180 !== 0;
    }
  }, {
    key: "fontSize",
    get: function get2() {
      var transform = this.props.transform;
      var defaultSideways = this.defaultSideways;
      var _transform = _slicedToArray2(transform, 2), fontHeightPx = _transform[0], fontWidthPx = _transform[1];
      return defaultSideways ? fontWidthPx : fontHeightPx;
    }
  }, {
    key: "top",
    get: function get2() {
      var transform = this.props.transform;
      var viewport = this.unrotatedViewport, defaultSideways = this.defaultSideways;
      var _transform2 = _slicedToArray2(transform, 6), offsetX = _transform2[2], offsetY = _transform2[3], x = _transform2[4], y = _transform2[5];
      var _viewport$viewBox = _slicedToArray2(viewport.viewBox, 4), yMin = _viewport$viewBox[1], yMax = _viewport$viewBox[3];
      return defaultSideways ? x + offsetX + yMin : yMax - (y + offsetY);
    }
  }, {
    key: "left",
    get: function get2() {
      var transform = this.props.transform;
      var viewport = this.unrotatedViewport, defaultSideways = this.defaultSideways;
      var _transform3 = _slicedToArray2(transform, 6), x = _transform3[4], y = _transform3[5];
      var _viewport$viewBox2 = _slicedToArray2(viewport.viewBox, 1), xMin = _viewport$viewBox2[0];
      return defaultSideways ? y - xMin : x - xMin;
    }
  }, {
    key: "getFontData",
    value: function getFontData(fontName) {
      var page = this.props.page;
      return new Promise(function(resolve) {
        page.commonObjs.get(fontName, resolve);
      });
    }
  }, {
    key: "alignTextItem",
    value: function alignTextItem() {
      var _this2 = this;
      var element = this.itemElement.current;
      if (!element) {
        return;
      }
      element.style.transform = "";
      var _this$props3 = this.props, fontName = _this$props3.fontName, scale = _this$props3.scale, width = _this$props3.width;
      element.style.fontFamily = "".concat(fontName, ", sans-serif");
      this.getFontData(fontName).then(function(fontData) {
        var fallbackFontName = fontData ? fontData.fallbackName : "sans-serif";
        element.style.fontFamily = "".concat(fontName, ", ").concat(fallbackFontName);
        var targetWidth = width * scale;
        var actualWidth = _this2.getElementWidth(element);
        var transform = "scaleX(".concat(targetWidth / actualWidth, ")");
        var ascent = fontData ? fontData.ascent : 0;
        if (ascent) {
          transform += " translateY(".concat((1 - ascent) * 100, "%)");
        }
        element.style.transform = transform;
        element.style.WebkitTransform = transform;
      });
    }
  }, {
    key: "render",
    value: function render() {
      var fontSize = this.fontSize, top = this.top, left = this.left;
      var _this$props4 = this.props, customTextRenderer = _this$props4.customTextRenderer, scale = _this$props4.scale, text = _this$props4.str;
      return import_react10.default.createElement("span", {
        ref: this.itemElement,
        style: {
          height: "1em",
          fontFamily: "sans-serif",
          fontSize: "".concat(fontSize * scale, "px"),
          position: "absolute",
          top: "".concat(top * scale, "px"),
          left: "".concat(left * scale, "px"),
          transformOrigin: "left bottom",
          whiteSpace: "pre",
          pointerEvents: "all"
        }
      }, customTextRenderer ? customTextRenderer(this.props) : text);
    }
  }]);
  return TextLayerItemInternal2;
}(import_react10.PureComponent);
TextLayerItemInternal.propTypes = {
  customTextRenderer: import_prop_types8.default.func,
  fontName: import_prop_types8.default.string.isRequired,
  itemIndex: import_prop_types8.default.number.isRequired,
  page: isPage.isRequired,
  rotate: isRotate,
  scale: import_prop_types8.default.number,
  str: import_prop_types8.default.string.isRequired,
  transform: import_prop_types8.default.arrayOf(import_prop_types8.default.number).isRequired,
  width: import_prop_types8.default.number.isRequired
};
function TextLayerItem(props) {
  return import_react10.default.createElement(PageContext_default.Consumer, null, function(context) {
    return import_react10.default.createElement(TextLayerItemInternal, _extends({}, context, props));
  });
}

// node_modules/react-pdf/dist/esm/Page/TextLayer.js
function _createSuper7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct7() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var TextLayerInternal = function(_PureComponent) {
  _inherits(TextLayerInternal2, _PureComponent);
  var _super = _createSuper7(TextLayerInternal2);
  function TextLayerInternal2() {
    var _this;
    _classCallCheck2(this, TextLayerInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      textItems: null
    });
    _defineProperty(_assertThisInitialized(_this), "loadTextItems", function() {
      var page = _this.props.page;
      var cancellable = makeCancellablePromise(page.getTextContent());
      _this.runningTask = cancellable;
      cancellable.promise.then(function(_ref) {
        var textItems = _ref.items;
        _this.setState({
          textItems
        }, _this.onLoadSuccess);
      })["catch"](function(error) {
        _this.onLoadError(error);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadSuccess", function() {
      var onGetTextSuccess = _this.props.onGetTextSuccess;
      var textItems = _this.state.textItems;
      if (onGetTextSuccess)
        onGetTextSuccess(textItems);
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadError", function(error) {
      _this.setState({
        textItems: false
      });
      tiny_warning_esm_default(error);
      var onGetTextError = _this.props.onGetTextError;
      if (onGetTextError)
        onGetTextError(error);
    });
    return _this;
  }
  _createClass2(TextLayerInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var page = this.props.page;
      invariant(page, "Attempted to load page text content, but no page was specified.");
      this.loadTextItems();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var page = this.props.page;
      if (prevProps.page && page !== prevProps.page) {
        this.loadTextItems();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      cancelRunningTask(this.runningTask);
    }
  }, {
    key: "unrotatedViewport",
    get: function get2() {
      var _this$props = this.props, page = _this$props.page, scale = _this$props.scale;
      return page.getViewport({
        scale
      });
    }
  }, {
    key: "rotate",
    get: function get2() {
      var _this$props2 = this.props, page = _this$props2.page, rotate = _this$props2.rotate;
      return rotate - page.rotate;
    }
  }, {
    key: "renderTextItems",
    value: function renderTextItems() {
      var textItems = this.state.textItems;
      if (!textItems) {
        return null;
      }
      return textItems.map(function(textItem, itemIndex) {
        return import_react11.default.createElement(
          TextLayerItem,
          _extends({
            key: itemIndex,
            itemIndex
          }, textItem)
        );
      });
    }
  }, {
    key: "render",
    value: function render() {
      var viewport = this.unrotatedViewport, rotate = this.rotate;
      return import_react11.default.createElement("div", {
        className: "react-pdf__Page__textContent",
        style: {
          position: "absolute",
          top: "50%",
          left: "50%",
          width: "".concat(viewport.width, "px"),
          height: "".concat(viewport.height, "px"),
          color: "transparent",
          transform: "translate(-50%, -50%) rotate(".concat(rotate, "deg)"),
          WebkitTransform: "translate(-50%, -50%) rotate(".concat(rotate, "deg)"),
          pointerEvents: "none"
        }
      }, this.renderTextItems());
    }
  }]);
  return TextLayerInternal2;
}(import_react11.PureComponent);
TextLayerInternal.propTypes = {
  onGetTextError: import_prop_types9.default.func,
  onGetTextSuccess: import_prop_types9.default.func,
  page: isPage.isRequired,
  rotate: isRotate,
  scale: import_prop_types9.default.number
};
function TextLayer(props) {
  return import_react11.default.createElement(PageContext_default.Consumer, null, function(context) {
    return import_react11.default.createElement(TextLayerInternal, _extends({}, context, props));
  });
}

// node_modules/react-pdf/dist/esm/Page/AnnotationLayer.js
init_extends();
init_defineProperty();
var import_react12 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
var pdfjs4 = __toESM(require_pdf());
function _createSuper8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct8() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var AnnotationLayerInternal = function(_PureComponent) {
  _inherits(AnnotationLayerInternal2, _PureComponent);
  var _super = _createSuper8(AnnotationLayerInternal2);
  function AnnotationLayerInternal2() {
    var _this;
    _classCallCheck2(this, AnnotationLayerInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      annotations: null
    });
    _defineProperty(_assertThisInitialized(_this), "layerElement", (0, import_react12.createRef)());
    _defineProperty(_assertThisInitialized(_this), "loadAnnotations", function() {
      var page = _this.props.page;
      var cancellable = makeCancellablePromise(page.getAnnotations());
      _this.runningTask = cancellable;
      cancellable.promise.then(function(annotations) {
        _this.setState({
          annotations
        }, _this.onLoadSuccess);
      })["catch"](function(error) {
        _this.onLoadError(error);
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadSuccess", function() {
      var onGetAnnotationsSuccess = _this.props.onGetAnnotationsSuccess;
      var annotations = _this.state.annotations;
      if (onGetAnnotationsSuccess)
        onGetAnnotationsSuccess(annotations);
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadError", function(error) {
      _this.setState({
        annotations: false
      });
      tiny_warning_esm_default(error);
      var onGetAnnotationsError = _this.props.onGetAnnotationsError;
      if (onGetAnnotationsError)
        onGetAnnotationsError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "onRenderSuccess", function() {
      var onRenderAnnotationLayerSuccess = _this.props.onRenderAnnotationLayerSuccess;
      if (onRenderAnnotationLayerSuccess)
        onRenderAnnotationLayerSuccess();
    });
    _defineProperty(_assertThisInitialized(_this), "onRenderError", function(error) {
      tiny_warning_esm_default(error);
      var onRenderAnnotationLayerError = _this.props.onRenderAnnotationLayerError;
      if (onRenderAnnotationLayerError)
        onRenderAnnotationLayerError(error);
    });
    return _this;
  }
  _createClass2(AnnotationLayerInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var page = this.props.page;
      invariant(page, "Attempted to load page annotations, but no page was specified.");
      this.loadAnnotations();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props, page = _this$props.page, renderForms = _this$props.renderForms;
      if (prevProps.page && page !== prevProps.page || renderForms !== prevProps.renderForms) {
        this.loadAnnotations();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      cancelRunningTask(this.runningTask);
    }
  }, {
    key: "viewport",
    get: function get2() {
      var _this$props2 = this.props, page = _this$props2.page, rotate = _this$props2.rotate, scale = _this$props2.scale;
      return page.getViewport({
        scale,
        rotation: rotate
      });
    }
  }, {
    key: "renderAnnotationLayer",
    value: function renderAnnotationLayer() {
      var annotations = this.state.annotations;
      if (!annotations) {
        return;
      }
      var _this$props3 = this.props, imageResourcesPath = _this$props3.imageResourcesPath, linkService = _this$props3.linkService, page = _this$props3.page, renderForms = _this$props3.renderForms;
      var viewport = this.viewport.clone({
        dontFlip: true
      });
      var parameters = {
        annotations,
        div: this.layerElement.current,
        imageResourcesPath,
        linkService,
        page,
        renderForms,
        viewport
      };
      this.layerElement.current.innerHTML = "";
      try {
        pdfjs4.AnnotationLayer.render(parameters);
        this.onRenderSuccess();
      } catch (error) {
        this.onRenderError(error);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return import_react12.default.createElement("div", {
        className: "react-pdf__Page__annotations annotationLayer",
        ref: this.layerElement
      }, this.renderAnnotationLayer());
    }
  }]);
  return AnnotationLayerInternal2;
}(import_react12.PureComponent);
AnnotationLayerInternal.propTypes = {
  imageResourcesPath: import_prop_types10.default.string,
  linkService: isLinkService.isRequired,
  onGetAnnotationsError: import_prop_types10.default.func,
  onGetAnnotationsSuccess: import_prop_types10.default.func,
  onRenderAnnotationLayerError: import_prop_types10.default.func,
  onRenderAnnotationLayerSuccess: import_prop_types10.default.func,
  page: isPage,
  renderForms: import_prop_types10.default.bool,
  rotate: isRotate,
  scale: import_prop_types10.default.number
};
var AnnotationLayer2 = function AnnotationLayer3(props) {
  return import_react12.default.createElement(DocumentContext_default.Consumer, null, function(documentContext) {
    return import_react12.default.createElement(PageContext_default.Consumer, null, function(pageContext) {
      return import_react12.default.createElement(AnnotationLayerInternal, _extends({}, documentContext, pageContext, props));
    });
  });
};
var AnnotationLayer_default = AnnotationLayer2;

// node_modules/react-pdf/dist/esm/Page.js
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _createSuper9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct9() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var defaultScale = 1;
var PageInternal = function(_PureComponent) {
  _inherits(PageInternal2, _PureComponent);
  var _super = _createSuper9(PageInternal2);
  function PageInternal2() {
    var _this;
    _classCallCheck2(this, PageInternal2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      page: null
    });
    _defineProperty(_assertThisInitialized(_this), "pageElement", (0, import_react13.createRef)());
    _defineProperty(_assertThisInitialized(_this), "onLoadSuccess", function() {
      var _this$props = _this.props, onLoadSuccess = _this$props.onLoadSuccess, registerPage = _this$props.registerPage;
      var page = _this.state.page;
      if (onLoadSuccess)
        onLoadSuccess(makePageCallback(page, _this.scale));
      if (registerPage)
        registerPage(_this.pageIndex, _this.pageElement.current);
    });
    _defineProperty(_assertThisInitialized(_this), "onLoadError", function(error) {
      _this.setState({
        page: false
      });
      tiny_warning_esm_default(error);
      var onLoadError = _this.props.onLoadError;
      if (onLoadError)
        onLoadError(error);
    });
    _defineProperty(_assertThisInitialized(_this), "loadPage", function() {
      var pdf = _this.props.pdf;
      var pageNumber = _this.getPageNumber();
      if (!pageNumber) {
        return;
      }
      _this.setState(function(prevState) {
        if (!prevState.page) {
          return null;
        }
        return {
          page: null
        };
      });
      var cancellable = makeCancellablePromise(pdf.getPage(pageNumber));
      _this.runningTask = cancellable;
      cancellable.promise.then(function(page) {
        _this.setState({
          page
        }, _this.onLoadSuccess);
      })["catch"](function(error) {
        _this.onLoadError(error);
      });
    });
    return _this;
  }
  _createClass2(PageInternal2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var pdf = this.props.pdf;
      invariant(pdf, "Attempted to load a page, but no document was specified.");
      this.loadPage();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var pdf = this.props.pdf;
      if (prevProps.pdf && pdf !== prevProps.pdf || this.getPageNumber() !== this.getPageNumber(prevProps)) {
        var unregisterPage = this.props.unregisterPage;
        if (unregisterPage)
          unregisterPage(this.getPageIndex(prevProps));
        this.loadPage();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var unregisterPage = this.props.unregisterPage;
      if (unregisterPage)
        unregisterPage(this.pageIndex);
      cancelRunningTask(this.runningTask);
    }
  }, {
    key: "childContext",
    get: function get2() {
      var page = this.state.page;
      if (!page) {
        return {};
      }
      var _this$props2 = this.props, canvasBackground = _this$props2.canvasBackground, customTextRenderer = _this$props2.customTextRenderer, onGetAnnotationsError = _this$props2.onGetAnnotationsError, onGetAnnotationsSuccess = _this$props2.onGetAnnotationsSuccess, onGetTextError = _this$props2.onGetTextError, onGetTextSuccess = _this$props2.onGetTextSuccess, onRenderAnnotationLayerError = _this$props2.onRenderAnnotationLayerError, onRenderAnnotationLayerSuccess = _this$props2.onRenderAnnotationLayerSuccess, onRenderError = _this$props2.onRenderError, onRenderSuccess = _this$props2.onRenderSuccess, renderForms = _this$props2.renderForms, renderInteractiveForms = _this$props2.renderInteractiveForms;
      return {
        canvasBackground,
        customTextRenderer,
        onGetAnnotationsError,
        onGetAnnotationsSuccess,
        onGetTextError,
        onGetTextSuccess,
        onRenderAnnotationLayerError,
        onRenderAnnotationLayerSuccess,
        onRenderError,
        onRenderSuccess,
        page,
        renderForms: renderForms !== null && renderForms !== void 0 ? renderForms : renderInteractiveForms,
        rotate: this.rotate,
        scale: this.scale
      };
    }
  }, {
    key: "getPageIndex",
    value: function getPageIndex() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
      if (isProvided(props.pageNumber)) {
        return props.pageNumber - 1;
      }
      if (isProvided(props.pageIndex)) {
        return props.pageIndex;
      }
      return null;
    }
  }, {
    key: "getPageNumber",
    value: function getPageNumber() {
      var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.props;
      if (isProvided(props.pageNumber)) {
        return props.pageNumber;
      }
      if (isProvided(props.pageIndex)) {
        return props.pageIndex + 1;
      }
      return null;
    }
  }, {
    key: "pageIndex",
    get: function get2() {
      return this.getPageIndex();
    }
  }, {
    key: "pageNumber",
    get: function get2() {
      return this.getPageNumber();
    }
  }, {
    key: "rotate",
    get: function get2() {
      var rotate = this.props.rotate;
      if (isProvided(rotate)) {
        return rotate;
      }
      var page = this.state.page;
      if (!page) {
        return null;
      }
      return page.rotate;
    }
  }, {
    key: "scale",
    get: function get2() {
      var page = this.state.page;
      if (!page) {
        return null;
      }
      var _this$props3 = this.props, scale = _this$props3.scale, width = _this$props3.width, height = _this$props3.height;
      var rotate = this.rotate;
      var pageScale = 1;
      var scaleWithDefault = scale === null ? defaultScale : scale;
      if (width || height) {
        var viewport = page.getViewport({
          scale: 1,
          rotation: rotate
        });
        pageScale = width ? width / viewport.width : height / viewport.height;
      }
      return scaleWithDefault * pageScale;
    }
  }, {
    key: "eventProps",
    get: function get2() {
      var _this2 = this;
      return esm_default(this.props, function() {
        var page = _this2.state.page;
        if (!page) {
          return page;
        }
        return makePageCallback(page, _this2.scale);
      });
    }
  }, {
    key: "pageKey",
    get: function get2() {
      var page = this.state.page;
      return "".concat(page.pageIndex, "@").concat(this.scale, "/").concat(this.rotate);
    }
  }, {
    key: "pageKeyNoScale",
    get: function get2() {
      var page = this.state.page;
      return "".concat(page.pageIndex, "/").concat(this.rotate);
    }
  }, {
    key: "renderMainLayer",
    value: function renderMainLayer() {
      var _this$props4 = this.props, canvasRef = _this$props4.canvasRef, renderMode = _this$props4.renderMode;
      switch (renderMode) {
        case "none":
          return null;
        case "svg":
          return import_react13.default.createElement(PageSVG, {
            key: "".concat(this.pageKeyNoScale, "_svg")
          });
        case "canvas":
        default:
          return import_react13.default.createElement(PageCanvas, {
            key: "".concat(this.pageKey, "_canvas"),
            canvasRef
          });
      }
    }
  }, {
    key: "renderTextLayer",
    value: function renderTextLayer() {
      var renderTextLayer2 = this.props.renderTextLayer;
      if (!renderTextLayer2) {
        return null;
      }
      return import_react13.default.createElement(TextLayer, {
        key: "".concat(this.pageKey, "_text")
      });
    }
  }, {
    key: "renderAnnotationLayer",
    value: function renderAnnotationLayer() {
      var renderAnnotationLayer2 = this.props.renderAnnotationLayer;
      if (!renderAnnotationLayer2) {
        return null;
      }
      return import_react13.default.createElement(AnnotationLayer_default, {
        key: "".concat(this.pageKey, "_annotations")
      });
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      var children = this.props.children;
      return import_react13.default.createElement(PageContext_default.Provider, {
        value: this.childContext
      }, this.renderMainLayer(), this.renderTextLayer(), this.renderAnnotationLayer(), children);
    }
  }, {
    key: "renderContent",
    value: function renderContent() {
      var pageNumber = this.pageNumber;
      var pdf = this.props.pdf;
      var page = this.state.page;
      if (!pageNumber) {
        var noData = this.props.noData;
        return import_react13.default.createElement(Message, {
          type: "no-data"
        }, typeof noData === "function" ? noData() : noData);
      }
      if (pdf === null || page === null) {
        var loading = this.props.loading;
        return import_react13.default.createElement(Message, {
          type: "loading"
        }, typeof loading === "function" ? loading() : loading);
      }
      if (pdf === false || page === false) {
        var error = this.props.error;
        return import_react13.default.createElement(Message, {
          type: "error"
        }, typeof error === "function" ? error() : error);
      }
      return this.renderChildren();
    }
  }, {
    key: "render",
    value: function render() {
      var pageNumber = this.pageNumber;
      var _this$props5 = this.props, className = _this$props5.className, inputRef = _this$props5.inputRef;
      return import_react13.default.createElement("div", _extends({
        className: mergeClassNames("react-pdf__Page", className),
        "data-page-number": pageNumber,
        ref: mergeRefs(inputRef, this.pageElement),
        style: {
          position: "relative"
        }
      }, this.eventProps), this.renderContent());
    }
  }]);
  return PageInternal2;
}(import_react13.PureComponent);
PageInternal.defaultProps = {
  error: "Failed to load the page.",
  loading: "Loading page\u2026",
  noData: "No page specified.",
  renderAnnotationLayer: true,
  renderForms: false,
  renderMode: "canvas",
  renderTextLayer: true,
  scale: defaultScale
};
var isFunctionOrNode2 = import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.node]);
PageInternal.propTypes = _objectSpread3(_objectSpread3({}, eventProps), {}, {
  canvasBackground: import_prop_types11.default.string,
  children: import_prop_types11.default.node,
  className: isClassName,
  customTextRenderer: import_prop_types11.default.func,
  error: isFunctionOrNode2,
  height: import_prop_types11.default.number,
  imageResourcesPath: import_prop_types11.default.string,
  inputRef: isRef,
  loading: isFunctionOrNode2,
  noData: isFunctionOrNode2,
  onGetTextError: import_prop_types11.default.func,
  onGetTextSuccess: import_prop_types11.default.func,
  onLoadError: import_prop_types11.default.func,
  onLoadSuccess: import_prop_types11.default.func,
  onRenderError: import_prop_types11.default.func,
  onRenderSuccess: import_prop_types11.default.func,
  pageIndex: isPageIndex,
  pageNumber: isPageNumber,
  pdf: isPdf,
  registerPage: import_prop_types11.default.func,
  renderAnnotationLayer: import_prop_types11.default.bool,
  renderForms: import_prop_types11.default.bool,
  renderInteractiveForms: import_prop_types11.default.bool,
  renderMode: isRenderMode,
  renderTextLayer: import_prop_types11.default.bool,
  rotate: isRotate,
  scale: import_prop_types11.default.number,
  unregisterPage: import_prop_types11.default.func,
  width: import_prop_types11.default.number
});
function Page(props, ref) {
  return import_react13.default.createElement(DocumentContext_default.Consumer, null, function(context) {
    return import_react13.default.createElement(PageInternal, _extends({
      ref
    }, context, props));
  });
}
var Page_default = import_react13.default.forwardRef(Page);

// node_modules/react-pdf/dist/esm/entry.js
displayWorkerWarning();
pdfjs5.GlobalWorkerOptions.workerSrc = "pdf.worker.js";
export {
  Document,
  Outline_default as Outline,
  Page_default as Page,
  pdfjs5 as pdfjs
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=react-pdf.js.map
